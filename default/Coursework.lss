
Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000015a8  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001e0  00000000  00000000  00001e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000361  00000000  00000000  00002057  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002413  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001263  00000000  00000000  000047cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dc9  00000000  00000000  00005a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  000077f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000547  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  0000803f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000060e  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000090c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
       2:	64 c0       	rjmp	.+200    	; 0xcc <__bad_interrupt>
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	62 c0       	rjmp	.+196    	; 0xcc <__bad_interrupt>
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	60 c0       	rjmp	.+192    	; 0xcc <__bad_interrupt>
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	5e c0       	rjmp	.+188    	; 0xcc <__bad_interrupt>
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	9a c0       	rjmp	.+308    	; 0x148 <__vector_9>
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	5a c0       	rjmp	.+180    	; 0xcc <__bad_interrupt>
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	58 c0       	rjmp	.+176    	; 0xcc <__bad_interrupt>
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	56 c0       	rjmp	.+172    	; 0xcc <__bad_interrupt>
      20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
      22:	54 c0       	rjmp	.+168    	; 0xcc <__bad_interrupt>
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	02 c2       	rjmp	.+1028   	; 0x42c <char_to_code+0xd0>
      28:	06 c2       	rjmp	.+1036   	; 0x436 <char_to_code+0xda>
      2a:	05 c2       	rjmp	.+1034   	; 0x436 <char_to_code+0xda>
      2c:	04 c2       	rjmp	.+1032   	; 0x436 <char_to_code+0xda>
      2e:	03 c2       	rjmp	.+1030   	; 0x436 <char_to_code+0xda>
      30:	02 c2       	rjmp	.+1028   	; 0x436 <char_to_code+0xda>
      32:	01 c2       	rjmp	.+1026   	; 0x436 <char_to_code+0xda>
      34:	00 c2       	rjmp	.+1024   	; 0x436 <char_to_code+0xda>
      36:	ff c1       	rjmp	.+1022   	; 0x436 <char_to_code+0xda>
      38:	fe c1       	rjmp	.+1020   	; 0x436 <char_to_code+0xda>
      3a:	fd c1       	rjmp	.+1018   	; 0x436 <char_to_code+0xda>
      3c:	fc c1       	rjmp	.+1016   	; 0x436 <char_to_code+0xda>
      3e:	fb c1       	rjmp	.+1014   	; 0x436 <char_to_code+0xda>
      40:	aa c1       	rjmp	.+852    	; 0x396 <char_to_code+0x3a>
      42:	f9 c1       	rjmp	.+1010   	; 0x436 <char_to_code+0xda>
      44:	f8 c1       	rjmp	.+1008   	; 0x436 <char_to_code+0xda>
      46:	b1 c1       	rjmp	.+866    	; 0x3aa <char_to_code+0x4e>
      48:	b5 c1       	rjmp	.+874    	; 0x3b4 <char_to_code+0x58>
      4a:	b9 c1       	rjmp	.+882    	; 0x3be <char_to_code+0x62>
      4c:	bd c1       	rjmp	.+890    	; 0x3c8 <char_to_code+0x6c>
      4e:	c1 c1       	rjmp	.+898    	; 0x3d2 <char_to_code+0x76>
      50:	c5 c1       	rjmp	.+906    	; 0x3dc <char_to_code+0x80>
      52:	c9 c1       	rjmp	.+914    	; 0x3e6 <char_to_code+0x8a>
      54:	cd c1       	rjmp	.+922    	; 0x3f0 <char_to_code+0x94>
      56:	d1 c1       	rjmp	.+930    	; 0x3fa <char_to_code+0x9e>
      58:	d5 c1       	rjmp	.+938    	; 0x404 <char_to_code+0xa8>
      5a:	ed c1       	rjmp	.+986    	; 0x436 <char_to_code+0xda>
      5c:	ec c1       	rjmp	.+984    	; 0x436 <char_to_code+0xda>
      5e:	eb c1       	rjmp	.+982    	; 0x436 <char_to_code+0xda>
      60:	ea c1       	rjmp	.+980    	; 0x436 <char_to_code+0xda>
      62:	e9 c1       	rjmp	.+978    	; 0x436 <char_to_code+0xda>
      64:	e8 c1       	rjmp	.+976    	; 0x436 <char_to_code+0xda>
      66:	e7 c1       	rjmp	.+974    	; 0x436 <char_to_code+0xda>
      68:	e6 c1       	rjmp	.+972    	; 0x436 <char_to_code+0xda>
      6a:	e5 c1       	rjmp	.+970    	; 0x436 <char_to_code+0xda>
      6c:	d0 c1       	rjmp	.+928    	; 0x40e <char_to_code+0xb2>
      6e:	e3 c1       	rjmp	.+966    	; 0x436 <char_to_code+0xda>
      70:	e2 c1       	rjmp	.+964    	; 0x436 <char_to_code+0xda>
      72:	e1 c1       	rjmp	.+962    	; 0x436 <char_to_code+0xda>
      74:	e0 c1       	rjmp	.+960    	; 0x436 <char_to_code+0xda>
      76:	d0 c1       	rjmp	.+928    	; 0x418 <char_to_code+0xbc>
      78:	de c1       	rjmp	.+956    	; 0x436 <char_to_code+0xda>
      7a:	dd c1       	rjmp	.+954    	; 0x436 <char_to_code+0xda>
      7c:	dc c1       	rjmp	.+952    	; 0x436 <char_to_code+0xda>
      7e:	d1 c1       	rjmp	.+930    	; 0x422 <char_to_code+0xc6>
      80:	da c1       	rjmp	.+948    	; 0x436 <char_to_code+0xda>
      82:	d9 c1       	rjmp	.+946    	; 0x436 <char_to_code+0xda>
      84:	d8 c1       	rjmp	.+944    	; 0x436 <char_to_code+0xda>
      86:	d7 c1       	rjmp	.+942    	; 0x436 <char_to_code+0xda>
      88:	d6 c1       	rjmp	.+940    	; 0x436 <char_to_code+0xda>
      8a:	d5 c1       	rjmp	.+938    	; 0x436 <char_to_code+0xda>
      8c:	d4 c1       	rjmp	.+936    	; 0x436 <char_to_code+0xda>
      8e:	d3 c1       	rjmp	.+934    	; 0x436 <char_to_code+0xda>
      90:	d2 c1       	rjmp	.+932    	; 0x436 <char_to_code+0xda>
      92:	d1 c1       	rjmp	.+930    	; 0x436 <char_to_code+0xda>
      94:	d0 c1       	rjmp	.+928    	; 0x436 <char_to_code+0xda>
      96:	cf c1       	rjmp	.+926    	; 0x436 <char_to_code+0xda>
      98:	ce c1       	rjmp	.+924    	; 0x436 <char_to_code+0xda>
      9a:	cd c1       	rjmp	.+922    	; 0x436 <char_to_code+0xda>
      9c:	cc c1       	rjmp	.+920    	; 0x436 <char_to_code+0xda>
      9e:	cb c1       	rjmp	.+918    	; 0x436 <char_to_code+0xda>
      a0:	ca c1       	rjmp	.+916    	; 0x436 <char_to_code+0xda>
      a2:	c9 c1       	rjmp	.+914    	; 0x436 <char_to_code+0xda>
      a4:	7d c1       	rjmp	.+762    	; 0x3a0 <char_to_code+0x44>

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	10 e0       	ldi	r17, 0x00	; 0
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e8 ea       	ldi	r30, 0xA8	; 168
      ba:	f5 e1       	ldi	r31, 0x15	; 21
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a2 38       	cpi	r26, 0x82	; 130
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>
      c8:	bd d0       	rcall	.+378    	; 0x244 <main>
      ca:	6c ca       	rjmp	.-2856   	; 0xfffff5a4 <__eeprom_end+0xff7ef5a4>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <set_up_ports>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>

//Настройка портов
void set_up_ports(void) {
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
      d6:	87 e3       	ldi	r24, 0x37	; 55
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	27 e3       	ldi	r18, 0x37	; 55
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	2f 63       	ori	r18, 0x3F	; 63
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
      e8:	81 e3       	ldi	r24, 0x31	; 49
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	21 e3       	ldi	r18, 0x31	; 49
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	28 60       	ori	r18, 0x08	; 8
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
      fa:	84 e3       	ldi	r24, 0x34	; 52
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	24 e3       	ldi	r18, 0x34	; 52
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	2f 60       	ori	r18, 0x0F	; 15
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18

  // Перевод PD5,6,7 на чтение для последующей обработки кнопок
  DDRD &= ~((1 << PD5)| (1 << PD6) | (1 << PD7)); 
     10c:	81 e3       	ldi	r24, 0x31	; 49
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	21 e3       	ldi	r18, 0x31	; 49
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	2f 71       	andi	r18, 0x1F	; 31
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     11e:	82 e3       	ldi	r24, 0x32	; 50
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	22 e3       	ldi	r18, 0x32	; 50
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	f9 01       	movw	r30, r18
     128:	20 81       	ld	r18, Z
     12a:	20 6e       	ori	r18, 0xE0	; 224
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18

  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
     130:	84 e3       	ldi	r24, 0x34	; 52
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	24 e3       	ldi	r18, 0x34	; 52
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 63       	ori	r18, 0x30	; 48
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
} 
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	2f 93       	push	r18
     154:	3f 93       	push	r19
     156:	4f 93       	push	r20
     158:	5f 93       	push	r21
     15a:	6f 93       	push	r22
     15c:	7f 93       	push	r23
     15e:	8f 93       	push	r24
     160:	9f 93       	push	r25
     162:	af 93       	push	r26
     164:	bf 93       	push	r27
     166:	ef 93       	push	r30
     168:	ff 93       	push	r31
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
	printDisplay(display);
     172:	8f e6       	ldi	r24, 0x6F	; 111
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	4a d2       	rcall	.+1172   	; 0x60c <printDisplay>
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	ff 91       	pop	r31
     17e:	ef 91       	pop	r30
     180:	bf 91       	pop	r27
     182:	af 91       	pop	r26
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	7f 91       	pop	r23
     18a:	6f 91       	pop	r22
     18c:	5f 91       	pop	r21
     18e:	4f 91       	pop	r20
     190:	3f 91       	pop	r19
     192:	2f 91       	pop	r18
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <handle_buttons>:

void handle_buttons(void) {
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	0f 92       	push	r0
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
  unsigned char button_number = number_key_pressed();
     1a8:	52 d2       	rcall	.+1188   	; 0x64e <number_key_pressed>
     1aa:	89 83       	std	Y+1, r24	; 0x01

  switch (button_number) {
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	71 f0       	breq	.+28     	; 0x1d4 <handle_buttons+0x36>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	a1 f0       	breq	.+40     	; 0x1e6 <handle_buttons+0x48>
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	e1 f4       	brne	.+56     	; 0x1fa <handle_buttons+0x5c>
    case 0:
    strcpy(display, "0000");
     1c2:	8f e6       	ldi	r24, 0x6F	; 111
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	20 e6       	ldi	r18, 0x60	; 96
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	b9 01       	movw	r22, r18
     1cc:	45 e0       	ldi	r20, 0x05	; 5
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	e0 d9       	rcall	.-3136   	; 0xfffff592 <__eeprom_end+0xff7ef592>
    break;
     1d2:	14 c0       	rjmp	.+40     	; 0x1fc <handle_buttons+0x5e>

    case 1:
    strcpy(display, "1111");
     1d4:	8f e6       	ldi	r24, 0x6F	; 111
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	25 e6       	ldi	r18, 0x65	; 101
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	b9 01       	movw	r22, r18
     1de:	45 e0       	ldi	r20, 0x05	; 5
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	d7 d9       	rcall	.-3154   	; 0xfffff592 <__eeprom_end+0xff7ef592>
    break;
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <handle_buttons+0x5e>

    case 2:
    strcpy(display, "2222");
     1e6:	8f e6       	ldi	r24, 0x6F	; 111
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2a e6       	ldi	r18, 0x6A	; 106
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	b9 01       	movw	r22, r18
     1f0:	45 e0       	ldi	r20, 0x05	; 5
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	ce d9       	rcall	.-3172   	; 0xfffff592 <__eeprom_end+0xff7ef592>
    break;
     1f6:	00 00       	nop
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <handle_buttons+0x5e>

    default:
    break;
     1fa:	00 00       	nop
  };
}
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <timer_init>:

//Инициализация таймера
void timer_init() {
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
     20c:	89 e5       	ldi	r24, 0x59	; 89
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	29 e5       	ldi	r18, 0x59	; 89
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	21 60       	ori	r18, 0x01	; 1
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	TCCR0 = (1 << CS02);
     21e:	83 e5       	ldi	r24, 0x53	; 83
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	24 e0       	ldi	r18, 0x04	; 4
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
}
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <init>:

void init() {
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
  cli();
     236:	f8 94       	cli

  set_up_ports();
     238:	4a df       	rcall	.-364    	; 0xce <set_up_ports>
  timer_init();
     23a:	e4 df       	rcall	.-56     	; 0x204 <timer_init>

  sei();
     23c:	78 94       	sei
  // cli();
}
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <main>:

int main(void) {
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	2f 97       	sbiw	r28, 0x0f	; 15
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
  init();
     25c:	e8 df       	rcall	.-48     	; 0x22e <init>
  ds1621_init();
     25e:	2e d2       	rcall	.+1116   	; 0x6bc <ds1621_init>

	while(1) {
    handle_buttons();
     260:	9e df       	rcall	.-196    	; 0x19e <handle_buttons>
    signed char temp = getTemperature();
     262:	b4 d2       	rcall	.+1384   	; 0x7cc <getTemperature>
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	a0 e8       	ldi	r26, 0x80	; 128
     26c:	bf e3       	ldi	r27, 0x3F	; 63
     26e:	8a 83       	std	Y+2, r24	; 0x02
     270:	9b 83       	std	Y+3, r25	; 0x03
     272:	ac 83       	std	Y+4, r26	; 0x04
     274:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     276:	6a 81       	ldd	r22, Y+2	; 0x02
     278:	7b 81       	ldd	r23, Y+3	; 0x03
     27a:	8c 81       	ldd	r24, Y+4	; 0x04
     27c:	9d 81       	ldd	r25, Y+5	; 0x05
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	4a e7       	ldi	r20, 0x7A	; 122
     284:	54 e4       	ldi	r21, 0x44	; 68
     286:	fa d5       	rcall	.+3060   	; 0xe7c <__mulsf3>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	8e 83       	std	Y+6, r24	; 0x06
     28e:	9f 83       	std	Y+7, r25	; 0x07
     290:	a8 87       	std	Y+8, r26	; 0x08
     292:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	6e 81       	ldd	r22, Y+6	; 0x06
     298:	7f 81       	ldd	r23, Y+7	; 0x07
     29a:	88 85       	ldd	r24, Y+8	; 0x08
     29c:	99 85       	ldd	r25, Y+9	; 0x09
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e8       	ldi	r20, 0x80	; 128
     2a4:	5f e3       	ldi	r21, 0x3F	; 63
     2a6:	35 d7       	rcall	.+3690   	; 0x1112 <__ltsf2>
     2a8:	88 23       	and	r24, r24
     2aa:	0c f0       	brlt	.+2      	; 0x2ae <main+0x6a>
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	11 23       	and	r17, r17
     2b0:	29 f0       	breq	.+10     	; 0x2bc <main+0x78>
		__ticks = 1;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	9b 87       	std	Y+11, r25	; 0x0b
     2b8:	8a 87       	std	Y+10, r24	; 0x0a
     2ba:	42 c0       	rjmp	.+132    	; 0x340 <main+0xfc>
	else if (__tmp > 65535)
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	6e 81       	ldd	r22, Y+6	; 0x06
     2c0:	7f 81       	ldd	r23, Y+7	; 0x07
     2c2:	88 85       	ldd	r24, Y+8	; 0x08
     2c4:	99 85       	ldd	r25, Y+9	; 0x09
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	3f ef       	ldi	r19, 0xFF	; 255
     2ca:	4f e7       	ldi	r20, 0x7F	; 127
     2cc:	57 e4       	ldi	r21, 0x47	; 71
     2ce:	cb d6       	rcall	.+3478   	; 0x1066 <__gtsf2>
     2d0:	18 16       	cp	r1, r24
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <main+0x92>
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	11 23       	and	r17, r17
     2d8:	51 f1       	breq	.+84     	; 0x32e <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2da:	6a 81       	ldd	r22, Y+2	; 0x02
     2dc:	7b 81       	ldd	r23, Y+3	; 0x03
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	9d 81       	ldd	r25, Y+5	; 0x05
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e2       	ldi	r20, 0x20	; 32
     2e8:	51 e4       	ldi	r21, 0x41	; 65
     2ea:	c8 d5       	rcall	.+2960   	; 0xe7c <__mulsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	bc 01       	movw	r22, r24
     2f2:	cd 01       	movw	r24, r26
     2f4:	01 d4       	rcall	.+2050   	; 0xaf8 <__fixunssfsi>
     2f6:	dc 01       	movw	r26, r24
     2f8:	cb 01       	movw	r24, r22
     2fa:	9b 87       	std	Y+11, r25	; 0x0b
     2fc:	8a 87       	std	Y+10, r24	; 0x0a
     2fe:	12 c0       	rjmp	.+36     	; 0x324 <main+0xe0>
     300:	84 e6       	ldi	r24, 0x64	; 100
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	9d 87       	std	Y+13, r25	; 0x0d
     306:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     308:	8c 85       	ldd	r24, Y+12	; 0x0c
     30a:	9d 85       	ldd	r25, Y+13	; 0x0d
     30c:	8c 01       	movw	r16, r24
     30e:	c8 01       	movw	r24, r16
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <main+0xcc>
     314:	8c 01       	movw	r16, r24
     316:	1d 87       	std	Y+13, r17	; 0x0d
     318:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     31a:	8a 85       	ldd	r24, Y+10	; 0x0a
     31c:	9b 85       	ldd	r25, Y+11	; 0x0b
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	9b 87       	std	Y+11, r25	; 0x0b
     322:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     324:	8a 85       	ldd	r24, Y+10	; 0x0a
     326:	9b 85       	ldd	r25, Y+11	; 0x0b
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	51 f7       	brne	.-44     	; 0x300 <main+0xbc>
		_delay_ms(1);
	}
     32c:	99 cf       	rjmp	.-206    	; 0x260 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     32e:	6e 81       	ldd	r22, Y+6	; 0x06
     330:	7f 81       	ldd	r23, Y+7	; 0x07
     332:	88 85       	ldd	r24, Y+8	; 0x08
     334:	99 85       	ldd	r25, Y+9	; 0x09
     336:	e0 d3       	rcall	.+1984   	; 0xaf8 <__fixunssfsi>
     338:	dc 01       	movw	r26, r24
     33a:	cb 01       	movw	r24, r22
     33c:	9b 87       	std	Y+11, r25	; 0x0b
     33e:	8a 87       	std	Y+10, r24	; 0x0a
     340:	8a 85       	ldd	r24, Y+10	; 0x0a
     342:	9b 85       	ldd	r25, Y+11	; 0x0b
     344:	9f 87       	std	Y+15, r25	; 0x0f
     346:	8e 87       	std	Y+14, r24	; 0x0e
     348:	8e 85       	ldd	r24, Y+14	; 0x0e
     34a:	9f 85       	ldd	r25, Y+15	; 0x0f
     34c:	8c 01       	movw	r16, r24
     34e:	c8 01       	movw	r24, r16
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <main+0x10c>
     354:	8c 01       	movw	r16, r24
     356:	1f 87       	std	Y+15, r17	; 0x0f
     358:	0e 87       	std	Y+14, r16	; 0x0e
     35a:	82 cf       	rjmp	.-252    	; 0x260 <main+0x1c>

0000035c <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	00 d0       	rcall	.+0      	; 0x362 <char_to_code+0x6>
     362:	0f 92       	push	r0
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int code;
    switch (symbol) {
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	aa 27       	eor	r26, r26
     372:	97 fd       	sbrc	r25, 7
     374:	a0 95       	com	r26
     376:	ba 2f       	mov	r27, r26
     378:	40 e2       	ldi	r20, 0x20	; 32
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	2f e3       	ldi	r18, 0x3F	; 63
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	84 1b       	sub	r24, r20
     382:	95 0b       	sbc	r25, r21
     384:	28 17       	cp	r18, r24
     386:	39 07       	cpc	r19, r25
     388:	08 f4       	brcc	.+2      	; 0x38c <char_to_code+0x30>
     38a:	55 c0       	rjmp	.+170    	; 0x436 <char_to_code+0xda>
     38c:	8d 5e       	subi	r24, 0xED	; 237
     38e:	9f 4f       	sbci	r25, 0xFF	; 255
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	08 95       	ret
        case '-':
            code = 0b10111111;
     396:	8f eb       	ldi	r24, 0xBF	; 191
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	9a 83       	std	Y+2, r25	; 0x02
     39c:	89 83       	std	Y+1, r24	; 0x01
            break;
     39e:	4f c0       	rjmp	.+158    	; 0x43e <char_to_code+0xe2>
        case '_':
            code = 0b11110111;
     3a0:	87 ef       	ldi	r24, 0xF7	; 247
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
            break;
     3a8:	4a c0       	rjmp	.+148    	; 0x43e <char_to_code+0xe2>
        case '0':
            code = 0b11000000;
     3aa:	80 ec       	ldi	r24, 0xC0	; 192
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	9a 83       	std	Y+2, r25	; 0x02
     3b0:	89 83       	std	Y+1, r24	; 0x01
            break;
     3b2:	45 c0       	rjmp	.+138    	; 0x43e <char_to_code+0xe2>
        case '1':
            code = 0b11111001;
     3b4:	89 ef       	ldi	r24, 0xF9	; 249
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 83       	std	Y+1, r24	; 0x01
            break;
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <char_to_code+0xe2>
        case '2':
            code = 0b10100100;
     3be:	84 ea       	ldi	r24, 0xA4	; 164
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
            break;
     3c6:	3b c0       	rjmp	.+118    	; 0x43e <char_to_code+0xe2>
        case '3':
            code = 0b10110000;
     3c8:	80 eb       	ldi	r24, 0xB0	; 176
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	9a 83       	std	Y+2, r25	; 0x02
     3ce:	89 83       	std	Y+1, r24	; 0x01
            break;
     3d0:	36 c0       	rjmp	.+108    	; 0x43e <char_to_code+0xe2>
        case '4':
            code = 0b10011001;
     3d2:	89 e9       	ldi	r24, 0x99	; 153
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	9a 83       	std	Y+2, r25	; 0x02
     3d8:	89 83       	std	Y+1, r24	; 0x01
            break;
     3da:	31 c0       	rjmp	.+98     	; 0x43e <char_to_code+0xe2>
        case '5':
            code = 0b10010010;
     3dc:	82 e9       	ldi	r24, 0x92	; 146
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
            break;
     3e4:	2c c0       	rjmp	.+88     	; 0x43e <char_to_code+0xe2>
        case '6':
            code = 0b10000010;
     3e6:	82 e8       	ldi	r24, 0x82	; 130
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
            break;
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <char_to_code+0xe2>
        case '7':
            code = 0b11111000;
     3f0:	88 ef       	ldi	r24, 0xF8	; 248
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
            break;
     3f8:	22 c0       	rjmp	.+68     	; 0x43e <char_to_code+0xe2>
        case '8':
            code = 0b10000000;
     3fa:	80 e8       	ldi	r24, 0x80	; 128
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
            break;
     402:	1d c0       	rjmp	.+58     	; 0x43e <char_to_code+0xe2>
        case '9':
            code = 0b10010000;
     404:	80 e9       	ldi	r24, 0x90	; 144
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	9a 83       	std	Y+2, r25	; 0x02
     40a:	89 83       	std	Y+1, r24	; 0x01
            break;
     40c:	18 c0       	rjmp	.+48     	; 0x43e <char_to_code+0xe2>
        case 'C':
            code = 0b11000110;
     40e:	86 ec       	ldi	r24, 0xC6	; 198
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	9a 83       	std	Y+2, r25	; 0x02
     414:	89 83       	std	Y+1, r24	; 0x01
            break;
     416:	13 c0       	rjmp	.+38     	; 0x43e <char_to_code+0xe2>
        case 'H':
            code = 0b10001001;
     418:	89 e8       	ldi	r24, 0x89	; 137
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
            break;
     420:	0e c0       	rjmp	.+28     	; 0x43e <char_to_code+0xe2>
        case 'L':
            code = 0b11000111;
     422:	87 ec       	ldi	r24, 0xC7	; 199
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	9a 83       	std	Y+2, r25	; 0x02
     428:	89 83       	std	Y+1, r24	; 0x01
            break;
     42a:	09 c0       	rjmp	.+18     	; 0x43e <char_to_code+0xe2>
        case ' ':
            code = 0b11111111;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	9a 83       	std	Y+2, r25	; 0x02
     432:	89 83       	std	Y+1, r24	; 0x01
            break;
     434:	04 c0       	rjmp	.+8      	; 0x43e <char_to_code+0xe2>
        default:
            code = 0xff;
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	89 83       	std	Y+1, r24	; 0x01
    };
    return code;
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
}
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	df 93       	push	r29
     454:	cf 93       	push	r28
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	63 97       	sbiw	r28, 0x13	; 19
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	9a 8b       	std	Y+18, r25	; 0x12
     468:	89 8b       	std	Y+17, r24	; 0x11
     46a:	6b 8b       	std	Y+19, r22	; 0x13
    unsigned int displayDigit = char_to_code(digit);
     46c:	8b 89       	ldd	r24, Y+19	; 0x13
     46e:	76 df       	rcall	.-276    	; 0x35c <char_to_code>
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	89 83       	std	Y+1, r24	; 0x01
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     474:	88 e3       	ldi	r24, 0x38	; 56
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	28 e3       	ldi	r18, 0x38	; 56
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	2f 63       	ori	r18, 0x3F	; 63
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
    PORTD |= (1<<PD3);// clr data pin
     486:	82 e3       	ldi	r24, 0x32	; 50
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	22 e3       	ldi	r18, 0x32	; 50
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	f9 01       	movw	r30, r18
     490:	20 81       	ld	r18, Z
     492:	28 60       	ori	r18, 0x08	; 8
     494:	fc 01       	movw	r30, r24
     496:	20 83       	st	Z, r18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     498:	85 e3       	ldi	r24, 0x35	; 53
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	25 e3       	ldi	r18, 0x35	; 53
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	f9 01       	movw	r30, r18
     4a2:	20 81       	ld	r18, Z
     4a4:	20 7f       	andi	r18, 0xF0	; 240
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
    PORTC |= (1 << number); // set addr
     4aa:	85 e3       	ldi	r24, 0x35	; 53
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	25 e3       	ldi	r18, 0x35	; 53
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	62 2f       	mov	r22, r18
     4b8:	49 89       	ldd	r20, Y+17	; 0x11
     4ba:	5a 89       	ldd	r21, Y+18	; 0x12
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__stack+0x67>
     4c2:	22 0f       	add	r18, r18
     4c4:	33 1f       	adc	r19, r19
     4c6:	4a 95       	dec	r20
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__stack+0x63>
     4ca:	26 2b       	or	r18, r22
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
    
    PORTB = displayDigit; // set data1
     4d0:	88 e3       	ldi	r24, 0x38	; 56
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	29 81       	ldd	r18, Y+1	; 0x01
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     4da:	82 e3       	ldi	r24, 0x32	; 50
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	22 e3       	ldi	r18, 0x32	; 50
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	40 81       	ld	r20, Z
     4e6:	29 81       	ldd	r18, Y+1	; 0x01
     4e8:	3a 81       	ldd	r19, Y+2	; 0x02
     4ea:	36 95       	lsr	r19
     4ec:	27 95       	ror	r18
     4ee:	36 95       	lsr	r19
     4f0:	27 95       	ror	r18
     4f2:	36 95       	lsr	r19
     4f4:	27 95       	ror	r18
     4f6:	20 95       	com	r18
     4f8:	28 70       	andi	r18, 0x08	; 8
     4fa:	20 95       	com	r18
     4fc:	24 23       	and	r18, r20
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	a0 e8       	ldi	r26, 0x80	; 128
     508:	bf e3       	ldi	r27, 0x3F	; 63
     50a:	8b 83       	std	Y+3, r24	; 0x03
     50c:	9c 83       	std	Y+4, r25	; 0x04
     50e:	ad 83       	std	Y+5, r26	; 0x05
     510:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     512:	6b 81       	ldd	r22, Y+3	; 0x03
     514:	7c 81       	ldd	r23, Y+4	; 0x04
     516:	8d 81       	ldd	r24, Y+5	; 0x05
     518:	9e 81       	ldd	r25, Y+6	; 0x06
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	4a e7       	ldi	r20, 0x7A	; 122
     520:	54 e4       	ldi	r21, 0x44	; 68
     522:	ac d4       	rcall	.+2392   	; 0xe7c <__mulsf3>
     524:	dc 01       	movw	r26, r24
     526:	cb 01       	movw	r24, r22
     528:	8f 83       	std	Y+7, r24	; 0x07
     52a:	98 87       	std	Y+8, r25	; 0x08
     52c:	a9 87       	std	Y+9, r26	; 0x09
     52e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     530:	11 e0       	ldi	r17, 0x01	; 1
     532:	6f 81       	ldd	r22, Y+7	; 0x07
     534:	78 85       	ldd	r23, Y+8	; 0x08
     536:	89 85       	ldd	r24, Y+9	; 0x09
     538:	9a 85       	ldd	r25, Y+10	; 0x0a
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e8       	ldi	r20, 0x80	; 128
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	e7 d5       	rcall	.+3022   	; 0x1112 <__ltsf2>
     544:	88 23       	and	r24, r24
     546:	0c f0       	brlt	.+2      	; 0x54a <__stack+0xeb>
     548:	10 e0       	ldi	r17, 0x00	; 0
     54a:	11 23       	and	r17, r17
     54c:	29 f0       	breq	.+10     	; 0x558 <__stack+0xf9>
		__ticks = 1;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9c 87       	std	Y+12, r25	; 0x0c
     554:	8b 87       	std	Y+11, r24	; 0x0b
     556:	42 c0       	rjmp	.+132    	; 0x5dc <__stack+0x17d>
	else if (__tmp > 65535)
     558:	11 e0       	ldi	r17, 0x01	; 1
     55a:	6f 81       	ldd	r22, Y+7	; 0x07
     55c:	78 85       	ldd	r23, Y+8	; 0x08
     55e:	89 85       	ldd	r24, Y+9	; 0x09
     560:	9a 85       	ldd	r25, Y+10	; 0x0a
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	3f ef       	ldi	r19, 0xFF	; 255
     566:	4f e7       	ldi	r20, 0x7F	; 127
     568:	57 e4       	ldi	r21, 0x47	; 71
     56a:	7d d5       	rcall	.+2810   	; 0x1066 <__gtsf2>
     56c:	18 16       	cp	r1, r24
     56e:	0c f0       	brlt	.+2      	; 0x572 <__stack+0x113>
     570:	10 e0       	ldi	r17, 0x00	; 0
     572:	11 23       	and	r17, r17
     574:	51 f1       	breq	.+84     	; 0x5ca <__stack+0x16b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     576:	6b 81       	ldd	r22, Y+3	; 0x03
     578:	7c 81       	ldd	r23, Y+4	; 0x04
     57a:	8d 81       	ldd	r24, Y+5	; 0x05
     57c:	9e 81       	ldd	r25, Y+6	; 0x06
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e2       	ldi	r20, 0x20	; 32
     584:	51 e4       	ldi	r21, 0x41	; 65
     586:	7a d4       	rcall	.+2292   	; 0xe7c <__mulsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	bc 01       	movw	r22, r24
     58e:	cd 01       	movw	r24, r26
     590:	b3 d2       	rcall	.+1382   	; 0xaf8 <__fixunssfsi>
     592:	dc 01       	movw	r26, r24
     594:	cb 01       	movw	r24, r22
     596:	9c 87       	std	Y+12, r25	; 0x0c
     598:	8b 87       	std	Y+11, r24	; 0x0b
     59a:	12 c0       	rjmp	.+36     	; 0x5c0 <__stack+0x161>
     59c:	84 e6       	ldi	r24, 0x64	; 100
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9e 87       	std	Y+14, r25	; 0x0e
     5a2:	8d 87       	std	Y+13, r24	; 0x0d
     5a4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a8:	8c 01       	movw	r16, r24
     5aa:	c8 01       	movw	r24, r16
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <__stack+0x14d>
     5b0:	8c 01       	movw	r16, r24
     5b2:	1e 87       	std	Y+14, r17	; 0x0e
     5b4:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	9c 87       	std	Y+12, r25	; 0x0c
     5be:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5c4:	00 97       	sbiw	r24, 0x00	; 0
     5c6:	51 f7       	brne	.-44     	; 0x59c <__stack+0x13d>
     5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <__stack+0x197>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ca:	6f 81       	ldd	r22, Y+7	; 0x07
     5cc:	78 85       	ldd	r23, Y+8	; 0x08
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5d2:	92 d2       	rcall	.+1316   	; 0xaf8 <__fixunssfsi>
     5d4:	dc 01       	movw	r26, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	9c 87       	std	Y+12, r25	; 0x0c
     5da:	8b 87       	std	Y+11, r24	; 0x0b
     5dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     5de:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e0:	98 8b       	std	Y+16, r25	; 0x10
     5e2:	8f 87       	std	Y+15, r24	; 0x0f
     5e4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e6:	98 89       	ldd	r25, Y+16	; 0x10
     5e8:	8c 01       	movw	r16, r24
     5ea:	f8 01       	movw	r30, r16
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <__stack+0x18d>
     5f0:	8f 01       	movw	r16, r30
     5f2:	18 8b       	std	Y+16, r17	; 0x10
     5f4:	0f 87       	std	Y+15, r16	; 0x0f
    _delay_ms(1);
}
     5f6:	63 96       	adiw	r28, 0x13	; 19
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	08 95       	ret

0000060c <printDisplay>:

void printDisplay() {
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	00 d0       	rcall	.+0      	; 0x612 <printDisplay+0x6>
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
    for (short int i = 0; i < 4; ++i) {
     616:	1a 82       	std	Y+2, r1	; 0x02
     618:	19 82       	std	Y+1, r1	; 0x01
     61a:	0f c0       	rjmp	.+30     	; 0x63a <printDisplay+0x2e>
        send_digit_to_display(i, display[i]);
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	29 81       	ldd	r18, Y+1	; 0x01
     622:	3a 81       	ldd	r19, Y+2	; 0x02
     624:	21 59       	subi	r18, 0x91	; 145
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	62 2f       	mov	r22, r18
     62e:	0f df       	rcall	.-482    	; 0x44e <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
     630:	89 81       	ldd	r24, Y+1	; 0x01
     632:	9a 81       	ldd	r25, Y+2	; 0x02
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	84 30       	cpi	r24, 0x04	; 4
     640:	91 05       	cpc	r25, r1
     642:	64 f3       	brlt	.-40     	; 0x61c <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	cf 91       	pop	r28
     64a:	df 91       	pop	r29
     64c:	08 95       	ret

0000064e <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	00 d0       	rcall	.+0      	; 0x654 <number_key_pressed+0x6>
     654:	0f 92       	push	r0
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
  unsigned char isButton2 = ((PIND >> (8 - 1)) & 1);
     65a:	80 e3       	ldi	r24, 0x30	; 48
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	88 1f       	adc	r24, r24
     664:	88 27       	eor	r24, r24
     666:	88 1f       	adc	r24, r24
     668:	89 83       	std	Y+1, r24	; 0x01
  unsigned char isButton1 = ((PIND >> (7 - 1)) & 1);
     66a:	80 e3       	ldi	r24, 0x30	; 48
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	82 95       	swap	r24
     674:	86 95       	lsr	r24
     676:	86 95       	lsr	r24
     678:	83 70       	andi	r24, 0x03	; 3
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char isButton0 = ((PIND >> (6 - 1)) & 1);
     67e:	80 e3       	ldi	r24, 0x30	; 48
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	fc 01       	movw	r30, r24
     684:	80 81       	ld	r24, Z
     686:	82 95       	swap	r24
     688:	86 95       	lsr	r24
     68a:	87 70       	andi	r24, 0x07	; 7
     68c:	81 70       	andi	r24, 0x01	; 1
     68e:	8b 83       	std	Y+3, r24	; 0x03

  if (!isButton0) {
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	88 23       	and	r24, r24
     694:	11 f4       	brne	.+4      	; 0x69a <number_key_pressed+0x4c>
    return 0;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0b c0       	rjmp	.+22     	; 0x6b0 <number_key_pressed+0x62>
  }

  if (!isButton1) {
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	88 23       	and	r24, r24
     69e:	11 f4       	brne	.+4      	; 0x6a4 <number_key_pressed+0x56>
    return 1;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <number_key_pressed+0x62>
  }

  if (!isButton2) {
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	88 23       	and	r24, r24
     6a8:	11 f4       	brne	.+4      	; 0x6ae <number_key_pressed+0x60>
    return 2;
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <number_key_pressed+0x62>
  }
  return 42;
     6ae:	8a e2       	ldi	r24, 0x2A	; 42
}
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <ds1621_init>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_init()
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	0f 92       	push	r0
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     6c6:	17 d1       	rcall	.+558    	; 0x8f6 <i2c_start>
     6c8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	81 30       	cpi	r24, 0x01	; 1
     6ce:	11 f4       	brne	.+4      	; 0x6d4 <ds1621_init+0x18>
   {
   	 i2c_stop();
     6d0:	07 d2       	rcall	.+1038   	; 0xae0 <i2c_stop>
  	 return;
     6d2:	19 c0       	rjmp	.+50     	; 0x706 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     6d4:	80 e9       	ldi	r24, 0x90	; 144
     6d6:	51 d1       	rcall	.+674    	; 0x97a <i2c_sendAddress>
     6d8:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	11 f4       	brne	.+4      	; 0x6e4 <ds1621_init+0x28>
   {
  	 i2c_stop();
     6e0:	ff d1       	rcall	.+1022   	; 0xae0 <i2c_stop>
  	 return;
     6e2:	11 c0       	rjmp	.+34     	; 0x706 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
     6e4:	8c ea       	ldi	r24, 0xAC	; 172
     6e6:	83 d1       	rcall	.+774    	; 0x9ee <i2c_sendData>
     6e8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	81 30       	cpi	r24, 0x01	; 1
     6ee:	11 f4       	brne	.+4      	; 0x6f4 <ds1621_init+0x38>
   {
  	 i2c_stop();
     6f0:	f7 d1       	rcall	.+1006   	; 0xae0 <i2c_stop>
  	 return;
     6f2:	09 c0       	rjmp	.+18     	; 0x706 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	7b d1       	rcall	.+758    	; 0x9ee <i2c_sendData>
     6f8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	11 f4       	brne	.+4      	; 0x704 <ds1621_init+0x48>
   {
  	 i2c_stop();
     700:	ef d1       	rcall	.+990    	; 0xae0 <i2c_stop>
	 return;
     702:	01 c0       	rjmp	.+2      	; 0x706 <ds1621_init+0x4a>
   } 

   i2c_stop();
     704:	ed d1       	rcall	.+986    	; 0xae0 <i2c_stop>
}
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
     70e:	df 93       	push	r29
     710:	cf 93       	push	r28
     712:	00 d0       	rcall	.+0      	; 0x714 <ds1621_sendCommand+0x6>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     71a:	ed d0       	rcall	.+474    	; 0x8f6 <i2c_start>
     71c:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	11 f4       	brne	.+4      	; 0x728 <ds1621_sendCommand+0x1a>
   {
   	 i2c_stop();
     724:	dd d1       	rcall	.+954    	; 0xae0 <i2c_stop>
	 return;
     726:	11 c0       	rjmp	.+34     	; 0x74a <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     728:	80 e9       	ldi	r24, 0x90	; 144
     72a:	27 d1       	rcall	.+590    	; 0x97a <i2c_sendAddress>
     72c:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	11 f4       	brne	.+4      	; 0x738 <ds1621_sendCommand+0x2a>
   {
	 i2c_stop();
     734:	d5 d1       	rcall	.+938    	; 0xae0 <i2c_stop>
	 return;
     736:	09 c0       	rjmp	.+18     	; 0x74a <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendData(command);
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	59 d1       	rcall	.+690    	; 0x9ee <i2c_sendData>
     73c:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	11 f4       	brne	.+4      	; 0x748 <ds1621_sendCommand+0x3a>
   {
	 i2c_stop();
     744:	cd d1       	rcall	.+922    	; 0xae0 <i2c_stop>
	 return;
     746:	01 c0       	rjmp	.+2      	; 0x74a <ds1621_sendCommand+0x3c>
   } 

   i2c_stop();
     748:	cb d1       	rcall	.+918    	; 0xae0 <i2c_stop>
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	cf 91       	pop	r28
     750:	df 91       	pop	r29
     752:	08 95       	ret

00000754 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
     754:	df 93       	push	r29
     756:	cf 93       	push	r28
     758:	00 d0       	rcall	.+0      	; 0x75a <ds1621_readValue+0x6>
     75a:	0f 92       	push	r0
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	8b 83       	std	Y+3, r24	; 0x03
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     762:	c9 d0       	rcall	.+402    	; 0x8f6 <i2c_start>
     764:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	19 f4       	brne	.+6      	; 0x772 <ds1621_readValue+0x1e>
   {
   	 i2c_stop();
     76c:	b9 d1       	rcall	.+882    	; 0xae0 <i2c_stop>
	 return (0);
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	27 c0       	rjmp	.+78     	; 0x7c0 <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     772:	80 e9       	ldi	r24, 0x90	; 144
     774:	02 d1       	rcall	.+516    	; 0x97a <i2c_sendAddress>
     776:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	19 f4       	brne	.+6      	; 0x784 <ds1621_readValue+0x30>
   {
	 i2c_stop();
     77e:	b0 d1       	rcall	.+864    	; 0xae0 <i2c_stop>
	 return (0);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	1e c0       	rjmp	.+60     	; 0x7c0 <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendData(value);
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	33 d1       	rcall	.+614    	; 0x9ee <i2c_sendData>
     788:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     78a:	89 81       	ldd	r24, Y+1	; 0x01
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	19 f4       	brne	.+6      	; 0x796 <ds1621_readValue+0x42>
   {
	 i2c_stop();
     790:	a7 d1       	rcall	.+846    	; 0xae0 <i2c_stop>
	 return (0);
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	15 c0       	rjmp	.+42     	; 0x7c0 <ds1621_readValue+0x6c>
   } 

    errorStatus = i2c_repeatStart();
     796:	d0 d0       	rcall	.+416    	; 0x938 <i2c_repeatStart>
     798:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	19 f4       	brne	.+6      	; 0x7a6 <ds1621_readValue+0x52>
   {
   	 i2c_stop();
     7a0:	9f d1       	rcall	.+830    	; 0xae0 <i2c_stop>
	 return (0);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	0d c0       	rjmp	.+26     	; 0x7c0 <ds1621_readValue+0x6c>
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
     7a6:	81 e9       	ldi	r24, 0x91	; 145
     7a8:	e8 d0       	rcall	.+464    	; 0x97a <i2c_sendAddress>
     7aa:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	81 30       	cpi	r24, 0x01	; 1
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <ds1621_readValue+0x64>
   {
	 i2c_stop();
     7b2:	96 d1       	rcall	.+812    	; 0xae0 <i2c_stop>
	 return (0);
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	04 c0       	rjmp	.+8      	; 0x7c0 <ds1621_readValue+0x6c>
   } 
 
   data = i2c_receiveData_NACK(); 
     7b8:	6b d1       	rcall	.+726    	; 0xa90 <i2c_receiveData_NACK>
     7ba:	8a 83       	std	Y+2, r24	; 0x02
   
   i2c_stop();
     7bc:	91 d1       	rcall	.+802    	; 0xae0 <i2c_stop>
   
   return (data);
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
}	  
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <getTemperature>:

//******************************************************************
//Function to read 
//******************************************************************    
signed char getTemperature(void)
{ 
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	2e 97       	sbiw	r28, 0x0e	; 14
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
  ds1621_sendCommand ( START_CONVERT );
     7e4:	8e ee       	ldi	r24, 0xEE	; 238
     7e6:	93 df       	rcall	.-218    	; 0x70e <ds1621_sendCommand>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	aa e7       	ldi	r26, 0x7A	; 122
     7ee:	b4 e4       	ldi	r27, 0x44	; 68
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	ab 83       	std	Y+3, r26	; 0x03
     7f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7f8:	69 81       	ldd	r22, Y+1	; 0x01
     7fa:	7a 81       	ldd	r23, Y+2	; 0x02
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	4a e7       	ldi	r20, 0x7A	; 122
     806:	54 e4       	ldi	r21, 0x44	; 68
     808:	39 d3       	rcall	.+1650   	; 0xe7c <__mulsf3>
     80a:	dc 01       	movw	r26, r24
     80c:	cb 01       	movw	r24, r22
     80e:	8d 83       	std	Y+5, r24	; 0x05
     810:	9e 83       	std	Y+6, r25	; 0x06
     812:	af 83       	std	Y+7, r26	; 0x07
     814:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     816:	11 e0       	ldi	r17, 0x01	; 1
     818:	6d 81       	ldd	r22, Y+5	; 0x05
     81a:	7e 81       	ldd	r23, Y+6	; 0x06
     81c:	8f 81       	ldd	r24, Y+7	; 0x07
     81e:	98 85       	ldd	r25, Y+8	; 0x08
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e8       	ldi	r20, 0x80	; 128
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	74 d4       	rcall	.+2280   	; 0x1112 <__ltsf2>
     82a:	88 23       	and	r24, r24
     82c:	0c f0       	brlt	.+2      	; 0x830 <getTemperature+0x64>
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	11 23       	and	r17, r17
     832:	29 f0       	breq	.+10     	; 0x83e <getTemperature+0x72>
		__ticks = 1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9a 87       	std	Y+10, r25	; 0x0a
     83a:	89 87       	std	Y+9, r24	; 0x09
     83c:	42 c0       	rjmp	.+132    	; 0x8c2 <getTemperature+0xf6>
	else if (__tmp > 65535)
     83e:	11 e0       	ldi	r17, 0x01	; 1
     840:	6d 81       	ldd	r22, Y+5	; 0x05
     842:	7e 81       	ldd	r23, Y+6	; 0x06
     844:	8f 81       	ldd	r24, Y+7	; 0x07
     846:	98 85       	ldd	r25, Y+8	; 0x08
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	4f e7       	ldi	r20, 0x7F	; 127
     84e:	57 e4       	ldi	r21, 0x47	; 71
     850:	0a d4       	rcall	.+2068   	; 0x1066 <__gtsf2>
     852:	18 16       	cp	r1, r24
     854:	0c f0       	brlt	.+2      	; 0x858 <getTemperature+0x8c>
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	11 23       	and	r17, r17
     85a:	51 f1       	breq	.+84     	; 0x8b0 <getTemperature+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     85c:	69 81       	ldd	r22, Y+1	; 0x01
     85e:	7a 81       	ldd	r23, Y+2	; 0x02
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e2       	ldi	r20, 0x20	; 32
     86a:	51 e4       	ldi	r21, 0x41	; 65
     86c:	07 d3       	rcall	.+1550   	; 0xe7c <__mulsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	bc 01       	movw	r22, r24
     874:	cd 01       	movw	r24, r26
     876:	40 d1       	rcall	.+640    	; 0xaf8 <__fixunssfsi>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	9a 87       	std	Y+10, r25	; 0x0a
     87e:	89 87       	std	Y+9, r24	; 0x09
     880:	12 c0       	rjmp	.+36     	; 0x8a6 <getTemperature+0xda>
     882:	84 e6       	ldi	r24, 0x64	; 100
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	9c 87       	std	Y+12, r25	; 0x0c
     888:	8b 87       	std	Y+11, r24	; 0x0b
     88a:	8b 85       	ldd	r24, Y+11	; 0x0b
     88c:	9c 85       	ldd	r25, Y+12	; 0x0c
     88e:	8c 01       	movw	r16, r24
     890:	c8 01       	movw	r24, r16
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	f1 f7       	brne	.-4      	; 0x892 <getTemperature+0xc6>
     896:	8c 01       	movw	r16, r24
     898:	1c 87       	std	Y+12, r17	; 0x0c
     89a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89c:	89 85       	ldd	r24, Y+9	; 0x09
     89e:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a0:	01 97       	sbiw	r24, 0x01	; 1
     8a2:	9a 87       	std	Y+10, r25	; 0x0a
     8a4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a6:	89 85       	ldd	r24, Y+9	; 0x09
     8a8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	51 f7       	brne	.-44     	; 0x882 <getTemperature+0xb6>
     8ae:	16 c0       	rjmp	.+44     	; 0x8dc <getTemperature+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8b0:	6d 81       	ldd	r22, Y+5	; 0x05
     8b2:	7e 81       	ldd	r23, Y+6	; 0x06
     8b4:	8f 81       	ldd	r24, Y+7	; 0x07
     8b6:	98 85       	ldd	r25, Y+8	; 0x08
     8b8:	1f d1       	rcall	.+574    	; 0xaf8 <__fixunssfsi>
     8ba:	dc 01       	movw	r26, r24
     8bc:	cb 01       	movw	r24, r22
     8be:	9a 87       	std	Y+10, r25	; 0x0a
     8c0:	89 87       	std	Y+9, r24	; 0x09
     8c2:	89 85       	ldd	r24, Y+9	; 0x09
     8c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8c6:	9e 87       	std	Y+14, r25	; 0x0e
     8c8:	8d 87       	std	Y+13, r24	; 0x0d
     8ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     8cc:	9e 85       	ldd	r25, Y+14	; 0x0e
     8ce:	8c 01       	movw	r16, r24
     8d0:	c8 01       	movw	r24, r16
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <getTemperature+0x106>
     8d6:	8c 01       	movw	r16, r24
     8d8:	1e 87       	std	Y+14, r17	; 0x0e
     8da:	0d 87       	std	Y+13, r16	; 0x0d
  
  _delay_ms(1000);
  
  return ds1621_readValue ( READ_TEMP );
     8dc:	8a ea       	ldi	r24, 0xAA	; 170
     8de:	3a df       	rcall	.-396    	; 0x754 <ds1621_readValue>
     8e0:	2e 96       	adiw	r28, 0x0e	; 14
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	08 95       	ret

000008f6 <i2c_start>:
#include <avr/io.h>
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
     8f6:	df 93       	push	r29
     8f8:	cf 93       	push	r28
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     8fe:	86 e5       	ldi	r24, 0x56	; 86
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	24 ea       	ldi	r18, 0xA4	; 164
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     908:	00 00       	nop
     90a:	86 e5       	ldi	r24, 0x56	; 86
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	80 81       	ld	r24, Z
     912:	88 23       	and	r24, r24
     914:	d4 f7       	brge	.-12     	; 0x90a <i2c_start+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
     916:	81 e2       	ldi	r24, 0x21	; 33
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	88 7f       	andi	r24, 0xF8	; 248
     924:	90 70       	andi	r25, 0x00	; 0
     926:	88 30       	cpi	r24, 0x08	; 8
     928:	91 05       	cpc	r25, r1
     92a:	11 f4       	brne	.+4      	; 0x930 <i2c_start+0x3a>
    return (0);
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	01 c0       	rjmp	.+2      	; 0x932 <i2c_start+0x3c>
  else
    return (1);
     930:	81 e0       	ldi	r24, 0x01	; 1
}
     932:	cf 91       	pop	r28
     934:	df 91       	pop	r29
     936:	08 95       	ret

00000938 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
     938:	df 93       	push	r29
     93a:	cf 93       	push	r28
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     940:	86 e5       	ldi	r24, 0x56	; 86
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	24 ea       	ldi	r18, 0xA4	; 164
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
  while (!(TWCR & (1 << TWINT)))
     94a:	00 00       	nop
     94c:	86 e5       	ldi	r24, 0x56	; 86
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	88 23       	and	r24, r24
     956:	d4 f7       	brge	.-12     	; 0x94c <i2c_repeatStart+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
     958:	81 e2       	ldi	r24, 0x21	; 33
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fc 01       	movw	r30, r24
     95e:	80 81       	ld	r24, Z
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	88 7f       	andi	r24, 0xF8	; 248
     966:	90 70       	andi	r25, 0x00	; 0
     968:	80 31       	cpi	r24, 0x10	; 16
     96a:	91 05       	cpc	r25, r1
     96c:	11 f4       	brne	.+4      	; 0x972 <i2c_repeatStart+0x3a>
    return (0);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	01 c0       	rjmp	.+2      	; 0x974 <i2c_repeatStart+0x3c>
  else
    return (1);
     972:	81 e0       	ldi	r24, 0x01	; 1
}
     974:	cf 91       	pop	r28
     976:	df 91       	pop	r29
     978:	08 95       	ret

0000097a <i2c_sendAddress>:
//**************************************************
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	00 d0       	rcall	.+0      	; 0x980 <i2c_sendAddress+0x6>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	81 70       	andi	r24, 0x01	; 1
     98e:	90 70       	andi	r25, 0x00	; 0
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	19 f4       	brne	.+6      	; 0x99a <i2c_sendAddress+0x20>
    STATUS = MT_SLA_ACK;
     994:	88 e1       	ldi	r24, 0x18	; 24
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	02 c0       	rjmp	.+4      	; 0x99e <i2c_sendAddress+0x24>
  else
    STATUS = MR_SLA_ACK;
     99a:	80 e4       	ldi	r24, 0x40	; 64
     99c:	89 83       	std	Y+1, r24	; 0x01

  TWDR = address;
     99e:	83 e2       	ldi	r24, 0x23	; 35
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2a 81       	ldd	r18, Y+2	; 0x02
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     9a8:	86 e5       	ldi	r24, 0x56	; 86
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	24 e8       	ldi	r18, 0x84	; 132
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
     9b2:	00 00       	nop
     9b4:	86 e5       	ldi	r24, 0x56	; 86
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	80 81       	ld	r24, Z
     9bc:	88 23       	and	r24, r24
     9be:	d4 f7       	brge	.-12     	; 0x9b4 <i2c_sendAddress+0x3a>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
     9c0:	81 e2       	ldi	r24, 0x21	; 33
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	9c 01       	movw	r18, r24
     9ce:	28 7f       	andi	r18, 0xF8	; 248
     9d0:	30 70       	andi	r19, 0x00	; 0
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	88 2f       	mov	r24, r24
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <i2c_sendAddress+0x68>
    return (0);
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <i2c_sendAddress+0x6a>
  else
    return (1);
     9e2:	81 e0       	ldi	r24, 0x01	; 1
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	0f 92       	push	r0
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
     9fa:	83 e2       	ldi	r24, 0x23	; 35
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	29 81       	ldd	r18, Y+1	; 0x01
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     a04:	86 e5       	ldi	r24, 0x56	; 86
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	24 e8       	ldi	r18, 0x84	; 132
     a0a:	fc 01       	movw	r30, r24
     a0c:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
     a0e:	00 00       	nop
     a10:	86 e5       	ldi	r24, 0x56	; 86
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
     a18:	88 23       	and	r24, r24
     a1a:	d4 f7       	brge	.-12     	; 0xa10 <i2c_sendData+0x22>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
     a1c:	81 e2       	ldi	r24, 0x21	; 33
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	fc 01       	movw	r30, r24
     a22:	80 81       	ld	r24, Z
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	88 7f       	andi	r24, 0xF8	; 248
     a2a:	90 70       	andi	r25, 0x00	; 0
     a2c:	88 32       	cpi	r24, 0x28	; 40
     a2e:	91 05       	cpc	r25, r1
     a30:	11 f0       	breq	.+4      	; 0xa36 <i2c_sendData+0x48>
    return (1);
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <i2c_sendData+0x4a>
  else
    return (0);
     a36:	80 e0       	ldi	r24, 0x00	; 0
}
     a38:	0f 90       	pop	r0
     a3a:	cf 91       	pop	r28
     a3c:	df 91       	pop	r29
     a3e:	08 95       	ret

00000a40 <i2c_receiveData_ACK>:

//*****************************************************
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	0f 92       	push	r0
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     a4a:	86 e5       	ldi	r24, 0x56	; 86
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	24 ec       	ldi	r18, 0xC4	; 196
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     a54:	00 00       	nop
     a56:	86 e5       	ldi	r24, 0x56	; 86
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	88 23       	and	r24, r24
     a60:	d4 f7       	brge	.-12     	; 0xa56 <i2c_receiveData_ACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
     a62:	81 e2       	ldi	r24, 0x21	; 33
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	fc 01       	movw	r30, r24
     a68:	80 81       	ld	r24, Z
     a6a:	88 2f       	mov	r24, r24
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	88 7f       	andi	r24, 0xF8	; 248
     a70:	90 70       	andi	r25, 0x00	; 0
     a72:	80 35       	cpi	r24, 0x50	; 80
     a74:	91 05       	cpc	r25, r1
     a76:	11 f0       	breq	.+4      	; 0xa7c <i2c_receiveData_ACK+0x3c>
    return (ERROR_CODE);
     a78:	8e e7       	ldi	r24, 0x7E	; 126
     a7a:	06 c0       	rjmp	.+12     	; 0xa88 <i2c_receiveData_ACK+0x48>

  data = TWDR;
     a7c:	83 e2       	ldi	r24, 0x23	; 35
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     a86:	89 81       	ldd	r24, Y+1	; 0x01
}
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <i2c_receiveData_NACK>:

//******************************************************************
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	0f 92       	push	r0
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
     a9a:	86 e5       	ldi	r24, 0x56	; 86
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	24 e8       	ldi	r18, 0x84	; 132
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     aa4:	00 00       	nop
     aa6:	86 e5       	ldi	r24, 0x56	; 86
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	fc 01       	movw	r30, r24
     aac:	80 81       	ld	r24, Z
     aae:	88 23       	and	r24, r24
     ab0:	d4 f7       	brge	.-12     	; 0xaa6 <i2c_receiveData_NACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
     ab2:	81 e2       	ldi	r24, 0x21	; 33
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	fc 01       	movw	r30, r24
     ab8:	80 81       	ld	r24, Z
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	88 7f       	andi	r24, 0xF8	; 248
     ac0:	90 70       	andi	r25, 0x00	; 0
     ac2:	88 35       	cpi	r24, 0x58	; 88
     ac4:	91 05       	cpc	r25, r1
     ac6:	11 f0       	breq	.+4      	; 0xacc <i2c_receiveData_NACK+0x3c>
    return (ERROR_CODE);
     ac8:	8e e7       	ldi	r24, 0x7E	; 126
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <i2c_receiveData_NACK+0x48>

  data = TWDR;
     acc:	83 e2       	ldi	r24, 0x23	; 35
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	fc 01       	movw	r30, r24
     ad2:	80 81       	ld	r24, Z
     ad4:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ad8:	0f 90       	pop	r0
     ada:	cf 91       	pop	r28
     adc:	df 91       	pop	r29
     ade:	08 95       	ret

00000ae0 <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
     ae0:	df 93       	push	r29
     ae2:	cf 93       	push	r28
     ae4:	cd b7       	in	r28, 0x3d	; 61
     ae6:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
     ae8:	86 e5       	ldi	r24, 0x56	; 86
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	24 e9       	ldi	r18, 0x94	; 148
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
}
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <__fixunssfsi>:
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	7b 01       	movw	r14, r22
     b02:	8c 01       	movw	r16, r24
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	5f e4       	ldi	r21, 0x4F	; 79
     b0c:	d7 d2       	rcall	.+1454   	; 0x10bc <__gesf2>
     b0e:	87 fd       	sbrc	r24, 7
     b10:	0f c0       	rjmp	.+30     	; 0xb30 <__fixunssfsi+0x38>
     b12:	c8 01       	movw	r24, r16
     b14:	b7 01       	movw	r22, r14
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	5f e4       	ldi	r21, 0x4F	; 79
     b1e:	83 d1       	rcall	.+774    	; 0xe26 <__subsf3>
     b20:	23 d3       	rcall	.+1606   	; 0x1168 <__fixsfsi>
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	20 50       	subi	r18, 0x00	; 0
     b28:	30 40       	sbci	r19, 0x00	; 0
     b2a:	40 40       	sbci	r20, 0x00	; 0
     b2c:	50 48       	sbci	r21, 0x80	; 128
     b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__fixunssfsi+0x42>
     b30:	c8 01       	movw	r24, r16
     b32:	b7 01       	movw	r22, r14
     b34:	19 d3       	rcall	.+1586   	; 0x1168 <__fixsfsi>
     b36:	9b 01       	movw	r18, r22
     b38:	ac 01       	movw	r20, r24
     b3a:	b9 01       	movw	r22, r18
     b3c:	ca 01       	movw	r24, r20
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <_fpadd_parts>:
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	e9 ea       	ldi	r30, 0xA9	; 169
     b4e:	f5 e0       	ldi	r31, 0x05	; 5
     b50:	ed c4       	rjmp	.+2522   	; 0x152c <__prologue_saves__+0x8>
     b52:	fc 01       	movw	r30, r24
     b54:	ea 01       	movw	r28, r20
     b56:	80 81       	ld	r24, Z
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <_fpadd_parts+0x16>
     b5c:	38 c1       	rjmp	.+624    	; 0xdce <_fpadd_parts+0x286>
     b5e:	db 01       	movw	r26, r22
     b60:	9c 91       	ld	r25, X
     b62:	92 30       	cpi	r25, 0x02	; 2
     b64:	08 f4       	brcc	.+2      	; 0xb68 <_fpadd_parts+0x20>
     b66:	30 c1       	rjmp	.+608    	; 0xdc8 <_fpadd_parts+0x280>
     b68:	84 30       	cpi	r24, 0x04	; 4
     b6a:	59 f4       	brne	.+22     	; 0xb82 <_fpadd_parts+0x3a>
     b6c:	94 30       	cpi	r25, 0x04	; 4
     b6e:	09 f0       	breq	.+2      	; 0xb72 <_fpadd_parts+0x2a>
     b70:	2e c1       	rjmp	.+604    	; 0xdce <_fpadd_parts+0x286>
     b72:	91 81       	ldd	r25, Z+1	; 0x01
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	8c 91       	ld	r24, X
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	98 17       	cp	r25, r24
     b7c:	09 f0       	breq	.+2      	; 0xb80 <_fpadd_parts+0x38>
     b7e:	21 c1       	rjmp	.+578    	; 0xdc2 <_fpadd_parts+0x27a>
     b80:	26 c1       	rjmp	.+588    	; 0xdce <_fpadd_parts+0x286>
     b82:	94 30       	cpi	r25, 0x04	; 4
     b84:	09 f4       	brne	.+2      	; 0xb88 <_fpadd_parts+0x40>
     b86:	20 c1       	rjmp	.+576    	; 0xdc8 <_fpadd_parts+0x280>
     b88:	92 30       	cpi	r25, 0x02	; 2
     b8a:	b1 f4       	brne	.+44     	; 0xbb8 <_fpadd_parts+0x70>
     b8c:	82 30       	cpi	r24, 0x02	; 2
     b8e:	09 f0       	breq	.+2      	; 0xb92 <_fpadd_parts+0x4a>
     b90:	1e c1       	rjmp	.+572    	; 0xdce <_fpadd_parts+0x286>
     b92:	ca 01       	movw	r24, r20
     b94:	af 01       	movw	r20, r30
     b96:	28 e0       	ldi	r18, 0x08	; 8
     b98:	da 01       	movw	r26, r20
     b9a:	0d 90       	ld	r0, X+
     b9c:	ad 01       	movw	r20, r26
     b9e:	dc 01       	movw	r26, r24
     ba0:	0d 92       	st	X+, r0
     ba2:	cd 01       	movw	r24, r26
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	c1 f7       	brne	.-16     	; 0xb98 <_fpadd_parts+0x50>
     ba8:	db 01       	movw	r26, r22
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	8c 91       	ld	r24, X
     bae:	11 97       	sbiw	r26, 0x01	; 1
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	89 23       	and	r24, r25
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	0a c1       	rjmp	.+532    	; 0xdcc <_fpadd_parts+0x284>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	09 f4       	brne	.+2      	; 0xbbe <_fpadd_parts+0x76>
     bbc:	05 c1       	rjmp	.+522    	; 0xdc8 <_fpadd_parts+0x280>
     bbe:	c2 80       	ldd	r12, Z+2	; 0x02
     bc0:	d3 80       	ldd	r13, Z+3	; 0x03
     bc2:	db 01       	movw	r26, r22
     bc4:	12 96       	adiw	r26, 0x02	; 2
     bc6:	6d 90       	ld	r6, X+
     bc8:	7c 90       	ld	r7, X
     bca:	13 97       	sbiw	r26, 0x03	; 3
     bcc:	24 81       	ldd	r18, Z+4	; 0x04
     bce:	35 81       	ldd	r19, Z+5	; 0x05
     bd0:	46 81       	ldd	r20, Z+6	; 0x06
     bd2:	57 81       	ldd	r21, Z+7	; 0x07
     bd4:	14 96       	adiw	r26, 0x04	; 4
     bd6:	ed 90       	ld	r14, X+
     bd8:	fd 90       	ld	r15, X+
     bda:	0d 91       	ld	r16, X+
     bdc:	1c 91       	ld	r17, X
     bde:	17 97       	sbiw	r26, 0x07	; 7
     be0:	c6 01       	movw	r24, r12
     be2:	86 19       	sub	r24, r6
     be4:	97 09       	sbc	r25, r7
     be6:	5c 01       	movw	r10, r24
     be8:	97 ff       	sbrs	r25, 7
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <_fpadd_parts+0xac>
     bec:	aa 24       	eor	r10, r10
     bee:	bb 24       	eor	r11, r11
     bf0:	a8 1a       	sub	r10, r24
     bf2:	b9 0a       	sbc	r11, r25
     bf4:	b0 e2       	ldi	r27, 0x20	; 32
     bf6:	ab 16       	cp	r10, r27
     bf8:	b1 04       	cpc	r11, r1
     bfa:	0c f0       	brlt	.+2      	; 0xbfe <_fpadd_parts+0xb6>
     bfc:	61 c0       	rjmp	.+194    	; 0xcc0 <_fpadd_parts+0x178>
     bfe:	18 16       	cp	r1, r24
     c00:	19 06       	cpc	r1, r25
     c02:	6c f5       	brge	.+90     	; 0xc5e <_fpadd_parts+0x116>
     c04:	37 01       	movw	r6, r14
     c06:	48 01       	movw	r8, r16
     c08:	0a 2c       	mov	r0, r10
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <_fpadd_parts+0xcc>
     c0c:	96 94       	lsr	r9
     c0e:	87 94       	ror	r8
     c10:	77 94       	ror	r7
     c12:	67 94       	ror	r6
     c14:	0a 94       	dec	r0
     c16:	d2 f7       	brpl	.-12     	; 0xc0c <_fpadd_parts+0xc4>
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	0a 2c       	mov	r0, r10
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <_fpadd_parts+0xe4>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	aa 1f       	adc	r26, r26
     c2a:	bb 1f       	adc	r27, r27
     c2c:	0a 94       	dec	r0
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <_fpadd_parts+0xdc>
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	a1 09       	sbc	r26, r1
     c34:	b1 09       	sbc	r27, r1
     c36:	8e 21       	and	r24, r14
     c38:	9f 21       	and	r25, r15
     c3a:	a0 23       	and	r26, r16
     c3c:	b1 23       	and	r27, r17
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	e3 94       	inc	r14
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	a1 05       	cpc	r26, r1
     c4a:	b1 05       	cpc	r27, r1
     c4c:	19 f4       	brne	.+6      	; 0xc54 <_fpadd_parts+0x10c>
     c4e:	ee 24       	eor	r14, r14
     c50:	ff 24       	eor	r15, r15
     c52:	87 01       	movw	r16, r14
     c54:	e6 28       	or	r14, r6
     c56:	f7 28       	or	r15, r7
     c58:	08 29       	or	r16, r8
     c5a:	19 29       	or	r17, r9
     c5c:	3c c0       	rjmp	.+120    	; 0xcd6 <_fpadd_parts+0x18e>
     c5e:	00 97       	sbiw	r24, 0x00	; 0
     c60:	d1 f1       	breq	.+116    	; 0xcd6 <_fpadd_parts+0x18e>
     c62:	ca 0c       	add	r12, r10
     c64:	db 1c       	adc	r13, r11
     c66:	39 01       	movw	r6, r18
     c68:	4a 01       	movw	r8, r20
     c6a:	0a 2c       	mov	r0, r10
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <_fpadd_parts+0x12e>
     c6e:	96 94       	lsr	r9
     c70:	87 94       	ror	r8
     c72:	77 94       	ror	r7
     c74:	67 94       	ror	r6
     c76:	0a 94       	dec	r0
     c78:	d2 f7       	brpl	.-12     	; 0xc6e <_fpadd_parts+0x126>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	0a 2c       	mov	r0, r10
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <_fpadd_parts+0x146>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	aa 1f       	adc	r26, r26
     c8c:	bb 1f       	adc	r27, r27
     c8e:	0a 94       	dec	r0
     c90:	d2 f7       	brpl	.-12     	; 0xc86 <_fpadd_parts+0x13e>
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	a1 09       	sbc	r26, r1
     c96:	b1 09       	sbc	r27, r1
     c98:	82 23       	and	r24, r18
     c9a:	93 23       	and	r25, r19
     c9c:	a4 23       	and	r26, r20
     c9e:	b5 23       	and	r27, r21
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	a1 05       	cpc	r26, r1
     cac:	b1 05       	cpc	r27, r1
     cae:	19 f4       	brne	.+6      	; 0xcb6 <_fpadd_parts+0x16e>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	26 29       	or	r18, r6
     cb8:	37 29       	or	r19, r7
     cba:	48 29       	or	r20, r8
     cbc:	59 29       	or	r21, r9
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <_fpadd_parts+0x18e>
     cc0:	6c 14       	cp	r6, r12
     cc2:	7d 04       	cpc	r7, r13
     cc4:	24 f4       	brge	.+8      	; 0xcce <_fpadd_parts+0x186>
     cc6:	ee 24       	eor	r14, r14
     cc8:	ff 24       	eor	r15, r15
     cca:	87 01       	movw	r16, r14
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <_fpadd_parts+0x18e>
     cce:	63 01       	movw	r12, r6
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	a9 01       	movw	r20, r18
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	fb 01       	movw	r30, r22
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	89 17       	cp	r24, r25
     cde:	09 f4       	brne	.+2      	; 0xce2 <_fpadd_parts+0x19a>
     ce0:	45 c0       	rjmp	.+138    	; 0xd6c <_fpadd_parts+0x224>
     ce2:	88 23       	and	r24, r24
     ce4:	49 f0       	breq	.+18     	; 0xcf8 <_fpadd_parts+0x1b0>
     ce6:	d8 01       	movw	r26, r16
     ce8:	c7 01       	movw	r24, r14
     cea:	82 1b       	sub	r24, r18
     cec:	93 0b       	sbc	r25, r19
     cee:	a4 0b       	sbc	r26, r20
     cf0:	b5 0b       	sbc	r27, r21
     cf2:	9c 01       	movw	r18, r24
     cf4:	ad 01       	movw	r20, r26
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <_fpadd_parts+0x1b8>
     cf8:	2e 19       	sub	r18, r14
     cfa:	3f 09       	sbc	r19, r15
     cfc:	40 0b       	sbc	r20, r16
     cfe:	51 0b       	sbc	r21, r17
     d00:	57 fd       	sbrc	r21, 7
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <_fpadd_parts+0x1c4>
     d04:	19 82       	std	Y+1, r1	; 0x01
     d06:	db 82       	std	Y+3, r13	; 0x03
     d08:	ca 82       	std	Y+2, r12	; 0x02
     d0a:	0b c0       	rjmp	.+22     	; 0xd22 <_fpadd_parts+0x1da>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	db 82       	std	Y+3, r13	; 0x03
     d12:	ca 82       	std	Y+2, r12	; 0x02
     d14:	50 95       	com	r21
     d16:	40 95       	com	r20
     d18:	30 95       	com	r19
     d1a:	21 95       	neg	r18
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	4f 4f       	sbci	r20, 0xFF	; 255
     d20:	5f 4f       	sbci	r21, 0xFF	; 255
     d22:	2c 83       	std	Y+4, r18	; 0x04
     d24:	3d 83       	std	Y+5, r19	; 0x05
     d26:	4e 83       	std	Y+6, r20	; 0x06
     d28:	5f 83       	std	Y+7, r21	; 0x07
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <_fpadd_parts+0x1fe>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	8c 83       	std	Y+4, r24	; 0x04
     d36:	9d 83       	std	Y+5, r25	; 0x05
     d38:	ae 83       	std	Y+6, r26	; 0x06
     d3a:	bf 83       	std	Y+7, r27	; 0x07
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9b 83       	std	Y+3, r25	; 0x03
     d44:	8a 83       	std	Y+2, r24	; 0x02
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	9d 81       	ldd	r25, Y+5	; 0x05
     d4a:	ae 81       	ldd	r26, Y+6	; 0x06
     d4c:	bf 81       	ldd	r27, Y+7	; 0x07
     d4e:	9c 01       	movw	r18, r24
     d50:	ad 01       	movw	r20, r26
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	30 40       	sbci	r19, 0x00	; 0
     d56:	40 40       	sbci	r20, 0x00	; 0
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	2f 3f       	cpi	r18, 0xFF	; 255
     d5c:	ef ef       	ldi	r30, 0xFF	; 255
     d5e:	3e 07       	cpc	r19, r30
     d60:	ef ef       	ldi	r30, 0xFF	; 255
     d62:	4e 07       	cpc	r20, r30
     d64:	ef e3       	ldi	r30, 0x3F	; 63
     d66:	5e 07       	cpc	r21, r30
     d68:	08 f3       	brcs	.-62     	; 0xd2c <_fpadd_parts+0x1e4>
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <_fpadd_parts+0x23a>
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	db 82       	std	Y+3, r13	; 0x03
     d70:	ca 82       	std	Y+2, r12	; 0x02
     d72:	2e 0d       	add	r18, r14
     d74:	3f 1d       	adc	r19, r15
     d76:	40 1f       	adc	r20, r16
     d78:	51 1f       	adc	r21, r17
     d7a:	2c 83       	std	Y+4, r18	; 0x04
     d7c:	3d 83       	std	Y+5, r19	; 0x05
     d7e:	4e 83       	std	Y+6, r20	; 0x06
     d80:	5f 83       	std	Y+7, r21	; 0x07
     d82:	83 e0       	ldi	r24, 0x03	; 3
     d84:	88 83       	st	Y, r24
     d86:	2c 81       	ldd	r18, Y+4	; 0x04
     d88:	3d 81       	ldd	r19, Y+5	; 0x05
     d8a:	4e 81       	ldd	r20, Y+6	; 0x06
     d8c:	5f 81       	ldd	r21, Y+7	; 0x07
     d8e:	57 ff       	sbrs	r21, 7
     d90:	1d c0       	rjmp	.+58     	; 0xdcc <_fpadd_parts+0x284>
     d92:	da 01       	movw	r26, r20
     d94:	c9 01       	movw	r24, r18
     d96:	81 70       	andi	r24, 0x01	; 1
     d98:	90 70       	andi	r25, 0x00	; 0
     d9a:	a0 70       	andi	r26, 0x00	; 0
     d9c:	b0 70       	andi	r27, 0x00	; 0
     d9e:	56 95       	lsr	r21
     da0:	47 95       	ror	r20
     da2:	37 95       	ror	r19
     da4:	27 95       	ror	r18
     da6:	82 2b       	or	r24, r18
     da8:	93 2b       	or	r25, r19
     daa:	a4 2b       	or	r26, r20
     dac:	b5 2b       	or	r27, r21
     dae:	8c 83       	std	Y+4, r24	; 0x04
     db0:	9d 83       	std	Y+5, r25	; 0x05
     db2:	ae 83       	std	Y+6, r26	; 0x06
     db4:	bf 83       	std	Y+7, r27	; 0x07
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	9b 83       	std	Y+3, r25	; 0x03
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <_fpadd_parts+0x284>
     dc2:	ea e7       	ldi	r30, 0x7A	; 122
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <_fpadd_parts+0x286>
     dc8:	fb 01       	movw	r30, r22
     dca:	01 c0       	rjmp	.+2      	; 0xdce <_fpadd_parts+0x286>
     dcc:	fe 01       	movw	r30, r28
     dce:	cf 01       	movw	r24, r30
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	ee e0       	ldi	r30, 0x0E	; 14
     dd6:	c6 c3       	rjmp	.+1932   	; 0x1564 <__epilogue_restores__+0x8>

00000dd8 <__addsf3>:
     dd8:	a0 e2       	ldi	r26, 0x20	; 32
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e1 ef       	ldi	r30, 0xF1	; 241
     dde:	f6 e0       	ldi	r31, 0x06	; 6
     de0:	ad c3       	rjmp	.+1882   	; 0x153c <__prologue_saves__+0x18>
     de2:	69 83       	std	Y+1, r22	; 0x01
     de4:	7a 83       	std	Y+2, r23	; 0x02
     de6:	8b 83       	std	Y+3, r24	; 0x03
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	2d 83       	std	Y+5, r18	; 0x05
     dec:	3e 83       	std	Y+6, r19	; 0x06
     dee:	4f 83       	std	Y+7, r20	; 0x07
     df0:	58 87       	std	Y+8, r21	; 0x08
     df2:	89 e0       	ldi	r24, 0x09	; 9
     df4:	e8 2e       	mov	r14, r24
     df6:	f1 2c       	mov	r15, r1
     df8:	ec 0e       	add	r14, r28
     dfa:	fd 1e       	adc	r15, r29
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	b7 01       	movw	r22, r14
     e02:	ce d2       	rcall	.+1436   	; 0x13a0 <__unpack_f>
     e04:	8e 01       	movw	r16, r28
     e06:	0f 5e       	subi	r16, 0xEF	; 239
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	ce 01       	movw	r24, r28
     e0c:	05 96       	adiw	r24, 0x05	; 5
     e0e:	b8 01       	movw	r22, r16
     e10:	c7 d2       	rcall	.+1422   	; 0x13a0 <__unpack_f>
     e12:	c7 01       	movw	r24, r14
     e14:	b8 01       	movw	r22, r16
     e16:	ae 01       	movw	r20, r28
     e18:	47 5e       	subi	r20, 0xE7	; 231
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	95 de       	rcall	.-726    	; 0xb48 <_fpadd_parts>
     e1e:	f3 d1       	rcall	.+998    	; 0x1206 <__pack_f>
     e20:	a0 96       	adiw	r28, 0x20	; 32
     e22:	e6 e0       	ldi	r30, 0x06	; 6
     e24:	a7 c3       	rjmp	.+1870   	; 0x1574 <__epilogue_restores__+0x18>

00000e26 <__subsf3>:
     e26:	a0 e2       	ldi	r26, 0x20	; 32
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e8 e1       	ldi	r30, 0x18	; 24
     e2c:	f7 e0       	ldi	r31, 0x07	; 7
     e2e:	86 c3       	rjmp	.+1804   	; 0x153c <__prologue_saves__+0x18>
     e30:	69 83       	std	Y+1, r22	; 0x01
     e32:	7a 83       	std	Y+2, r23	; 0x02
     e34:	8b 83       	std	Y+3, r24	; 0x03
     e36:	9c 83       	std	Y+4, r25	; 0x04
     e38:	2d 83       	std	Y+5, r18	; 0x05
     e3a:	3e 83       	std	Y+6, r19	; 0x06
     e3c:	4f 83       	std	Y+7, r20	; 0x07
     e3e:	58 87       	std	Y+8, r21	; 0x08
     e40:	8e 01       	movw	r16, r28
     e42:	07 5f       	subi	r16, 0xF7	; 247
     e44:	1f 4f       	sbci	r17, 0xFF	; 255
     e46:	ce 01       	movw	r24, r28
     e48:	01 96       	adiw	r24, 0x01	; 1
     e4a:	b8 01       	movw	r22, r16
     e4c:	a9 d2       	rcall	.+1362   	; 0x13a0 <__unpack_f>
     e4e:	91 e1       	ldi	r25, 0x11	; 17
     e50:	e9 2e       	mov	r14, r25
     e52:	f1 2c       	mov	r15, r1
     e54:	ec 0e       	add	r14, r28
     e56:	fd 1e       	adc	r15, r29
     e58:	ce 01       	movw	r24, r28
     e5a:	05 96       	adiw	r24, 0x05	; 5
     e5c:	b7 01       	movw	r22, r14
     e5e:	a0 d2       	rcall	.+1344   	; 0x13a0 <__unpack_f>
     e60:	8a 89       	ldd	r24, Y+18	; 0x12
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	89 27       	eor	r24, r25
     e66:	8a 8b       	std	Y+18, r24	; 0x12
     e68:	c8 01       	movw	r24, r16
     e6a:	b7 01       	movw	r22, r14
     e6c:	ae 01       	movw	r20, r28
     e6e:	47 5e       	subi	r20, 0xE7	; 231
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	6a de       	rcall	.-812    	; 0xb48 <_fpadd_parts>
     e74:	c8 d1       	rcall	.+912    	; 0x1206 <__pack_f>
     e76:	a0 96       	adiw	r28, 0x20	; 32
     e78:	e6 e0       	ldi	r30, 0x06	; 6
     e7a:	7c c3       	rjmp	.+1784   	; 0x1574 <__epilogue_restores__+0x18>

00000e7c <__mulsf3>:
     e7c:	a0 e2       	ldi	r26, 0x20	; 32
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e4       	ldi	r30, 0x43	; 67
     e82:	f7 e0       	ldi	r31, 0x07	; 7
     e84:	4f c3       	rjmp	.+1694   	; 0x1524 <__prologue_saves__>
     e86:	69 83       	std	Y+1, r22	; 0x01
     e88:	7a 83       	std	Y+2, r23	; 0x02
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	9c 83       	std	Y+4, r25	; 0x04
     e8e:	2d 83       	std	Y+5, r18	; 0x05
     e90:	3e 83       	std	Y+6, r19	; 0x06
     e92:	4f 83       	std	Y+7, r20	; 0x07
     e94:	58 87       	std	Y+8, r21	; 0x08
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	be 01       	movw	r22, r28
     e9c:	67 5f       	subi	r22, 0xF7	; 247
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	7f d2       	rcall	.+1278   	; 0x13a0 <__unpack_f>
     ea2:	ce 01       	movw	r24, r28
     ea4:	05 96       	adiw	r24, 0x05	; 5
     ea6:	be 01       	movw	r22, r28
     ea8:	6f 5e       	subi	r22, 0xEF	; 239
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	79 d2       	rcall	.+1266   	; 0x13a0 <__unpack_f>
     eae:	99 85       	ldd	r25, Y+9	; 0x09
     eb0:	92 30       	cpi	r25, 0x02	; 2
     eb2:	78 f0       	brcs	.+30     	; 0xed2 <__mulsf3+0x56>
     eb4:	89 89       	ldd	r24, Y+17	; 0x11
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	c0 f0       	brcs	.+48     	; 0xeea <__mulsf3+0x6e>
     eba:	94 30       	cpi	r25, 0x04	; 4
     ebc:	19 f4       	brne	.+6      	; 0xec4 <__mulsf3+0x48>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	41 f4       	brne	.+16     	; 0xed2 <__mulsf3+0x56>
     ec2:	cb c0       	rjmp	.+406    	; 0x105a <__mulsf3+0x1de>
     ec4:	84 30       	cpi	r24, 0x04	; 4
     ec6:	19 f4       	brne	.+6      	; 0xece <__mulsf3+0x52>
     ec8:	92 30       	cpi	r25, 0x02	; 2
     eca:	79 f4       	brne	.+30     	; 0xeea <__mulsf3+0x6e>
     ecc:	c6 c0       	rjmp	.+396    	; 0x105a <__mulsf3+0x1de>
     ece:	92 30       	cpi	r25, 0x02	; 2
     ed0:	51 f4       	brne	.+20     	; 0xee6 <__mulsf3+0x6a>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ed6:	9a 89       	ldd	r25, Y+18	; 0x12
     ed8:	29 17       	cp	r18, r25
     eda:	09 f4       	brne	.+2      	; 0xede <__mulsf3+0x62>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	8a 87       	std	Y+10, r24	; 0x0a
     ee0:	ce 01       	movw	r24, r28
     ee2:	09 96       	adiw	r24, 0x09	; 9
     ee4:	bc c0       	rjmp	.+376    	; 0x105e <__mulsf3+0x1e2>
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	51 f4       	brne	.+20     	; 0xefe <__mulsf3+0x82>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	2a 85       	ldd	r18, Y+10	; 0x0a
     eee:	9a 89       	ldd	r25, Y+18	; 0x12
     ef0:	29 17       	cp	r18, r25
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__mulsf3+0x7a>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	8a 8b       	std	Y+18, r24	; 0x12
     ef8:	ce 01       	movw	r24, r28
     efa:	41 96       	adiw	r24, 0x11	; 17
     efc:	b0 c0       	rjmp	.+352    	; 0x105e <__mulsf3+0x1e2>
     efe:	6d 84       	ldd	r6, Y+13	; 0x0d
     f00:	7e 84       	ldd	r7, Y+14	; 0x0e
     f02:	8f 84       	ldd	r8, Y+15	; 0x0f
     f04:	98 88       	ldd	r9, Y+16	; 0x10
     f06:	ed 88       	ldd	r14, Y+21	; 0x15
     f08:	fe 88       	ldd	r15, Y+22	; 0x16
     f0a:	0f 89       	ldd	r16, Y+23	; 0x17
     f0c:	18 8d       	ldd	r17, Y+24	; 0x18
     f0e:	e0 e2       	ldi	r30, 0x20	; 32
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	dc 01       	movw	r26, r24
     f18:	aa 24       	eor	r10, r10
     f1a:	bb 24       	eor	r11, r11
     f1c:	65 01       	movw	r12, r10
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	a9 01       	movw	r20, r18
     f24:	b3 01       	movw	r22, r6
     f26:	61 70       	andi	r22, 0x01	; 1
     f28:	70 70       	andi	r23, 0x00	; 0
     f2a:	61 15       	cp	r22, r1
     f2c:	71 05       	cpc	r23, r1
     f2e:	d1 f0       	breq	.+52     	; 0xf64 <__mulsf3+0xe8>
     f30:	2e 0d       	add	r18, r14
     f32:	3f 1d       	adc	r19, r15
     f34:	40 1f       	adc	r20, r16
     f36:	51 1f       	adc	r21, r17
     f38:	15 01       	movw	r2, r10
     f3a:	26 01       	movw	r4, r12
     f3c:	28 0e       	add	r2, r24
     f3e:	39 1e       	adc	r3, r25
     f40:	4a 1e       	adc	r4, r26
     f42:	5b 1e       	adc	r5, r27
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	2e 15       	cp	r18, r14
     f4e:	3f 05       	cpc	r19, r15
     f50:	40 07       	cpc	r20, r16
     f52:	51 07       	cpc	r21, r17
     f54:	18 f0       	brcs	.+6      	; 0xf5c <__mulsf3+0xe0>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	dc 01       	movw	r26, r24
     f5c:	82 0d       	add	r24, r2
     f5e:	93 1d       	adc	r25, r3
     f60:	a4 1d       	adc	r26, r4
     f62:	b5 1d       	adc	r27, r5
     f64:	aa 0c       	add	r10, r10
     f66:	bb 1c       	adc	r11, r11
     f68:	cc 1c       	adc	r12, r12
     f6a:	dd 1c       	adc	r13, r13
     f6c:	17 ff       	sbrs	r17, 7
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <__mulsf3+0x106>
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	26 2e       	mov	r2, r22
     f74:	31 2c       	mov	r3, r1
     f76:	41 2c       	mov	r4, r1
     f78:	51 2c       	mov	r5, r1
     f7a:	a2 28       	or	r10, r2
     f7c:	b3 28       	or	r11, r3
     f7e:	c4 28       	or	r12, r4
     f80:	d5 28       	or	r13, r5
     f82:	31 97       	sbiw	r30, 0x01	; 1
     f84:	49 f0       	breq	.+18     	; 0xf98 <__mulsf3+0x11c>
     f86:	ee 0c       	add	r14, r14
     f88:	ff 1c       	adc	r15, r15
     f8a:	00 1f       	adc	r16, r16
     f8c:	11 1f       	adc	r17, r17
     f8e:	96 94       	lsr	r9
     f90:	87 94       	ror	r8
     f92:	77 94       	ror	r7
     f94:	67 94       	ror	r6
     f96:	c6 cf       	rjmp	.-116    	; 0xf24 <__mulsf3+0xa8>
     f98:	6b 89       	ldd	r22, Y+19	; 0x13
     f9a:	7c 89       	ldd	r23, Y+20	; 0x14
     f9c:	eb 85       	ldd	r30, Y+11	; 0x0b
     f9e:	fc 85       	ldd	r31, Y+12	; 0x0c
     fa0:	6e 0f       	add	r22, r30
     fa2:	7f 1f       	adc	r23, r31
     fa4:	6e 5f       	subi	r22, 0xFE	; 254
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	7c 8f       	std	Y+28, r23	; 0x1c
     faa:	6b 8f       	std	Y+27, r22	; 0x1b
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	ea 85       	ldd	r30, Y+10	; 0x0a
     fb0:	7a 89       	ldd	r23, Y+18	; 0x12
     fb2:	e7 17       	cp	r30, r23
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <__mulsf3+0x13c>
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	6a 8f       	std	Y+26, r22	; 0x1a
     fba:	6b 8d       	ldd	r22, Y+27	; 0x1b
     fbc:	7c 8d       	ldd	r23, Y+28	; 0x1c
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <__mulsf3+0x164>
     fc0:	fc 01       	movw	r30, r24
     fc2:	e1 70       	andi	r30, 0x01	; 1
     fc4:	f0 70       	andi	r31, 0x00	; 0
     fc6:	30 97       	sbiw	r30, 0x00	; 0
     fc8:	29 f0       	breq	.+10     	; 0xfd4 <__mulsf3+0x158>
     fca:	56 95       	lsr	r21
     fcc:	47 95       	ror	r20
     fce:	37 95       	ror	r19
     fd0:	27 95       	ror	r18
     fd2:	50 68       	ori	r21, 0x80	; 128
     fd4:	b6 95       	lsr	r27
     fd6:	a7 95       	ror	r26
     fd8:	97 95       	ror	r25
     fda:	87 95       	ror	r24
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	b7 fd       	sbrc	r27, 7
     fe2:	ee cf       	rjmp	.-36     	; 0xfc0 <__mulsf3+0x144>
     fe4:	0c c0       	rjmp	.+24     	; 0xffe <__mulsf3+0x182>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	aa 1f       	adc	r26, r26
     fec:	bb 1f       	adc	r27, r27
     fee:	57 fd       	sbrc	r21, 7
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	44 1f       	adc	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	70 40       	sbci	r23, 0x00	; 0
     ffe:	80 30       	cpi	r24, 0x00	; 0
    1000:	e0 e0       	ldi	r30, 0x00	; 0
    1002:	9e 07       	cpc	r25, r30
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	ae 07       	cpc	r26, r30
    1008:	e0 e4       	ldi	r30, 0x40	; 64
    100a:	be 07       	cpc	r27, r30
    100c:	60 f3       	brcs	.-40     	; 0xfe6 <__mulsf3+0x16a>
    100e:	6b 8f       	std	Y+27, r22	; 0x1b
    1010:	7c 8f       	std	Y+28, r23	; 0x1c
    1012:	6f e7       	ldi	r22, 0x7F	; 127
    1014:	e6 2e       	mov	r14, r22
    1016:	f1 2c       	mov	r15, r1
    1018:	01 2d       	mov	r16, r1
    101a:	11 2d       	mov	r17, r1
    101c:	e8 22       	and	r14, r24
    101e:	f9 22       	and	r15, r25
    1020:	0a 23       	and	r16, r26
    1022:	1b 23       	and	r17, r27
    1024:	60 e4       	ldi	r22, 0x40	; 64
    1026:	e6 16       	cp	r14, r22
    1028:	f1 04       	cpc	r15, r1
    102a:	01 05       	cpc	r16, r1
    102c:	11 05       	cpc	r17, r1
    102e:	61 f4       	brne	.+24     	; 0x1048 <__mulsf3+0x1cc>
    1030:	87 fd       	sbrc	r24, 7
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <__mulsf3+0x1cc>
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	41 05       	cpc	r20, r1
    103a:	51 05       	cpc	r21, r1
    103c:	29 f0       	breq	.+10     	; 0x1048 <__mulsf3+0x1cc>
    103e:	80 5c       	subi	r24, 0xC0	; 192
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	af 4f       	sbci	r26, 0xFF	; 255
    1044:	bf 4f       	sbci	r27, 0xFF	; 255
    1046:	80 78       	andi	r24, 0x80	; 128
    1048:	8d 8f       	std	Y+29, r24	; 0x1d
    104a:	9e 8f       	std	Y+30, r25	; 0x1e
    104c:	af 8f       	std	Y+31, r26	; 0x1f
    104e:	b8 a3       	std	Y+32, r27	; 0x20
    1050:	83 e0       	ldi	r24, 0x03	; 3
    1052:	89 8f       	std	Y+25, r24	; 0x19
    1054:	ce 01       	movw	r24, r28
    1056:	49 96       	adiw	r24, 0x19	; 25
    1058:	02 c0       	rjmp	.+4      	; 0x105e <__mulsf3+0x1e2>
    105a:	8a e7       	ldi	r24, 0x7A	; 122
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	d3 d0       	rcall	.+422    	; 0x1206 <__pack_f>
    1060:	a0 96       	adiw	r28, 0x20	; 32
    1062:	e2 e1       	ldi	r30, 0x12	; 18
    1064:	7b c2       	rjmp	.+1270   	; 0x155c <__epilogue_restores__>

00001066 <__gtsf2>:
    1066:	a8 e1       	ldi	r26, 0x18	; 24
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e3       	ldi	r30, 0x38	; 56
    106c:	f8 e0       	ldi	r31, 0x08	; 8
    106e:	66 c2       	rjmp	.+1228   	; 0x153c <__prologue_saves__+0x18>
    1070:	69 83       	std	Y+1, r22	; 0x01
    1072:	7a 83       	std	Y+2, r23	; 0x02
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	9c 83       	std	Y+4, r25	; 0x04
    1078:	2d 83       	std	Y+5, r18	; 0x05
    107a:	3e 83       	std	Y+6, r19	; 0x06
    107c:	4f 83       	std	Y+7, r20	; 0x07
    107e:	58 87       	std	Y+8, r21	; 0x08
    1080:	8e 01       	movw	r16, r28
    1082:	07 5f       	subi	r16, 0xF7	; 247
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	b8 01       	movw	r22, r16
    108c:	89 d1       	rcall	.+786    	; 0x13a0 <__unpack_f>
    108e:	81 e1       	ldi	r24, 0x11	; 17
    1090:	e8 2e       	mov	r14, r24
    1092:	f1 2c       	mov	r15, r1
    1094:	ec 0e       	add	r14, r28
    1096:	fd 1e       	adc	r15, r29
    1098:	ce 01       	movw	r24, r28
    109a:	05 96       	adiw	r24, 0x05	; 5
    109c:	b7 01       	movw	r22, r14
    109e:	80 d1       	rcall	.+768    	; 0x13a0 <__unpack_f>
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <__gtsf2+0x4e>
    10a6:	89 89       	ldd	r24, Y+17	; 0x11
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	20 f0       	brcs	.+8      	; 0x10b4 <__gtsf2+0x4e>
    10ac:	c8 01       	movw	r24, r16
    10ae:	b7 01       	movw	r22, r14
    10b0:	e0 d1       	rcall	.+960    	; 0x1472 <__fpcmp_parts_f>
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <__gtsf2+0x50>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	68 96       	adiw	r28, 0x18	; 24
    10b8:	e6 e0       	ldi	r30, 0x06	; 6
    10ba:	5c c2       	rjmp	.+1208   	; 0x1574 <__epilogue_restores__+0x18>

000010bc <__gesf2>:
    10bc:	a8 e1       	ldi	r26, 0x18	; 24
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e3 e6       	ldi	r30, 0x63	; 99
    10c2:	f8 e0       	ldi	r31, 0x08	; 8
    10c4:	3b c2       	rjmp	.+1142   	; 0x153c <__prologue_saves__+0x18>
    10c6:	69 83       	std	Y+1, r22	; 0x01
    10c8:	7a 83       	std	Y+2, r23	; 0x02
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	2d 83       	std	Y+5, r18	; 0x05
    10d0:	3e 83       	std	Y+6, r19	; 0x06
    10d2:	4f 83       	std	Y+7, r20	; 0x07
    10d4:	58 87       	std	Y+8, r21	; 0x08
    10d6:	8e 01       	movw	r16, r28
    10d8:	07 5f       	subi	r16, 0xF7	; 247
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	ce 01       	movw	r24, r28
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	b8 01       	movw	r22, r16
    10e2:	5e d1       	rcall	.+700    	; 0x13a0 <__unpack_f>
    10e4:	81 e1       	ldi	r24, 0x11	; 17
    10e6:	e8 2e       	mov	r14, r24
    10e8:	f1 2c       	mov	r15, r1
    10ea:	ec 0e       	add	r14, r28
    10ec:	fd 1e       	adc	r15, r29
    10ee:	ce 01       	movw	r24, r28
    10f0:	05 96       	adiw	r24, 0x05	; 5
    10f2:	b7 01       	movw	r22, r14
    10f4:	55 d1       	rcall	.+682    	; 0x13a0 <__unpack_f>
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	38 f0       	brcs	.+14     	; 0x110a <__gesf2+0x4e>
    10fc:	89 89       	ldd	r24, Y+17	; 0x11
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	20 f0       	brcs	.+8      	; 0x110a <__gesf2+0x4e>
    1102:	c8 01       	movw	r24, r16
    1104:	b7 01       	movw	r22, r14
    1106:	b5 d1       	rcall	.+874    	; 0x1472 <__fpcmp_parts_f>
    1108:	01 c0       	rjmp	.+2      	; 0x110c <__gesf2+0x50>
    110a:	8f ef       	ldi	r24, 0xFF	; 255
    110c:	68 96       	adiw	r28, 0x18	; 24
    110e:	e6 e0       	ldi	r30, 0x06	; 6
    1110:	31 c2       	rjmp	.+1122   	; 0x1574 <__epilogue_restores__+0x18>

00001112 <__ltsf2>:
    1112:	a8 e1       	ldi	r26, 0x18	; 24
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ee e8       	ldi	r30, 0x8E	; 142
    1118:	f8 e0       	ldi	r31, 0x08	; 8
    111a:	10 c2       	rjmp	.+1056   	; 0x153c <__prologue_saves__+0x18>
    111c:	69 83       	std	Y+1, r22	; 0x01
    111e:	7a 83       	std	Y+2, r23	; 0x02
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	9c 83       	std	Y+4, r25	; 0x04
    1124:	2d 83       	std	Y+5, r18	; 0x05
    1126:	3e 83       	std	Y+6, r19	; 0x06
    1128:	4f 83       	std	Y+7, r20	; 0x07
    112a:	58 87       	std	Y+8, r21	; 0x08
    112c:	8e 01       	movw	r16, r28
    112e:	07 5f       	subi	r16, 0xF7	; 247
    1130:	1f 4f       	sbci	r17, 0xFF	; 255
    1132:	ce 01       	movw	r24, r28
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	b8 01       	movw	r22, r16
    1138:	33 d1       	rcall	.+614    	; 0x13a0 <__unpack_f>
    113a:	81 e1       	ldi	r24, 0x11	; 17
    113c:	e8 2e       	mov	r14, r24
    113e:	f1 2c       	mov	r15, r1
    1140:	ec 0e       	add	r14, r28
    1142:	fd 1e       	adc	r15, r29
    1144:	ce 01       	movw	r24, r28
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	b7 01       	movw	r22, r14
    114a:	2a d1       	rcall	.+596    	; 0x13a0 <__unpack_f>
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	82 30       	cpi	r24, 0x02	; 2
    1150:	38 f0       	brcs	.+14     	; 0x1160 <__ltsf2+0x4e>
    1152:	89 89       	ldd	r24, Y+17	; 0x11
    1154:	82 30       	cpi	r24, 0x02	; 2
    1156:	20 f0       	brcs	.+8      	; 0x1160 <__ltsf2+0x4e>
    1158:	c8 01       	movw	r24, r16
    115a:	b7 01       	movw	r22, r14
    115c:	8a d1       	rcall	.+788    	; 0x1472 <__fpcmp_parts_f>
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <__ltsf2+0x50>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	68 96       	adiw	r28, 0x18	; 24
    1164:	e6 e0       	ldi	r30, 0x06	; 6
    1166:	06 c2       	rjmp	.+1036   	; 0x1574 <__epilogue_restores__+0x18>

00001168 <__fixsfsi>:
    1168:	ac e0       	ldi	r26, 0x0C	; 12
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e9 eb       	ldi	r30, 0xB9	; 185
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	e9 c1       	rjmp	.+978    	; 0x1544 <__prologue_saves__+0x20>
    1172:	69 83       	std	Y+1, r22	; 0x01
    1174:	7a 83       	std	Y+2, r23	; 0x02
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	9c 83       	std	Y+4, r25	; 0x04
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	be 01       	movw	r22, r28
    1180:	6b 5f       	subi	r22, 0xFB	; 251
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	0d d1       	rcall	.+538    	; 0x13a0 <__unpack_f>
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	82 30       	cpi	r24, 0x02	; 2
    118a:	81 f1       	breq	.+96     	; 0x11ec <__fixsfsi+0x84>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	70 f1       	brcs	.+92     	; 0x11ec <__fixsfsi+0x84>
    1190:	84 30       	cpi	r24, 0x04	; 4
    1192:	21 f4       	brne	.+8      	; 0x119c <__fixsfsi+0x34>
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	88 23       	and	r24, r24
    1198:	69 f1       	breq	.+90     	; 0x11f4 <__fixsfsi+0x8c>
    119a:	0a c0       	rjmp	.+20     	; 0x11b0 <__fixsfsi+0x48>
    119c:	2f 81       	ldd	r18, Y+7	; 0x07
    119e:	38 85       	ldd	r19, Y+8	; 0x08
    11a0:	37 fd       	sbrc	r19, 7
    11a2:	24 c0       	rjmp	.+72     	; 0x11ec <__fixsfsi+0x84>
    11a4:	6e 81       	ldd	r22, Y+6	; 0x06
    11a6:	2f 31       	cpi	r18, 0x1F	; 31
    11a8:	31 05       	cpc	r19, r1
    11aa:	3c f0       	brlt	.+14     	; 0x11ba <__fixsfsi+0x52>
    11ac:	66 23       	and	r22, r22
    11ae:	11 f1       	breq	.+68     	; 0x11f4 <__fixsfsi+0x8c>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e8       	ldi	r21, 0x80	; 128
    11b8:	21 c0       	rjmp	.+66     	; 0x11fc <__fixsfsi+0x94>
    11ba:	8e e1       	ldi	r24, 0x1E	; 30
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	82 1b       	sub	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	29 85       	ldd	r18, Y+9	; 0x09
    11c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    11c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <__fixsfsi+0x6c>
    11cc:	56 95       	lsr	r21
    11ce:	47 95       	ror	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	8a 95       	dec	r24
    11d6:	d2 f7       	brpl	.-12     	; 0x11cc <__fixsfsi+0x64>
    11d8:	66 23       	and	r22, r22
    11da:	81 f0       	breq	.+32     	; 0x11fc <__fixsfsi+0x94>
    11dc:	50 95       	com	r21
    11de:	40 95       	com	r20
    11e0:	30 95       	com	r19
    11e2:	21 95       	neg	r18
    11e4:	3f 4f       	sbci	r19, 0xFF	; 255
    11e6:	4f 4f       	sbci	r20, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	08 c0       	rjmp	.+16     	; 0x11fc <__fixsfsi+0x94>
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <__fixsfsi+0x94>
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	3f ef       	ldi	r19, 0xFF	; 255
    11f8:	4f ef       	ldi	r20, 0xFF	; 255
    11fa:	5f e7       	ldi	r21, 0x7F	; 127
    11fc:	b9 01       	movw	r22, r18
    11fe:	ca 01       	movw	r24, r20
    1200:	2c 96       	adiw	r28, 0x0c	; 12
    1202:	e2 e0       	ldi	r30, 0x02	; 2
    1204:	bb c1       	rjmp	.+886    	; 0x157c <__epilogue_restores__+0x20>

00001206 <__pack_f>:
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	fc 01       	movw	r30, r24
    1214:	24 81       	ldd	r18, Z+4	; 0x04
    1216:	35 81       	ldd	r19, Z+5	; 0x05
    1218:	46 81       	ldd	r20, Z+6	; 0x06
    121a:	57 81       	ldd	r21, Z+7	; 0x07
    121c:	61 81       	ldd	r22, Z+1	; 0x01
    121e:	80 81       	ld	r24, Z
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	20 f4       	brcc	.+8      	; 0x122c <__pack_f+0x26>
    1224:	40 61       	ori	r20, 0x10	; 16
    1226:	ef ef       	ldi	r30, 0xFF	; 255
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	a3 c0       	rjmp	.+326    	; 0x1372 <__pack_f+0x16c>
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	09 f4       	brne	.+2      	; 0x1232 <__pack_f+0x2c>
    1230:	9b c0       	rjmp	.+310    	; 0x1368 <__pack_f+0x162>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	09 f4       	brne	.+2      	; 0x1238 <__pack_f+0x32>
    1236:	92 c0       	rjmp	.+292    	; 0x135c <__pack_f+0x156>
    1238:	21 15       	cp	r18, r1
    123a:	31 05       	cpc	r19, r1
    123c:	41 05       	cpc	r20, r1
    123e:	51 05       	cpc	r21, r1
    1240:	09 f4       	brne	.+2      	; 0x1244 <__pack_f+0x3e>
    1242:	8f c0       	rjmp	.+286    	; 0x1362 <__pack_f+0x15c>
    1244:	02 80       	ldd	r0, Z+2	; 0x02
    1246:	f3 81       	ldd	r31, Z+3	; 0x03
    1248:	e0 2d       	mov	r30, r0
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	e2 38       	cpi	r30, 0x82	; 130
    124e:	f8 07       	cpc	r31, r24
    1250:	0c f0       	brlt	.+2      	; 0x1254 <__pack_f+0x4e>
    1252:	5a c0       	rjmp	.+180    	; 0x1308 <__pack_f+0x102>
    1254:	c2 e8       	ldi	r28, 0x82	; 130
    1256:	df ef       	ldi	r29, 0xFF	; 255
    1258:	ce 1b       	sub	r28, r30
    125a:	df 0b       	sbc	r29, r31
    125c:	ca 31       	cpi	r28, 0x1A	; 26
    125e:	d1 05       	cpc	r29, r1
    1260:	6c f5       	brge	.+90     	; 0x12bc <__pack_f+0xb6>
    1262:	79 01       	movw	r14, r18
    1264:	8a 01       	movw	r16, r20
    1266:	0c 2e       	mov	r0, r28
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <__pack_f+0x6c>
    126a:	16 95       	lsr	r17
    126c:	07 95       	ror	r16
    126e:	f7 94       	ror	r15
    1270:	e7 94       	ror	r14
    1272:	0a 94       	dec	r0
    1274:	d2 f7       	brpl	.-12     	; 0x126a <__pack_f+0x64>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e0       	ldi	r26, 0x00	; 0
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	0c 2e       	mov	r0, r28
    1280:	04 c0       	rjmp	.+8      	; 0x128a <__pack_f+0x84>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	aa 1f       	adc	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	0a 94       	dec	r0
    128c:	d2 f7       	brpl	.-12     	; 0x1282 <__pack_f+0x7c>
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	a1 09       	sbc	r26, r1
    1292:	b1 09       	sbc	r27, r1
    1294:	82 23       	and	r24, r18
    1296:	93 23       	and	r25, r19
    1298:	a4 23       	and	r26, r20
    129a:	b5 23       	and	r27, r21
    129c:	21 e0       	ldi	r18, 0x01	; 1
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	a1 05       	cpc	r26, r1
    12a8:	b1 05       	cpc	r27, r1
    12aa:	19 f4       	brne	.+6      	; 0x12b2 <__pack_f+0xac>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	a9 01       	movw	r20, r18
    12b2:	2e 29       	or	r18, r14
    12b4:	3f 29       	or	r19, r15
    12b6:	40 2b       	or	r20, r16
    12b8:	51 2b       	or	r21, r17
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <__pack_f+0xbc>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	da 01       	movw	r26, r20
    12c4:	c9 01       	movw	r24, r18
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	90 70       	andi	r25, 0x00	; 0
    12ca:	a0 70       	andi	r26, 0x00	; 0
    12cc:	b0 70       	andi	r27, 0x00	; 0
    12ce:	80 34       	cpi	r24, 0x40	; 64
    12d0:	91 05       	cpc	r25, r1
    12d2:	a1 05       	cpc	r26, r1
    12d4:	b1 05       	cpc	r27, r1
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <__pack_f+0xe0>
    12d8:	27 ff       	sbrs	r18, 7
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <__pack_f+0xe8>
    12dc:	20 5c       	subi	r18, 0xC0	; 192
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	4f 4f       	sbci	r20, 0xFF	; 255
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__pack_f+0xe8>
    12e6:	21 5c       	subi	r18, 0xC1	; 193
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	4f 4f       	sbci	r20, 0xFF	; 255
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	e1 e0       	ldi	r30, 0x01	; 1
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	20 30       	cpi	r18, 0x00	; 0
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	38 07       	cpc	r19, r24
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	48 07       	cpc	r20, r24
    12fc:	80 e4       	ldi	r24, 0x40	; 64
    12fe:	58 07       	cpc	r21, r24
    1300:	28 f5       	brcc	.+74     	; 0x134c <__pack_f+0x146>
    1302:	e0 e0       	ldi	r30, 0x00	; 0
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	22 c0       	rjmp	.+68     	; 0x134c <__pack_f+0x146>
    1308:	e0 38       	cpi	r30, 0x80	; 128
    130a:	f1 05       	cpc	r31, r1
    130c:	6c f5       	brge	.+90     	; 0x1368 <__pack_f+0x162>
    130e:	e1 58       	subi	r30, 0x81	; 129
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	da 01       	movw	r26, r20
    1314:	c9 01       	movw	r24, r18
    1316:	8f 77       	andi	r24, 0x7F	; 127
    1318:	90 70       	andi	r25, 0x00	; 0
    131a:	a0 70       	andi	r26, 0x00	; 0
    131c:	b0 70       	andi	r27, 0x00	; 0
    131e:	80 34       	cpi	r24, 0x40	; 64
    1320:	91 05       	cpc	r25, r1
    1322:	a1 05       	cpc	r26, r1
    1324:	b1 05       	cpc	r27, r1
    1326:	39 f4       	brne	.+14     	; 0x1336 <__pack_f+0x130>
    1328:	27 ff       	sbrs	r18, 7
    132a:	09 c0       	rjmp	.+18     	; 0x133e <__pack_f+0x138>
    132c:	20 5c       	subi	r18, 0xC0	; 192
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	4f 4f       	sbci	r20, 0xFF	; 255
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	04 c0       	rjmp	.+8      	; 0x133e <__pack_f+0x138>
    1336:	21 5c       	subi	r18, 0xC1	; 193
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	4f 4f       	sbci	r20, 0xFF	; 255
    133c:	5f 4f       	sbci	r21, 0xFF	; 255
    133e:	57 ff       	sbrs	r21, 7
    1340:	05 c0       	rjmp	.+10     	; 0x134c <__pack_f+0x146>
    1342:	56 95       	lsr	r21
    1344:	47 95       	ror	r20
    1346:	37 95       	ror	r19
    1348:	27 95       	ror	r18
    134a:	31 96       	adiw	r30, 0x01	; 1
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	56 95       	lsr	r21
    1350:	47 95       	ror	r20
    1352:	37 95       	ror	r19
    1354:	27 95       	ror	r18
    1356:	8a 95       	dec	r24
    1358:	d1 f7       	brne	.-12     	; 0x134e <__pack_f+0x148>
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <__pack_f+0x16c>
    135c:	e0 e0       	ldi	r30, 0x00	; 0
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	05 c0       	rjmp	.+10     	; 0x136c <__pack_f+0x166>
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <__pack_f+0x16c>
    1368:	ef ef       	ldi	r30, 0xFF	; 255
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	8e 2f       	mov	r24, r30
    1374:	87 95       	ror	r24
    1376:	88 27       	eor	r24, r24
    1378:	87 95       	ror	r24
    137a:	94 2f       	mov	r25, r20
    137c:	9f 77       	andi	r25, 0x7F	; 127
    137e:	67 95       	ror	r22
    1380:	66 27       	eor	r22, r22
    1382:	67 95       	ror	r22
    1384:	e6 95       	lsr	r30
    1386:	e2 2e       	mov	r14, r18
    1388:	a9 2f       	mov	r26, r25
    138a:	a8 2b       	or	r26, r24
    138c:	fe 2f       	mov	r31, r30
    138e:	f6 2b       	or	r31, r22
    1390:	62 2f       	mov	r22, r18
    1392:	73 2f       	mov	r23, r19
    1394:	8a 2f       	mov	r24, r26
    1396:	9f 2f       	mov	r25, r31
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	e6 e0       	ldi	r30, 0x06	; 6
    139e:	ea c0       	rjmp	.+468    	; 0x1574 <__epilogue_restores__+0x18>

000013a0 <__unpack_f>:
    13a0:	dc 01       	movw	r26, r24
    13a2:	fb 01       	movw	r30, r22
    13a4:	2c 91       	ld	r18, X
    13a6:	11 96       	adiw	r26, 0x01	; 1
    13a8:	3c 91       	ld	r19, X
    13aa:	11 97       	sbiw	r26, 0x01	; 1
    13ac:	12 96       	adiw	r26, 0x02	; 2
    13ae:	8c 91       	ld	r24, X
    13b0:	12 97       	sbiw	r26, 0x02	; 2
    13b2:	48 2f       	mov	r20, r24
    13b4:	4f 77       	andi	r20, 0x7F	; 127
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	98 2f       	mov	r25, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	99 27       	eor	r25, r25
    13be:	99 1f       	adc	r25, r25
    13c0:	13 96       	adiw	r26, 0x03	; 3
    13c2:	6c 91       	ld	r22, X
    13c4:	13 97       	sbiw	r26, 0x03	; 3
    13c6:	86 2f       	mov	r24, r22
    13c8:	88 0f       	add	r24, r24
    13ca:	89 2b       	or	r24, r25
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	66 1f       	adc	r22, r22
    13d0:	66 27       	eor	r22, r22
    13d2:	66 1f       	adc	r22, r22
    13d4:	61 83       	std	Z+1, r22	; 0x01
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	39 f5       	brne	.+78     	; 0x1428 <__unpack_f+0x88>
    13da:	21 15       	cp	r18, r1
    13dc:	31 05       	cpc	r19, r1
    13de:	41 05       	cpc	r20, r1
    13e0:	51 05       	cpc	r21, r1
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__unpack_f+0x48>
    13e4:	82 e0       	ldi	r24, 0x02	; 2
    13e6:	29 c0       	rjmp	.+82     	; 0x143a <__unpack_f+0x9a>
    13e8:	82 e8       	ldi	r24, 0x82	; 130
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	93 83       	std	Z+3, r25	; 0x03
    13ee:	82 83       	std	Z+2, r24	; 0x02
    13f0:	67 e0       	ldi	r22, 0x07	; 7
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	44 1f       	adc	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	6a 95       	dec	r22
    13fc:	d1 f7       	brne	.-12     	; 0x13f2 <__unpack_f+0x52>
    13fe:	83 e0       	ldi	r24, 0x03	; 3
    1400:	80 83       	st	Z, r24
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <__unpack_f+0x76>
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	44 1f       	adc	r20, r20
    140a:	55 1f       	adc	r21, r21
    140c:	82 81       	ldd	r24, Z+2	; 0x02
    140e:	93 81       	ldd	r25, Z+3	; 0x03
    1410:	01 97       	sbiw	r24, 0x01	; 1
    1412:	93 83       	std	Z+3, r25	; 0x03
    1414:	82 83       	std	Z+2, r24	; 0x02
    1416:	20 30       	cpi	r18, 0x00	; 0
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	38 07       	cpc	r19, r24
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	48 07       	cpc	r20, r24
    1420:	80 e4       	ldi	r24, 0x40	; 64
    1422:	58 07       	cpc	r21, r24
    1424:	78 f3       	brcs	.-34     	; 0x1404 <__unpack_f+0x64>
    1426:	20 c0       	rjmp	.+64     	; 0x1468 <__unpack_f+0xc8>
    1428:	8f 3f       	cpi	r24, 0xFF	; 255
    142a:	91 05       	cpc	r25, r1
    142c:	79 f4       	brne	.+30     	; 0x144c <__unpack_f+0xac>
    142e:	21 15       	cp	r18, r1
    1430:	31 05       	cpc	r19, r1
    1432:	41 05       	cpc	r20, r1
    1434:	51 05       	cpc	r21, r1
    1436:	19 f4       	brne	.+6      	; 0x143e <__unpack_f+0x9e>
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	80 83       	st	Z, r24
    143c:	08 95       	ret
    143e:	44 ff       	sbrs	r20, 4
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <__unpack_f+0xa8>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 83       	st	Z, r24
    1446:	10 c0       	rjmp	.+32     	; 0x1468 <__unpack_f+0xc8>
    1448:	10 82       	st	Z, r1
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <__unpack_f+0xc8>
    144c:	8f 57       	subi	r24, 0x7F	; 127
    144e:	90 40       	sbci	r25, 0x00	; 0
    1450:	93 83       	std	Z+3, r25	; 0x03
    1452:	82 83       	std	Z+2, r24	; 0x02
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	80 83       	st	Z, r24
    1458:	87 e0       	ldi	r24, 0x07	; 7
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	44 1f       	adc	r20, r20
    1460:	55 1f       	adc	r21, r21
    1462:	8a 95       	dec	r24
    1464:	d1 f7       	brne	.-12     	; 0x145a <__unpack_f+0xba>
    1466:	50 64       	ori	r21, 0x40	; 64
    1468:	24 83       	std	Z+4, r18	; 0x04
    146a:	35 83       	std	Z+5, r19	; 0x05
    146c:	46 83       	std	Z+6, r20	; 0x06
    146e:	57 83       	std	Z+7, r21	; 0x07
    1470:	08 95       	ret

00001472 <__fpcmp_parts_f>:
    1472:	fc 01       	movw	r30, r24
    1474:	db 01       	movw	r26, r22
    1476:	90 81       	ld	r25, Z
    1478:	92 30       	cpi	r25, 0x02	; 2
    147a:	08 f4       	brcc	.+2      	; 0x147e <__fpcmp_parts_f+0xc>
    147c:	49 c0       	rjmp	.+146    	; 0x1510 <__fpcmp_parts_f+0x9e>
    147e:	8c 91       	ld	r24, X
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	08 f4       	brcc	.+2      	; 0x1486 <__fpcmp_parts_f+0x14>
    1484:	45 c0       	rjmp	.+138    	; 0x1510 <__fpcmp_parts_f+0x9e>
    1486:	94 30       	cpi	r25, 0x04	; 4
    1488:	51 f4       	brne	.+20     	; 0x149e <__fpcmp_parts_f+0x2c>
    148a:	61 81       	ldd	r22, Z+1	; 0x01
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	b1 f5       	brne	.+108    	; 0x14fc <__fpcmp_parts_f+0x8a>
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	2c 91       	ld	r18, X
    1494:	11 97       	sbiw	r26, 0x01	; 1
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	26 1b       	sub	r18, r22
    149a:	31 09       	sbc	r19, r1
    149c:	41 c0       	rjmp	.+130    	; 0x1520 <__fpcmp_parts_f+0xae>
    149e:	84 30       	cpi	r24, 0x04	; 4
    14a0:	21 f0       	breq	.+8      	; 0x14aa <__fpcmp_parts_f+0x38>
    14a2:	92 30       	cpi	r25, 0x02	; 2
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <__fpcmp_parts_f+0x44>
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	b1 f1       	breq	.+108    	; 0x1516 <__fpcmp_parts_f+0xa4>
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	8c 91       	ld	r24, X
    14ae:	11 97       	sbiw	r26, 0x01	; 1
    14b0:	88 23       	and	r24, r24
    14b2:	a1 f1       	breq	.+104    	; 0x151c <__fpcmp_parts_f+0xaa>
    14b4:	2d c0       	rjmp	.+90     	; 0x1510 <__fpcmp_parts_f+0x9e>
    14b6:	61 81       	ldd	r22, Z+1	; 0x01
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	01 f1       	breq	.+64     	; 0x14fc <__fpcmp_parts_f+0x8a>
    14bc:	11 96       	adiw	r26, 0x01	; 1
    14be:	8c 91       	ld	r24, X
    14c0:	11 97       	sbiw	r26, 0x01	; 1
    14c2:	68 17       	cp	r22, r24
    14c4:	d9 f4       	brne	.+54     	; 0x14fc <__fpcmp_parts_f+0x8a>
    14c6:	22 81       	ldd	r18, Z+2	; 0x02
    14c8:	33 81       	ldd	r19, Z+3	; 0x03
    14ca:	12 96       	adiw	r26, 0x02	; 2
    14cc:	8d 91       	ld	r24, X+
    14ce:	9c 91       	ld	r25, X
    14d0:	13 97       	sbiw	r26, 0x03	; 3
    14d2:	82 17       	cp	r24, r18
    14d4:	93 07       	cpc	r25, r19
    14d6:	94 f0       	brlt	.+36     	; 0x14fc <__fpcmp_parts_f+0x8a>
    14d8:	28 17       	cp	r18, r24
    14da:	39 07       	cpc	r19, r25
    14dc:	bc f0       	brlt	.+46     	; 0x150c <__fpcmp_parts_f+0x9a>
    14de:	24 81       	ldd	r18, Z+4	; 0x04
    14e0:	35 81       	ldd	r19, Z+5	; 0x05
    14e2:	46 81       	ldd	r20, Z+6	; 0x06
    14e4:	57 81       	ldd	r21, Z+7	; 0x07
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	8d 91       	ld	r24, X+
    14ea:	9d 91       	ld	r25, X+
    14ec:	0d 90       	ld	r0, X+
    14ee:	bc 91       	ld	r27, X
    14f0:	a0 2d       	mov	r26, r0
    14f2:	82 17       	cp	r24, r18
    14f4:	93 07       	cpc	r25, r19
    14f6:	a4 07       	cpc	r26, r20
    14f8:	b5 07       	cpc	r27, r21
    14fa:	18 f4       	brcc	.+6      	; 0x1502 <__fpcmp_parts_f+0x90>
    14fc:	66 23       	and	r22, r22
    14fe:	41 f0       	breq	.+16     	; 0x1510 <__fpcmp_parts_f+0x9e>
    1500:	0d c0       	rjmp	.+26     	; 0x151c <__fpcmp_parts_f+0xaa>
    1502:	28 17       	cp	r18, r24
    1504:	39 07       	cpc	r19, r25
    1506:	4a 07       	cpc	r20, r26
    1508:	5b 07       	cpc	r21, r27
    150a:	28 f4       	brcc	.+10     	; 0x1516 <__fpcmp_parts_f+0xa4>
    150c:	66 23       	and	r22, r22
    150e:	31 f0       	breq	.+12     	; 0x151c <__fpcmp_parts_f+0xaa>
    1510:	21 e0       	ldi	r18, 0x01	; 1
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <__fpcmp_parts_f+0xae>
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <__fpcmp_parts_f+0xae>
    151c:	2f ef       	ldi	r18, 0xFF	; 255
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	c9 01       	movw	r24, r18
    1522:	08 95       	ret

00001524 <__prologue_saves__>:
    1524:	2f 92       	push	r2
    1526:	3f 92       	push	r3
    1528:	4f 92       	push	r4
    152a:	5f 92       	push	r5
    152c:	6f 92       	push	r6
    152e:	7f 92       	push	r7
    1530:	8f 92       	push	r8
    1532:	9f 92       	push	r9
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	ca 1b       	sub	r28, r26
    154e:	db 0b       	sbc	r29, r27
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	09 94       	ijmp

0000155c <__epilogue_restores__>:
    155c:	2a 88       	ldd	r2, Y+18	; 0x12
    155e:	39 88       	ldd	r3, Y+17	; 0x11
    1560:	48 88       	ldd	r4, Y+16	; 0x10
    1562:	5f 84       	ldd	r5, Y+15	; 0x0f
    1564:	6e 84       	ldd	r6, Y+14	; 0x0e
    1566:	7d 84       	ldd	r7, Y+13	; 0x0d
    1568:	8c 84       	ldd	r8, Y+12	; 0x0c
    156a:	9b 84       	ldd	r9, Y+11	; 0x0b
    156c:	aa 84       	ldd	r10, Y+10	; 0x0a
    156e:	b9 84       	ldd	r11, Y+9	; 0x09
    1570:	c8 84       	ldd	r12, Y+8	; 0x08
    1572:	df 80       	ldd	r13, Y+7	; 0x07
    1574:	ee 80       	ldd	r14, Y+6	; 0x06
    1576:	fd 80       	ldd	r15, Y+5	; 0x05
    1578:	0c 81       	ldd	r16, Y+4	; 0x04
    157a:	1b 81       	ldd	r17, Y+3	; 0x03
    157c:	aa 81       	ldd	r26, Y+2	; 0x02
    157e:	b9 81       	ldd	r27, Y+1	; 0x01
    1580:	ce 0f       	add	r28, r30
    1582:	d1 1d       	adc	r29, r1
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	ed 01       	movw	r28, r26
    1590:	08 95       	ret

00001592 <memcpy>:
    1592:	fb 01       	movw	r30, r22
    1594:	dc 01       	movw	r26, r24
    1596:	02 c0       	rjmp	.+4      	; 0x159c <memcpy+0xa>
    1598:	01 90       	ld	r0, Z+
    159a:	0d 92       	st	X+, r0
    159c:	41 50       	subi	r20, 0x01	; 1
    159e:	50 40       	sbci	r21, 0x00	; 0
    15a0:	d8 f7       	brcc	.-10     	; 0x1598 <memcpy+0x6>
    15a2:	08 95       	ret

000015a4 <_exit>:
    15a4:	f8 94       	cli

000015a6 <__stop_program>:
    15a6:	ff cf       	rjmp	.-2      	; 0x15a6 <__stop_program>

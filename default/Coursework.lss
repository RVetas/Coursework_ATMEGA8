
Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800106  00800106  00000d54  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002fb  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000120d  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a20  00000000  00000000  00003284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001806  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  000054ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004dc  00000000  00000000  0000570c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009be  00000000  00000000  00005be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001de  00000000  00000000  000065a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000060  00000000  00000000  00006784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	d1 c0       	rjmp	.+418    	; 0x1a6 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	56 c0       	rjmp	.+172    	; 0xbe <__vector_8>
  12:	30 c0       	rjmp	.+96     	; 0x74 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e1       	ldi	r30, 0x1A	; 26
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 30       	cpi	r26, 0x06	; 6
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a6 e0       	ldi	r26, 0x06	; 6
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 30       	cpi	r26, 0x0D	; 13
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	dc d0       	rcall	.+440    	; 0x212 <main>
  5a:	dd c5       	rjmp	.+3002   	; 0xc16 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <set_up_ports>:
int timer_temp_divider = 0;
int should_update_temp = 1;
//Настройка портов
void set_up_ports(void) {
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
  5e:	87 b3       	in	r24, 0x17	; 23
  60:	8f 63       	ori	r24, 0x3F	; 63
  62:	87 bb       	out	0x17, r24	; 23
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
  64:	8b 9a       	sbi	0x11, 3	; 17
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
  66:	84 b3       	in	r24, 0x14	; 20
  68:	8f 60       	ori	r24, 0x0F	; 15
  6a:	84 bb       	out	0x14, r24	; 20
  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	80 63       	ori	r24, 0x30	; 48
  70:	84 bb       	out	0x14, r24	; 20
} 
  72:	08 95       	ret

00000074 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	2f 93       	push	r18
  80:	3f 93       	push	r19
  82:	4f 93       	push	r20
  84:	5f 93       	push	r21
  86:	6f 93       	push	r22
  88:	7f 93       	push	r23
  8a:	8f 93       	push	r24
  8c:	9f 93       	push	r25
  8e:	af 93       	push	r26
  90:	bf 93       	push	r27
  92:	ef 93       	push	r30
  94:	ff 93       	push	r31
	printDisplay(display);
  96:	8a e7       	ldi	r24, 0x7A	; 122
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	6c d1       	rcall	.+728    	; 0x374 <printDisplay>
}
  9c:	ff 91       	pop	r31
  9e:	ef 91       	pop	r30
  a0:	bf 91       	pop	r27
  a2:	af 91       	pop	r26
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	7f 91       	pop	r23
  aa:	6f 91       	pop	r22
  ac:	5f 91       	pop	r21
  ae:	4f 91       	pop	r20
  b0:	3f 91       	pop	r19
  b2:	2f 91       	pop	r18
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_8>:

ISR(TIMER1_OVF_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
  if (state == Register) {
  e0:	80 91 06 01 	lds	r24, 0x0106
  e4:	88 23       	and	r24, r24
  e6:	c1 f4       	brne	.+48     	; 0x118 <__vector_8+0x5a>
    //Если значение timer1_divider меньше 56, то 15 минут еще не прошло
    if (timer1_divider < 56) {
  e8:	80 91 07 01 	lds	r24, 0x0107
  ec:	90 91 08 01 	lds	r25, 0x0108
  f0:	88 33       	cpi	r24, 0x38	; 56
  f2:	91 05       	cpc	r25, r1
  f4:	34 f4       	brge	.+12     	; 0x102 <__vector_8+0x44>
      timer1_divider++;
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 08 01 	sts	0x0108, r25
  fc:	80 93 07 01 	sts	0x0107, r24
 100:	0b c0       	rjmp	.+22     	; 0x118 <__vector_8+0x5a>
    } else {
      //Значение timer1_divider достигло 56 => настало время записать данные в EEPROM
      signed char temp = getTemperature();
 102:	b3 d1       	rcall	.+870    	; 0x46a <getTemperature>
 104:	68 2f       	mov	r22, r24
      EEWriteByte(address, temp);
 106:	80 91 09 01 	lds	r24, 0x0109
 10a:	90 91 0a 01 	lds	r25, 0x010A
 10e:	19 d2       	rcall	.+1074   	; 0x542 <EEWriteByte>
      timer1_divider = 0;
 110:	10 92 08 01 	sts	0x0108, r1
 114:	10 92 07 01 	sts	0x0107, r1
    }
  }

  if (timer_temp_divider < 4) {
 118:	80 91 0b 01 	lds	r24, 0x010B
 11c:	90 91 0c 01 	lds	r25, 0x010C
 120:	84 30       	cpi	r24, 0x04	; 4
 122:	91 05       	cpc	r25, r1
 124:	34 f4       	brge	.+12     	; 0x132 <__vector_8+0x74>
    timer_temp_divider++;
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 0c 01 	sts	0x010C, r25
 12c:	80 93 0b 01 	sts	0x010B, r24
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_8+0x88>
  } else {
    should_update_temp = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 79 00 	sts	0x0079, r25
 13a:	80 93 78 00 	sts	0x0078, r24
    timer_temp_divider = 0;
 13e:	10 92 0c 01 	sts	0x010C, r1
 142:	10 92 0b 01 	sts	0x010B, r1
  }
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <handle_buttons>:

void handle_buttons(unsigned char button_number) {
 168:	1f 93       	push	r17
 16a:	18 2f       	mov	r17, r24
  // unsigned char button_number = number_key_pressed();

  switch (button_number) {
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	69 f0       	breq	.+26     	; 0x18a <handle_buttons+0x22>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	18 f0       	brcs	.+6      	; 0x17a <handle_buttons+0x12>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	a9 f4       	brne	.+42     	; 0x1a2 <handle_buttons+0x3a>
 178:	0d c0       	rjmp	.+26     	; 0x194 <handle_buttons+0x2c>
    case 0:
    strcpy(display, "0000");
 17a:	8a e7       	ldi	r24, 0x7A	; 122
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	60 e6       	ldi	r22, 0x60	; 96
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	73 d2       	rcall	.+1254   	; 0x66a <strcpy>
    state = Register;
 184:	10 92 06 01 	sts	0x0106, r1
    break;
 188:	0c c0       	rjmp	.+24     	; 0x1a2 <handle_buttons+0x3a>

    case 1:
    strcpy(display, "1111");
 18a:	8a e7       	ldi	r24, 0x7A	; 122
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	65 e6       	ldi	r22, 0x65	; 101
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	04 c0       	rjmp	.+8      	; 0x19c <handle_buttons+0x34>
    state = Transmit;
    break;

    case 2:
    strcpy(display, "2222");
 194:	8a e7       	ldi	r24, 0x7A	; 122
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	6a e6       	ldi	r22, 0x6A	; 106
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	66 d2       	rcall	.+1228   	; 0x66a <strcpy>
    state = TURBO;
 19e:	10 93 06 01 	sts	0x0106, r17
    break;

    default:
    break;
  };
}
 1a2:	1f 91       	pop	r17
 1a4:	08 95       	ret

000001a6 <__vector_1>:

ISR(INT0_vect) {
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
  unsigned char button_number = number_key_pressed();
 1c8:	eb d0       	rcall	.+470    	; 0x3a0 <number_key_pressed>
  handle_buttons(button_number);
 1ca:	ce df       	rcall	.-100    	; 0x168 <handle_buttons>
}
 1cc:	ff 91       	pop	r31
 1ce:	ef 91       	pop	r30
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <timer_init>:

//Инициализация таймера
void timer_init() {
	TIMSK |= (1 << TOIE0) | (1 << TOIE1) | (1 << TOIE2);
 1ee:	89 b7       	in	r24, 0x39	; 57
 1f0:	85 64       	ori	r24, 0x45	; 69
 1f2:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1 << CS02);
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	83 bf       	out	0x33, r24	; 51
  TCCR1B = (1 << CS12) | (1 << CS10);
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8e bd       	out	0x2e, r24	; 46
  // TCNT1 = 32768;
}
 1fc:	08 95       	ret

000001fe <init>:

void init() {
  // cli();
  set_up_ports();
 1fe:	2f df       	rcall	.-418    	; 0x5e <set_up_ports>
  timer_init();
 200:	f6 df       	rcall	.-20     	; 0x1ee <timer_init>

  GICR |= (1 << INT0);
 202:	8b b7       	in	r24, 0x3b	; 59
 204:	80 64       	ori	r24, 0x40	; 64
 206:	8b bf       	out	0x3b, r24	; 59
  MCUCR |= (1 << ISC00) | (1 << ISC01);
 208:	85 b7       	in	r24, 0x35	; 53
 20a:	83 60       	ori	r24, 0x03	; 3
 20c:	85 bf       	out	0x35, r24	; 53
  sei();
 20e:	78 94       	sei
  // cli();
}
 210:	08 95       	ret

00000212 <main>:


int main(void) {
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
  init();
 21e:	ef df       	rcall	.-34     	; 0x1fe <init>
  ds1621_init();
 220:	e2 d0       	rcall	.+452    	; 0x3e6 <ds1621_init>
  EEOpen();
 222:	89 d1       	rcall	.+786    	; 0x536 <EEOpen>
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 224:	81 b3       	in	r24, 0x11	; 17
 226:	80 6e       	ori	r24, 0xE0	; 224
 228:	81 bb       	out	0x11, r24	; 17
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 22a:	82 b3       	in	r24, 0x12	; 18
 22c:	80 6e       	ori	r24, 0xE0	; 224
 22e:	82 bb       	out	0x12, r24	; 18
	while(1) {
    if (should_update_temp) {
      signed int temp = getTemperature();
      sprintf(display, "%4d", temp);
 230:	ca e7       	ldi	r28, 0x7A	; 122
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	0f e6       	ldi	r16, 0x6F	; 111
 236:	10 e0       	ldi	r17, 0x00	; 0
  ds1621_init();
  EEOpen();
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
	while(1) {
    if (should_update_temp) {
 238:	80 91 78 00 	lds	r24, 0x0078
 23c:	90 91 79 00 	lds	r25, 0x0079
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	09 f1       	breq	.+66     	; 0x286 <main+0x74>
      signed int temp = getTemperature();
 244:	12 d1       	rcall	.+548    	; 0x46a <getTemperature>
      sprintf(display, "%4d", temp);
 246:	00 d0       	rcall	.+0      	; 0x248 <main+0x36>
 248:	00 d0       	rcall	.+0      	; 0x24a <main+0x38>
 24a:	00 d0       	rcall	.+0      	; 0x24c <main+0x3a>
 24c:	ed b7       	in	r30, 0x3d	; 61
 24e:	fe b7       	in	r31, 0x3e	; 62
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	ad b7       	in	r26, 0x3d	; 61
 254:	be b7       	in	r27, 0x3e	; 62
 256:	12 96       	adiw	r26, 0x02	; 2
 258:	dc 93       	st	X, r29
 25a:	ce 93       	st	-X, r28
 25c:	11 97       	sbiw	r26, 0x01	; 1
 25e:	13 83       	std	Z+3, r17	; 0x03
 260:	02 83       	std	Z+2, r16	; 0x02
  EEOpen();
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
	while(1) {
    if (should_update_temp) {
      signed int temp = getTemperature();
 262:	99 27       	eor	r25, r25
 264:	87 fd       	sbrc	r24, 7
 266:	90 95       	com	r25
 268:	95 83       	std	Z+5, r25	; 0x05
 26a:	84 83       	std	Z+4, r24	; 0x04
      sprintf(display, "%4d", temp);
 26c:	05 d2       	rcall	.+1034   	; 0x678 <sprintf>
      should_update_temp = 0;
 26e:	10 92 79 00 	sts	0x0079, r1
 272:	10 92 78 00 	sts	0x0078, r1
 276:	8d b7       	in	r24, 0x3d	; 61
 278:	9e b7       	in	r25, 0x3e	; 62
 27a:	06 96       	adiw	r24, 0x06	; 6
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	9e bf       	out	0x3e, r25	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	8d bf       	out	0x3d, r24	; 61
    }

    if (state == TURBO) {
 286:	80 91 06 01 	lds	r24, 0x0106
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	a1 f5       	brne	.+104    	; 0x2f6 <main+0xe4>
      signed int temp = getTemperature();
 28e:	ed d0       	rcall	.+474    	; 0x46a <getTemperature>
 290:	68 2f       	mov	r22, r24
 292:	e8 2e       	mov	r14, r24
 294:	ff 24       	eor	r15, r15
 296:	e7 fc       	sbrc	r14, 7
 298:	f0 94       	com	r15

      if (EEWriteByte(address, temp) == 0 ) {
 29a:	80 91 09 01 	lds	r24, 0x0109
 29e:	90 91 0a 01 	lds	r25, 0x010A
 2a2:	4f d1       	rcall	.+670    	; 0x542 <EEWriteByte>
 2a4:	88 23       	and	r24, r24
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <main+0xa0>
        strcpy(display, "0001");
 2a8:	8a e7       	ldi	r24, 0x7A	; 122
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	63 e7       	ldi	r22, 0x73	; 115
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	dc d1       	rcall	.+952    	; 0x66a <strcpy>
      }
      address++;
 2b2:	80 91 09 01 	lds	r24, 0x0109
 2b6:	90 91 0a 01 	lds	r25, 0x010A
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 0a 01 	sts	0x010A, r25
 2c0:	80 93 09 01 	sts	0x0109, r24
      sprintf(display, "%4d", temp);
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <main+0xb4>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <main+0xb6>
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <main+0xb8>
 2ca:	ed b7       	in	r30, 0x3d	; 61
 2cc:	fe b7       	in	r31, 0x3e	; 62
 2ce:	31 96       	adiw	r30, 0x01	; 1
 2d0:	ad b7       	in	r26, 0x3d	; 61
 2d2:	be b7       	in	r27, 0x3e	; 62
 2d4:	12 96       	adiw	r26, 0x02	; 2
 2d6:	dc 93       	st	X, r29
 2d8:	ce 93       	st	-X, r28
 2da:	11 97       	sbiw	r26, 0x01	; 1
 2dc:	13 83       	std	Z+3, r17	; 0x03
 2de:	02 83       	std	Z+2, r16	; 0x02
 2e0:	f5 82       	std	Z+5, r15	; 0x05
 2e2:	e4 82       	std	Z+4, r14	; 0x04
 2e4:	c9 d1       	rcall	.+914    	; 0x678 <sprintf>
 2e6:	8d b7       	in	r24, 0x3d	; 61
 2e8:	9e b7       	in	r25, 0x3e	; 62
 2ea:	06 96       	adiw	r24, 0x06	; 6
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	9e bf       	out	0x3e, r25	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	8d bf       	out	0x3d, r24	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	a7 ee       	ldi	r26, 0xE7	; 231
 2f8:	b3 e0       	ldi	r27, 0x03	; 3
 2fa:	11 97       	sbiw	r26, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <main+0xe8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0xee>
 300:	00 00       	nop
 302:	9a cf       	rjmp	.-204    	; 0x238 <main+0x26>

00000304 <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
 304:	80 52       	subi	r24, 0x20	; 32
 306:	80 34       	cpi	r24, 0x40	; 64
 308:	48 f4       	brcc	.+18     	; 0x31c <char_to_code+0x18>
 30a:	e8 2f       	mov	r30, r24
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	e1 58       	subi	r30, 0x81	; 129
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	20 81       	ld	r18, Z
 318:	31 81       	ldd	r19, Z+1	; 0x01
 31a:	02 c0       	rjmp	.+4      	; 0x320 <char_to_code+0x1c>
 31c:	2f ef       	ldi	r18, 0xFF	; 255
 31e:	30 e0       	ldi	r19, 0x00	; 0
            break;
        default:
            code = 0xff;
    };
    return code;
}
 320:	c9 01       	movw	r24, r18
 322:	08 95       	ret

00000324 <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
 324:	1f 93       	push	r17
 326:	18 2f       	mov	r17, r24
 328:	86 2f       	mov	r24, r22
    unsigned int displayDigit = char_to_code(digit);
 32a:	ec df       	rcall	.-40     	; 0x304 <char_to_code>
 32c:	ac 01       	movw	r20, r24
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
 32e:	88 b3       	in	r24, 0x18	; 24
 330:	8f 63       	ori	r24, 0x3F	; 63
 332:	88 bb       	out	0x18, r24	; 24
    PORTD |= (1<<PD3);// clr data pin
 334:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
 336:	85 b3       	in	r24, 0x15	; 21
 338:	80 7f       	andi	r24, 0xF0	; 240
 33a:	85 bb       	out	0x15, r24	; 21
    PORTC |= (1 << number); // set addr
 33c:	85 b3       	in	r24, 0x15	; 21
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <send_digit_to_display+0x24>
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	1a 95       	dec	r17
 34a:	e2 f7       	brpl	.-8      	; 0x344 <send_digit_to_display+0x20>
 34c:	82 2b       	or	r24, r18
 34e:	85 bb       	out	0x15, r24	; 21
    
    PORTB = displayDigit; // set data1
 350:	48 bb       	out	0x18, r20	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
 352:	82 b3       	in	r24, 0x12	; 18
 354:	93 e0       	ldi	r25, 0x03	; 3
 356:	56 95       	lsr	r21
 358:	47 95       	ror	r20
 35a:	9a 95       	dec	r25
 35c:	e1 f7       	brne	.-8      	; 0x356 <send_digit_to_display+0x32>
 35e:	47 6f       	ori	r20, 0xF7	; 247
 360:	48 23       	and	r20, r24
 362:	42 bb       	out	0x12, r20	; 18
 364:	87 ee       	ldi	r24, 0xE7	; 231
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <send_digit_to_display+0x44>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <send_digit_to_display+0x4a>
 36e:	00 00       	nop
    _delay_ms(1);
}
 370:	1f 91       	pop	r17
 372:	08 95       	ret

00000374 <printDisplay>:

void printDisplay() {
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
    for (short int i = 0; i < 4; ++i) {
 37c:	0a e7       	ldi	r16, 0x7A	; 122
 37e:	10 e0       	ldi	r17, 0x00	; 0
 380:	c0 e0       	ldi	r28, 0x00	; 0
 382:	d0 e0       	ldi	r29, 0x00	; 0
        send_digit_to_display(i, display[i]);
 384:	f8 01       	movw	r30, r16
 386:	61 91       	ld	r22, Z+
 388:	8f 01       	movw	r16, r30
 38a:	ce 01       	movw	r24, r28
 38c:	cb df       	rcall	.-106    	; 0x324 <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
 38e:	21 96       	adiw	r28, 0x01	; 1
 390:	c4 30       	cpi	r28, 0x04	; 4
 392:	d1 05       	cpc	r29, r1
 394:	b9 f7       	brne	.-18     	; 0x384 <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 3a0:	82 b3       	in	r24, 0x12	; 18
 3a2:	8f 71       	andi	r24, 0x1F	; 31
 3a4:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD5);
 3a6:	95 9a       	sbi	0x12, 5	; 18
  if (PIND & (1 << PD2)) {
 3a8:	82 9b       	sbis	0x10, 2	; 16
 3aa:	05 c0       	rjmp	.+10     	; 0x3b6 <number_key_pressed+0x16>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	80 6e       	ori	r24, 0xE0	; 224
 3b0:	82 bb       	out	0x12, r24	; 18
    return 0;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 3b6:	82 b3       	in	r24, 0x12	; 18
 3b8:	8f 71       	andi	r24, 0x1F	; 31
 3ba:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD6);
 3bc:	96 9a       	sbi	0x12, 6	; 18
  if (PIND & (1 << PD2)) {
 3be:	82 9b       	sbis	0x10, 2	; 16
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <number_key_pressed+0x2c>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 3c2:	82 b3       	in	r24, 0x12	; 18
 3c4:	80 6e       	ori	r24, 0xE0	; 224
 3c6:	82 bb       	out	0x12, r24	; 18
    return 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 3cc:	82 b3       	in	r24, 0x12	; 18
 3ce:	8f 71       	andi	r24, 0x1F	; 31
 3d0:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD7);
 3d2:	97 9a       	sbi	0x12, 7	; 18
  if (PIND & (1 << PD2)) {
 3d4:	82 9b       	sbis	0x10, 2	; 16
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <number_key_pressed+0x42>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 3d8:	82 b3       	in	r24, 0x12	; 18
 3da:	80 6e       	ori	r24, 0xE0	; 224
 3dc:	82 bb       	out	0x12, r24	; 18
    return 2;
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	08 95       	ret
  // }

  // if (!isButton2) {
  //   return 2;
  // }
  return 42;
 3e2:	8a e2       	ldi	r24, 0x2A	; 42
}
 3e4:	08 95       	ret

000003e6 <ds1621_init>:
//******************************************************************    
void ds1621_init()
{
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
 3e6:	4f d0       	rcall	.+158    	; 0x486 <i2c_start>
   if(errorStatus == 1)
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	51 f0       	breq	.+20     	; 0x400 <ds1621_init+0x1a>
   {
   	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 3ec:	80 e9       	ldi	r24, 0x90	; 144
 3ee:	63 d0       	rcall	.+198    	; 0x4b6 <i2c_sendAddress>
   
   if(errorStatus == 1)
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	31 f0       	breq	.+12     	; 0x400 <ds1621_init+0x1a>
   {
  	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
 3f4:	8c ea       	ldi	r24, 0xAC	; 172
 3f6:	75 d0       	rcall	.+234    	; 0x4e2 <i2c_sendData>
   if(errorStatus == 1)
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	11 f0       	breq	.+4      	; 0x400 <ds1621_init+0x1a>
   {
  	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
 3fc:	83 e0       	ldi	r24, 0x03	; 3
 3fe:	71 d0       	rcall	.+226    	; 0x4e2 <i2c_sendData>
   {
  	 i2c_stop();
	 return;
   } 

   i2c_stop();
 400:	97 d0       	rcall	.+302    	; 0x530 <i2c_stop>
 402:	08 95       	ret

00000404 <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
 404:	1f 93       	push	r17
 406:	18 2f       	mov	r17, r24
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
 408:	3e d0       	rcall	.+124    	; 0x486 <i2c_start>
   if(errorStatus == 1)
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	31 f0       	breq	.+12     	; 0x41a <ds1621_sendCommand+0x16>
   {
   	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 40e:	80 e9       	ldi	r24, 0x90	; 144
 410:	52 d0       	rcall	.+164    	; 0x4b6 <i2c_sendAddress>
   
   if(errorStatus == 1)
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	11 f0       	breq	.+4      	; 0x41a <ds1621_sendCommand+0x16>
   {
	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendData(command);
 416:	81 2f       	mov	r24, r17
 418:	64 d0       	rcall	.+200    	; 0x4e2 <i2c_sendData>
   {
	 i2c_stop();
	 return;
   } 

   i2c_stop();
 41a:	8a d0       	rcall	.+276    	; 0x530 <i2c_stop>
}
 41c:	1f 91       	pop	r17
 41e:	08 95       	ret

00000420 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
 420:	1f 93       	push	r17
 422:	df 93       	push	r29
 424:	cf 93       	push	r28
 426:	0f 92       	push	r0
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	18 2f       	mov	r17, r24
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
 42e:	2b d0       	rcall	.+86     	; 0x486 <i2c_start>
   if(errorStatus == 1)
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	79 f0       	breq	.+30     	; 0x452 <ds1621_readValue+0x32>
   {
   	 i2c_stop();
	 return (0);
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 434:	80 e9       	ldi	r24, 0x90	; 144
 436:	3f d0       	rcall	.+126    	; 0x4b6 <i2c_sendAddress>
   
   if(errorStatus == 1)
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	59 f0       	breq	.+22     	; 0x452 <ds1621_readValue+0x32>
   {
	 i2c_stop();
	 return (0);
   } 
   
   errorStatus = i2c_sendData(value);
 43c:	81 2f       	mov	r24, r17
 43e:	51 d0       	rcall	.+162    	; 0x4e2 <i2c_sendData>
   if(errorStatus == 1)
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	39 f0       	breq	.+14     	; 0x452 <ds1621_readValue+0x32>
   {
	 i2c_stop();
	 return (0);
   } 

    errorStatus = i2c_repeatStart();
 444:	2c d0       	rcall	.+88     	; 0x49e <i2c_repeatStart>
   if(errorStatus == 1)
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	21 f0       	breq	.+8      	; 0x452 <ds1621_readValue+0x32>
   {
   	 i2c_stop();
	 return (0);
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
 44a:	81 e9       	ldi	r24, 0x91	; 145
 44c:	34 d0       	rcall	.+104    	; 0x4b6 <i2c_sendAddress>
   
   if(errorStatus == 1)
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	19 f4       	brne	.+6      	; 0x458 <ds1621_readValue+0x38>
   {
	 i2c_stop();
 452:	6e d0       	rcall	.+220    	; 0x530 <i2c_stop>
	 return (0);
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	04 c0       	rjmp	.+8      	; 0x460 <__stack+0x1>
   } 
 
   data = i2c_receiveData_NACK(); 
 458:	5e d0       	rcall	.+188    	; 0x516 <i2c_receiveData_NACK>
   
   i2c_stop();
 45a:	89 83       	std	Y+1, r24	; 0x01
 45c:	69 d0       	rcall	.+210    	; 0x530 <i2c_stop>
 45e:	89 81       	ldd	r24, Y+1	; 0x01
   
   return (data);
}	  
 460:	0f 90       	pop	r0
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	1f 91       	pop	r17
 468:	08 95       	ret

0000046a <getTemperature>:
//******************************************************************
//Function to read 
//******************************************************************    
signed char getTemperature(void)
{ 
  ds1621_sendCommand ( START_CONVERT );
 46a:	8e ee       	ldi	r24, 0xEE	; 238
 46c:	cb df       	rcall	.-106    	; 0x404 <ds1621_sendCommand>
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	94 e3       	ldi	r25, 0x34	; 52
 472:	ac e0       	ldi	r26, 0x0C	; 12
 474:	81 50       	subi	r24, 0x01	; 1
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	a0 40       	sbci	r26, 0x00	; 0
 47a:	e1 f7       	brne	.-8      	; 0x474 <getTemperature+0xa>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <getTemperature+0x14>
 47e:	00 00       	nop
  
  _delay_ms(1000);
  
  return ds1621_readValue ( READ_TEMP );
 480:	8a ea       	ldi	r24, 0xAA	; 170
 482:	ce df       	rcall	.-100    	; 0x420 <ds1621_readValue>
 484:	08 95       	ret

00000486 <i2c_start>:
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
 486:	84 ea       	ldi	r24, 0xA4	; 164
 488:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 48a:	06 b6       	in	r0, 0x36	; 54
 48c:	07 fe       	sbrs	r0, 7
 48e:	fd cf       	rjmp	.-6      	; 0x48a <i2c_start+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
 490:	91 b1       	in	r25, 0x01	; 1
 492:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	98 30       	cpi	r25, 0x08	; 8
 498:	09 f4       	brne	.+2      	; 0x49c <i2c_start+0x16>
 49a:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 49c:	08 95       	ret

0000049e <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
 49e:	84 ea       	ldi	r24, 0xA4	; 164
 4a0:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1 << TWINT)))
 4a2:	06 b6       	in	r0, 0x36	; 54
 4a4:	07 fe       	sbrs	r0, 7
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <i2c_repeatStart+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
 4a8:	91 b1       	in	r25, 0x01	; 1
 4aa:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 31       	cpi	r25, 0x10	; 16
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <i2c_repeatStart+0x16>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 4b4:	08 95       	ret

000004b6 <i2c_sendAddress>:
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
  unsigned char STATUS;

  if ((address & 0x01) == 0)
 4b6:	80 ff       	sbrs	r24, 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <i2c_sendAddress+0x8>
    STATUS = MT_SLA_ACK;
  else
    STATUS = MR_SLA_ACK;
 4ba:	40 e4       	ldi	r20, 0x40	; 64
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <i2c_sendAddress+0xa>
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
  unsigned char STATUS;

  if ((address & 0x01) == 0)
    STATUS = MT_SLA_ACK;
 4be:	48 e1       	ldi	r20, 0x18	; 24
  else
    STATUS = MR_SLA_ACK;

  TWDR = address;
 4c0:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
 4c2:	84 e8       	ldi	r24, 0x84	; 132
 4c4:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
 4c6:	06 b6       	in	r0, 0x36	; 54
 4c8:	07 fe       	sbrs	r0, 7
 4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <i2c_sendAddress+0x10>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
 4cc:	21 b1       	in	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	28 7f       	andi	r18, 0xF8	; 248
 4d2:	30 70       	andi	r19, 0x00	; 0
 4d4:	50 e0       	ldi	r21, 0x00	; 0
    return (0);
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	24 17       	cp	r18, r20
 4da:	35 07       	cpc	r19, r21
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <i2c_sendAddress+0x2a>
 4de:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 4e0:	08 95       	ret

000004e2 <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
  TWDR = data;
 4e2:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
 4e4:	84 e8       	ldi	r24, 0x84	; 132
 4e6:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
 4e8:	06 b6       	in	r0, 0x36	; 54
 4ea:	07 fe       	sbrs	r0, 7
 4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <i2c_sendData+0x6>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
 4ee:	91 b1       	in	r25, 0x01	; 1
 4f0:	98 7f       	andi	r25, 0xF8	; 248
    return (1);
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	98 32       	cpi	r25, 0x28	; 40
 4f6:	09 f4       	brne	.+2      	; 0x4fa <i2c_sendData+0x18>
 4f8:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (0);
}
 4fa:	08 95       	ret

000004fc <i2c_receiveData_ACK>:
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
 4fc:	84 ec       	ldi	r24, 0xC4	; 196
 4fe:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 500:	06 b6       	in	r0, 0x36	; 54
 502:	07 fe       	sbrs	r0, 7
 504:	fd cf       	rjmp	.-6      	; 0x500 <i2c_receiveData_ACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
 506:	81 b1       	in	r24, 0x01	; 1
 508:	88 7f       	andi	r24, 0xF8	; 248
 50a:	80 35       	cpi	r24, 0x50	; 80
 50c:	11 f4       	brne	.+4      	; 0x512 <i2c_receiveData_ACK+0x16>
    return (ERROR_CODE);

  data = TWDR;
 50e:	83 b1       	in	r24, 0x03	; 3
  return (data);
 510:	08 95       	ret

  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
    return (ERROR_CODE);
 512:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
 514:	08 95       	ret

00000516 <i2c_receiveData_NACK>:
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
 516:	84 e8       	ldi	r24, 0x84	; 132
 518:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 51a:	06 b6       	in	r0, 0x36	; 54
 51c:	07 fe       	sbrs	r0, 7
 51e:	fd cf       	rjmp	.-6      	; 0x51a <i2c_receiveData_NACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
 520:	81 b1       	in	r24, 0x01	; 1
 522:	88 7f       	andi	r24, 0xF8	; 248
 524:	88 35       	cpi	r24, 0x58	; 88
 526:	11 f4       	brne	.+4      	; 0x52c <i2c_receiveData_NACK+0x16>
    return (ERROR_CODE);

  data = TWDR;
 528:	83 b1       	in	r24, 0x03	; 3
  return (data);
 52a:	08 95       	ret

  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
    return (ERROR_CODE);
 52c:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
 52e:	08 95       	ret

00000530 <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
 530:	84 e9       	ldi	r24, 0x94	; 148
 532:	86 bf       	out	0x36, r24	; 54
}
 534:	08 95       	ret

00000536 <EEOpen>:
#include "24c64.h"

void EEOpen()
{
	//Set up TWI Module
	TWBR = 5;
 536:	85 e0       	ldi	r24, 0x05	; 5
 538:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
 53a:	81 b1       	in	r24, 0x01	; 1
 53c:	8c 7f       	andi	r24, 0xFC	; 252
 53e:	81 b9       	out	0x01, r24	; 1

}
 540:	08 95       	ret

00000542 <EEWriteByte>:
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 542:	54 ea       	ldi	r21, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 544:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 546:	34 e8       	ldi	r19, 0x84	; 132
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 548:	56 bf       	out	0x36, r21	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 54a:	06 b6       	in	r0, 0x36	; 54
 54c:	07 fe       	sbrs	r0, 7
 54e:	fd cf       	rjmp	.-6      	; 0x54a <EEWriteByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 550:	21 b1       	in	r18, 0x01	; 1
 552:	28 7f       	andi	r18, 0xF8	; 248
 554:	28 30       	cpi	r18, 0x08	; 8
 556:	a1 f5       	brne	.+104    	; 0x5c0 <EEWriteByte+0x7e>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 558:	43 b9       	out	0x03, r20	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 55a:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 55c:	06 b6       	in	r0, 0x36	; 54
 55e:	07 fe       	sbrs	r0, 7
 560:	fd cf       	rjmp	.-6      	; 0x55c <EEWriteByte+0x1a>
	
	}while((TWSR & 0xF8) != 0x18);
 562:	21 b1       	in	r18, 0x01	; 1
 564:	28 7f       	andi	r18, 0xF8	; 248
 566:	28 31       	cpi	r18, 0x18	; 24
 568:	79 f7       	brne	.-34     	; 0x548 <EEWriteByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 56a:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 56c:	94 e8       	ldi	r25, 0x84	; 132
 56e:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 570:	06 b6       	in	r0, 0x36	; 54
 572:	07 fe       	sbrs	r0, 7
 574:	fd cf       	rjmp	.-6      	; 0x570 <EEWriteByte+0x2e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 576:	91 b1       	in	r25, 0x01	; 1
 578:	98 7f       	andi	r25, 0xF8	; 248
 57a:	98 32       	cpi	r25, 0x28	; 40
 57c:	09 f5       	brne	.+66     	; 0x5c0 <EEWriteByte+0x7e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 57e:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 584:	06 b6       	in	r0, 0x36	; 54
 586:	07 fe       	sbrs	r0, 7
 588:	fd cf       	rjmp	.-6      	; 0x584 <EEWriteByte+0x42>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 58a:	81 b1       	in	r24, 0x01	; 1
 58c:	88 7f       	andi	r24, 0xF8	; 248
 58e:	88 32       	cpi	r24, 0x28	; 40
 590:	b9 f4       	brne	.+46     	; 0x5c0 <EEWriteByte+0x7e>
		return FALSE;

	//Now write DATA
	TWDR=(data);
 592:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 594:	84 e8       	ldi	r24, 0x84	; 132
 596:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 598:	06 b6       	in	r0, 0x36	; 54
 59a:	07 fe       	sbrs	r0, 7
 59c:	fd cf       	rjmp	.-6      	; 0x598 <EEWriteByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 59e:	81 b1       	in	r24, 0x01	; 1
 5a0:	88 7f       	andi	r24, 0xF8	; 248
 5a2:	88 32       	cpi	r24, 0x28	; 40
 5a4:	79 f4       	brne	.+30     	; 0x5c4 <EEWriteByte+0x82>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 5a6:	84 e9       	ldi	r24, 0x94	; 148
 5a8:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 5aa:	06 b6       	in	r0, 0x36	; 54
 5ac:	04 fc       	sbrc	r0, 4
 5ae:	fd cf       	rjmp	.-6      	; 0x5aa <EEWriteByte+0x68>
 5b0:	8f ed       	ldi	r24, 0xDF	; 223
 5b2:	9e e2       	ldi	r25, 0x2E	; 46
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <EEWriteByte+0x72>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <EEWriteByte+0x78>
 5ba:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
 5c6:	08 95       	ret

000005c8 <EEReadByte>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 5c8:	54 ea       	ldi	r21, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 5ca:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 5cc:	34 e8       	ldi	r19, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 5ce:	56 bf       	out	0x36, r21	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 5d0:	06 b6       	in	r0, 0x36	; 54
 5d2:	07 fe       	sbrs	r0, 7
 5d4:	fd cf       	rjmp	.-6      	; 0x5d0 <EEReadByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 5d6:	21 b1       	in	r18, 0x01	; 1
 5d8:	28 7f       	andi	r18, 0xF8	; 248
 5da:	28 30       	cpi	r18, 0x08	; 8
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <EEReadByte+0x18>
 5de:	41 c0       	rjmp	.+130    	; 0x662 <EEReadByte+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 5e0:	43 b9       	out	0x03, r20	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 5e2:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 5e4:	06 b6       	in	r0, 0x36	; 54
 5e6:	07 fe       	sbrs	r0, 7
 5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <EEReadByte+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
 5ea:	21 b1       	in	r18, 0x01	; 1
 5ec:	28 7f       	andi	r18, 0xF8	; 248
 5ee:	28 31       	cpi	r18, 0x18	; 24
 5f0:	71 f7       	brne	.-36     	; 0x5ce <EEReadByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 5f2:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 5f4:	94 e8       	ldi	r25, 0x84	; 132
 5f6:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 5f8:	06 b6       	in	r0, 0x36	; 54
 5fa:	07 fe       	sbrs	r0, 7
 5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <EEReadByte+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 5fe:	91 b1       	in	r25, 0x01	; 1
 600:	98 7f       	andi	r25, 0xF8	; 248
 602:	98 32       	cpi	r25, 0x28	; 40
 604:	71 f5       	brne	.+92     	; 0x662 <EEReadByte+0x9a>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 606:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 608:	84 e8       	ldi	r24, 0x84	; 132
 60a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 60c:	06 b6       	in	r0, 0x36	; 54
 60e:	07 fe       	sbrs	r0, 7
 610:	fd cf       	rjmp	.-6      	; 0x60c <EEReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 612:	81 b1       	in	r24, 0x01	; 1
 614:	88 7f       	andi	r24, 0xF8	; 248
 616:	88 32       	cpi	r24, 0x28	; 40
 618:	21 f5       	brne	.+72     	; 0x662 <EEReadByte+0x9a>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 61a:	84 ea       	ldi	r24, 0xA4	; 164
 61c:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 61e:	06 b6       	in	r0, 0x36	; 54
 620:	07 fe       	sbrs	r0, 7
 622:	fd cf       	rjmp	.-6      	; 0x61e <EEReadByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
 624:	81 b1       	in	r24, 0x01	; 1
 626:	88 7f       	andi	r24, 0xF8	; 248
 628:	80 31       	cpi	r24, 0x10	; 16
 62a:	d9 f4       	brne	.+54     	; 0x662 <EEReadByte+0x9a>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
 62c:	81 ea       	ldi	r24, 0xA1	; 161
 62e:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 630:	84 e8       	ldi	r24, 0x84	; 132
 632:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 634:	06 b6       	in	r0, 0x36	; 54
 636:	07 fe       	sbrs	r0, 7
 638:	fd cf       	rjmp	.-6      	; 0x634 <EEReadByte+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
 63a:	81 b1       	in	r24, 0x01	; 1
 63c:	88 7f       	andi	r24, 0xF8	; 248
 63e:	80 34       	cpi	r24, 0x40	; 64
 640:	81 f4       	brne	.+32     	; 0x662 <EEReadByte+0x9a>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
 642:	84 e8       	ldi	r24, 0x84	; 132
 644:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
 646:	06 b6       	in	r0, 0x36	; 54
 648:	07 fe       	sbrs	r0, 7
 64a:	fd cf       	rjmp	.-6      	; 0x646 <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
 64c:	81 b1       	in	r24, 0x01	; 1
 64e:	88 7f       	andi	r24, 0xF8	; 248
 650:	88 35       	cpi	r24, 0x58	; 88
 652:	49 f4       	brne	.+18     	; 0x666 <EEReadByte+0x9e>
		return FALSE;

	//Read the data
	data=TWDR;
 654:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 656:	94 e9       	ldi	r25, 0x94	; 148
 658:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 65a:	06 b6       	in	r0, 0x36	; 54
 65c:	04 fc       	sbrc	r0, 4
 65e:	fd cf       	rjmp	.-6      	; 0x65a <EEReadByte+0x92>
 660:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
 666:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
 668:	08 95       	ret

0000066a <strcpy>:
 66a:	fb 01       	movw	r30, r22
 66c:	dc 01       	movw	r26, r24
 66e:	01 90       	ld	r0, Z+
 670:	0d 92       	st	X+, r0
 672:	00 20       	and	r0, r0
 674:	e1 f7       	brne	.-8      	; 0x66e <strcpy+0x4>
 676:	08 95       	ret

00000678 <sprintf>:
 678:	ae e0       	ldi	r26, 0x0E	; 14
 67a:	b0 e0       	ldi	r27, 0x00	; 0
 67c:	e1 e4       	ldi	r30, 0x41	; 65
 67e:	f3 e0       	ldi	r31, 0x03	; 3
 680:	a1 c2       	rjmp	.+1346   	; 0xbc4 <__prologue_saves__+0x1c>
 682:	0d 89       	ldd	r16, Y+21	; 0x15
 684:	1e 89       	ldd	r17, Y+22	; 0x16
 686:	86 e0       	ldi	r24, 0x06	; 6
 688:	8c 83       	std	Y+4, r24	; 0x04
 68a:	1a 83       	std	Y+2, r17	; 0x02
 68c:	09 83       	std	Y+1, r16	; 0x01
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	9f e7       	ldi	r25, 0x7F	; 127
 692:	9e 83       	std	Y+6, r25	; 0x06
 694:	8d 83       	std	Y+5, r24	; 0x05
 696:	9e 01       	movw	r18, r28
 698:	27 5e       	subi	r18, 0xE7	; 231
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
 69c:	ce 01       	movw	r24, r28
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	6f 89       	ldd	r22, Y+23	; 0x17
 6a2:	78 8d       	ldd	r23, Y+24	; 0x18
 6a4:	a9 01       	movw	r20, r18
 6a6:	08 d0       	rcall	.+16     	; 0x6b8 <vfprintf>
 6a8:	ef 81       	ldd	r30, Y+7	; 0x07
 6aa:	f8 85       	ldd	r31, Y+8	; 0x08
 6ac:	e0 0f       	add	r30, r16
 6ae:	f1 1f       	adc	r31, r17
 6b0:	10 82       	st	Z, r1
 6b2:	2e 96       	adiw	r28, 0x0e	; 14
 6b4:	e4 e0       	ldi	r30, 0x04	; 4
 6b6:	a2 c2       	rjmp	.+1348   	; 0xbfc <__epilogue_restores__+0x1c>

000006b8 <vfprintf>:
 6b8:	ac e0       	ldi	r26, 0x0C	; 12
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e1 e6       	ldi	r30, 0x61	; 97
 6be:	f3 e0       	ldi	r31, 0x03	; 3
 6c0:	73 c2       	rjmp	.+1254   	; 0xba8 <__prologue_saves__>
 6c2:	6c 01       	movw	r12, r24
 6c4:	1b 01       	movw	r2, r22
 6c6:	8a 01       	movw	r16, r20
 6c8:	fc 01       	movw	r30, r24
 6ca:	17 82       	std	Z+7, r1	; 0x07
 6cc:	16 82       	std	Z+6, r1	; 0x06
 6ce:	83 81       	ldd	r24, Z+3	; 0x03
 6d0:	81 ff       	sbrs	r24, 1
 6d2:	c4 c1       	rjmp	.+904    	; 0xa5c <vfprintf+0x3a4>
 6d4:	2e 01       	movw	r4, r28
 6d6:	08 94       	sec
 6d8:	41 1c       	adc	r4, r1
 6da:	51 1c       	adc	r5, r1
 6dc:	f6 01       	movw	r30, r12
 6de:	93 81       	ldd	r25, Z+3	; 0x03
 6e0:	f1 01       	movw	r30, r2
 6e2:	93 fd       	sbrc	r25, 3
 6e4:	85 91       	lpm	r24, Z+
 6e6:	93 ff       	sbrs	r25, 3
 6e8:	81 91       	ld	r24, Z+
 6ea:	1f 01       	movw	r2, r30
 6ec:	88 23       	and	r24, r24
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <vfprintf+0x3a>
 6f0:	b1 c1       	rjmp	.+866    	; 0xa54 <vfprintf+0x39c>
 6f2:	85 32       	cpi	r24, 0x25	; 37
 6f4:	39 f4       	brne	.+14     	; 0x704 <vfprintf+0x4c>
 6f6:	93 fd       	sbrc	r25, 3
 6f8:	85 91       	lpm	r24, Z+
 6fa:	93 ff       	sbrs	r25, 3
 6fc:	81 91       	ld	r24, Z+
 6fe:	1f 01       	movw	r2, r30
 700:	85 32       	cpi	r24, 0x25	; 37
 702:	21 f4       	brne	.+8      	; 0x70c <vfprintf+0x54>
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	b6 01       	movw	r22, r12
 708:	c5 d1       	rcall	.+906    	; 0xa94 <fputc>
 70a:	e8 cf       	rjmp	.-48     	; 0x6dc <vfprintf+0x24>
 70c:	ee 24       	eor	r14, r14
 70e:	ff 24       	eor	r15, r15
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	20 32       	cpi	r18, 0x20	; 32
 714:	b0 f4       	brcc	.+44     	; 0x742 <vfprintf+0x8a>
 716:	8b 32       	cpi	r24, 0x2B	; 43
 718:	69 f0       	breq	.+26     	; 0x734 <vfprintf+0x7c>
 71a:	8c 32       	cpi	r24, 0x2C	; 44
 71c:	28 f4       	brcc	.+10     	; 0x728 <vfprintf+0x70>
 71e:	80 32       	cpi	r24, 0x20	; 32
 720:	51 f0       	breq	.+20     	; 0x736 <vfprintf+0x7e>
 722:	83 32       	cpi	r24, 0x23	; 35
 724:	71 f4       	brne	.+28     	; 0x742 <vfprintf+0x8a>
 726:	0b c0       	rjmp	.+22     	; 0x73e <vfprintf+0x86>
 728:	8d 32       	cpi	r24, 0x2D	; 45
 72a:	39 f0       	breq	.+14     	; 0x73a <vfprintf+0x82>
 72c:	80 33       	cpi	r24, 0x30	; 48
 72e:	49 f4       	brne	.+18     	; 0x742 <vfprintf+0x8a>
 730:	21 60       	ori	r18, 0x01	; 1
 732:	2c c0       	rjmp	.+88     	; 0x78c <vfprintf+0xd4>
 734:	22 60       	ori	r18, 0x02	; 2
 736:	24 60       	ori	r18, 0x04	; 4
 738:	29 c0       	rjmp	.+82     	; 0x78c <vfprintf+0xd4>
 73a:	28 60       	ori	r18, 0x08	; 8
 73c:	27 c0       	rjmp	.+78     	; 0x78c <vfprintf+0xd4>
 73e:	20 61       	ori	r18, 0x10	; 16
 740:	25 c0       	rjmp	.+74     	; 0x78c <vfprintf+0xd4>
 742:	27 fd       	sbrc	r18, 7
 744:	2c c0       	rjmp	.+88     	; 0x79e <vfprintf+0xe6>
 746:	38 2f       	mov	r19, r24
 748:	30 53       	subi	r19, 0x30	; 48
 74a:	3a 30       	cpi	r19, 0x0A	; 10
 74c:	98 f4       	brcc	.+38     	; 0x774 <vfprintf+0xbc>
 74e:	26 ff       	sbrs	r18, 6
 750:	08 c0       	rjmp	.+16     	; 0x762 <vfprintf+0xaa>
 752:	8e 2d       	mov	r24, r14
 754:	88 0f       	add	r24, r24
 756:	e8 2e       	mov	r14, r24
 758:	ee 0c       	add	r14, r14
 75a:	ee 0c       	add	r14, r14
 75c:	e8 0e       	add	r14, r24
 75e:	e3 0e       	add	r14, r19
 760:	15 c0       	rjmp	.+42     	; 0x78c <vfprintf+0xd4>
 762:	8f 2d       	mov	r24, r15
 764:	88 0f       	add	r24, r24
 766:	f8 2e       	mov	r15, r24
 768:	ff 0c       	add	r15, r15
 76a:	ff 0c       	add	r15, r15
 76c:	f8 0e       	add	r15, r24
 76e:	f3 0e       	add	r15, r19
 770:	20 62       	ori	r18, 0x20	; 32
 772:	0c c0       	rjmp	.+24     	; 0x78c <vfprintf+0xd4>
 774:	8e 32       	cpi	r24, 0x2E	; 46
 776:	21 f4       	brne	.+8      	; 0x780 <vfprintf+0xc8>
 778:	26 fd       	sbrc	r18, 6
 77a:	6c c1       	rjmp	.+728    	; 0xa54 <vfprintf+0x39c>
 77c:	20 64       	ori	r18, 0x40	; 64
 77e:	06 c0       	rjmp	.+12     	; 0x78c <vfprintf+0xd4>
 780:	8c 36       	cpi	r24, 0x6C	; 108
 782:	11 f4       	brne	.+4      	; 0x788 <vfprintf+0xd0>
 784:	20 68       	ori	r18, 0x80	; 128
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0xd4>
 788:	88 36       	cpi	r24, 0x68	; 104
 78a:	49 f4       	brne	.+18     	; 0x79e <vfprintf+0xe6>
 78c:	f1 01       	movw	r30, r2
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	1f 01       	movw	r2, r30
 798:	88 23       	and	r24, r24
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0xe6>
 79c:	ba cf       	rjmp	.-140    	; 0x712 <vfprintf+0x5a>
 79e:	98 2f       	mov	r25, r24
 7a0:	95 54       	subi	r25, 0x45	; 69
 7a2:	93 30       	cpi	r25, 0x03	; 3
 7a4:	18 f0       	brcs	.+6      	; 0x7ac <vfprintf+0xf4>
 7a6:	90 52       	subi	r25, 0x20	; 32
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	28 f4       	brcc	.+10     	; 0x7b6 <vfprintf+0xfe>
 7ac:	0c 5f       	subi	r16, 0xFC	; 252
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	ff e3       	ldi	r31, 0x3F	; 63
 7b2:	f9 83       	std	Y+1, r31	; 0x01
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x118>
 7b6:	83 36       	cpi	r24, 0x63	; 99
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <vfprintf+0x10e>
 7ba:	83 37       	cpi	r24, 0x73	; 115
 7bc:	71 f0       	breq	.+28     	; 0x7da <vfprintf+0x122>
 7be:	83 35       	cpi	r24, 0x53	; 83
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <vfprintf+0x10c>
 7c2:	5c c0       	rjmp	.+184    	; 0x87c <vfprintf+0x1c4>
 7c4:	21 c0       	rjmp	.+66     	; 0x808 <vfprintf+0x150>
 7c6:	f8 01       	movw	r30, r16
 7c8:	80 81       	ld	r24, Z
 7ca:	89 83       	std	Y+1, r24	; 0x01
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	42 01       	movw	r8, r4
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	a7 2e       	mov	r10, r23
 7d6:	b1 2c       	mov	r11, r1
 7d8:	15 c0       	rjmp	.+42     	; 0x804 <vfprintf+0x14c>
 7da:	62 e0       	ldi	r22, 0x02	; 2
 7dc:	66 2e       	mov	r6, r22
 7de:	71 2c       	mov	r7, r1
 7e0:	60 0e       	add	r6, r16
 7e2:	71 1e       	adc	r7, r17
 7e4:	f8 01       	movw	r30, r16
 7e6:	80 80       	ld	r8, Z
 7e8:	91 80       	ldd	r9, Z+1	; 0x01
 7ea:	26 ff       	sbrs	r18, 6
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x13c>
 7ee:	6e 2d       	mov	r22, r14
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x140>
 7f4:	6f ef       	ldi	r22, 0xFF	; 255
 7f6:	7f ef       	ldi	r23, 0xFF	; 255
 7f8:	c4 01       	movw	r24, r8
 7fa:	2c 87       	std	Y+12, r18	; 0x0c
 7fc:	40 d1       	rcall	.+640    	; 0xa7e <strnlen>
 7fe:	5c 01       	movw	r10, r24
 800:	83 01       	movw	r16, r6
 802:	2c 85       	ldd	r18, Y+12	; 0x0c
 804:	2f 77       	andi	r18, 0x7F	; 127
 806:	16 c0       	rjmp	.+44     	; 0x834 <vfprintf+0x17c>
 808:	52 e0       	ldi	r21, 0x02	; 2
 80a:	65 2e       	mov	r6, r21
 80c:	71 2c       	mov	r7, r1
 80e:	60 0e       	add	r6, r16
 810:	71 1e       	adc	r7, r17
 812:	f8 01       	movw	r30, r16
 814:	80 80       	ld	r8, Z
 816:	91 80       	ldd	r9, Z+1	; 0x01
 818:	26 ff       	sbrs	r18, 6
 81a:	03 c0       	rjmp	.+6      	; 0x822 <vfprintf+0x16a>
 81c:	6e 2d       	mov	r22, r14
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x16e>
 822:	6f ef       	ldi	r22, 0xFF	; 255
 824:	7f ef       	ldi	r23, 0xFF	; 255
 826:	c4 01       	movw	r24, r8
 828:	2c 87       	std	Y+12, r18	; 0x0c
 82a:	1e d1       	rcall	.+572    	; 0xa68 <strnlen_P>
 82c:	5c 01       	movw	r10, r24
 82e:	2c 85       	ldd	r18, Y+12	; 0x0c
 830:	20 68       	ori	r18, 0x80	; 128
 832:	83 01       	movw	r16, r6
 834:	23 fd       	sbrc	r18, 3
 836:	1e c0       	rjmp	.+60     	; 0x874 <vfprintf+0x1bc>
 838:	07 c0       	rjmp	.+14     	; 0x848 <vfprintf+0x190>
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	b6 01       	movw	r22, r12
 840:	2c 87       	std	Y+12, r18	; 0x0c
 842:	28 d1       	rcall	.+592    	; 0xa94 <fputc>
 844:	fa 94       	dec	r15
 846:	2c 85       	ldd	r18, Y+12	; 0x0c
 848:	8f 2d       	mov	r24, r15
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	a8 16       	cp	r10, r24
 84e:	b9 06       	cpc	r11, r25
 850:	a0 f3       	brcs	.-24     	; 0x83a <vfprintf+0x182>
 852:	10 c0       	rjmp	.+32     	; 0x874 <vfprintf+0x1bc>
 854:	f4 01       	movw	r30, r8
 856:	27 fd       	sbrc	r18, 7
 858:	85 91       	lpm	r24, Z+
 85a:	27 ff       	sbrs	r18, 7
 85c:	81 91       	ld	r24, Z+
 85e:	4f 01       	movw	r8, r30
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	b6 01       	movw	r22, r12
 864:	2c 87       	std	Y+12, r18	; 0x0c
 866:	16 d1       	rcall	.+556    	; 0xa94 <fputc>
 868:	2c 85       	ldd	r18, Y+12	; 0x0c
 86a:	f1 10       	cpse	r15, r1
 86c:	fa 94       	dec	r15
 86e:	08 94       	sec
 870:	a1 08       	sbc	r10, r1
 872:	b1 08       	sbc	r11, r1
 874:	a1 14       	cp	r10, r1
 876:	b1 04       	cpc	r11, r1
 878:	69 f7       	brne	.-38     	; 0x854 <vfprintf+0x19c>
 87a:	e9 c0       	rjmp	.+466    	; 0xa4e <vfprintf+0x396>
 87c:	84 36       	cpi	r24, 0x64	; 100
 87e:	11 f0       	breq	.+4      	; 0x884 <vfprintf+0x1cc>
 880:	89 36       	cpi	r24, 0x69	; 105
 882:	41 f5       	brne	.+80     	; 0x8d4 <vfprintf+0x21c>
 884:	27 ff       	sbrs	r18, 7
 886:	08 c0       	rjmp	.+16     	; 0x898 <vfprintf+0x1e0>
 888:	f8 01       	movw	r30, r16
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0c 5f       	subi	r16, 0xFC	; 252
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x1f2>
 898:	f8 01       	movw	r30, r16
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	88 27       	eor	r24, r24
 8a0:	77 fd       	sbrc	r23, 7
 8a2:	80 95       	com	r24
 8a4:	98 2f       	mov	r25, r24
 8a6:	0e 5f       	subi	r16, 0xFE	; 254
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	4f e6       	ldi	r20, 0x6F	; 111
 8ac:	b4 2e       	mov	r11, r20
 8ae:	b2 22       	and	r11, r18
 8b0:	97 ff       	sbrs	r25, 7
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <vfprintf+0x20e>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	f0 e8       	ldi	r31, 0x80	; 128
 8c4:	bf 2a       	or	r11, r31
 8c6:	a2 01       	movw	r20, r4
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	0f d1       	rcall	.+542    	; 0xaec <__ultoa_invert>
 8ce:	78 2e       	mov	r7, r24
 8d0:	74 18       	sub	r7, r4
 8d2:	44 c0       	rjmp	.+136    	; 0x95c <vfprintf+0x2a4>
 8d4:	85 37       	cpi	r24, 0x75	; 117
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <vfprintf+0x22c>
 8d8:	3f ee       	ldi	r19, 0xEF	; 239
 8da:	b3 2e       	mov	r11, r19
 8dc:	b2 22       	and	r11, r18
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	25 c0       	rjmp	.+74     	; 0x92e <vfprintf+0x276>
 8e4:	99 ef       	ldi	r25, 0xF9	; 249
 8e6:	b9 2e       	mov	r11, r25
 8e8:	b2 22       	and	r11, r18
 8ea:	8f 36       	cpi	r24, 0x6F	; 111
 8ec:	c1 f0       	breq	.+48     	; 0x91e <vfprintf+0x266>
 8ee:	80 37       	cpi	r24, 0x70	; 112
 8f0:	20 f4       	brcc	.+8      	; 0x8fa <vfprintf+0x242>
 8f2:	88 35       	cpi	r24, 0x58	; 88
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <vfprintf+0x240>
 8f6:	ae c0       	rjmp	.+348    	; 0xa54 <vfprintf+0x39c>
 8f8:	0d c0       	rjmp	.+26     	; 0x914 <vfprintf+0x25c>
 8fa:	80 37       	cpi	r24, 0x70	; 112
 8fc:	21 f0       	breq	.+8      	; 0x906 <vfprintf+0x24e>
 8fe:	88 37       	cpi	r24, 0x78	; 120
 900:	09 f0       	breq	.+2      	; 0x904 <vfprintf+0x24c>
 902:	a8 c0       	rjmp	.+336    	; 0xa54 <vfprintf+0x39c>
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x252>
 906:	20 e1       	ldi	r18, 0x10	; 16
 908:	b2 2a       	or	r11, r18
 90a:	b4 fe       	sbrs	r11, 4
 90c:	0b c0       	rjmp	.+22     	; 0x924 <vfprintf+0x26c>
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	b8 2a       	or	r11, r24
 912:	08 c0       	rjmp	.+16     	; 0x924 <vfprintf+0x26c>
 914:	b4 fe       	sbrs	r11, 4
 916:	09 c0       	rjmp	.+18     	; 0x92a <vfprintf+0x272>
 918:	e6 e0       	ldi	r30, 0x06	; 6
 91a:	be 2a       	or	r11, r30
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0x272>
 91e:	28 e0       	ldi	r18, 0x08	; 8
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	05 c0       	rjmp	.+10     	; 0x92e <vfprintf+0x276>
 924:	20 e1       	ldi	r18, 0x10	; 16
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x276>
 92a:	20 e1       	ldi	r18, 0x10	; 16
 92c:	32 e0       	ldi	r19, 0x02	; 2
 92e:	b7 fe       	sbrs	r11, 7
 930:	08 c0       	rjmp	.+16     	; 0x942 <vfprintf+0x28a>
 932:	f8 01       	movw	r30, r16
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	07 c0       	rjmp	.+14     	; 0x950 <vfprintf+0x298>
 942:	f8 01       	movw	r30, r16
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	80 e0       	ldi	r24, 0x00	; 0
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 5f       	subi	r16, 0xFE	; 254
 94e:	1f 4f       	sbci	r17, 0xFF	; 255
 950:	a2 01       	movw	r20, r4
 952:	cc d0       	rcall	.+408    	; 0xaec <__ultoa_invert>
 954:	78 2e       	mov	r7, r24
 956:	74 18       	sub	r7, r4
 958:	ff e7       	ldi	r31, 0x7F	; 127
 95a:	bf 22       	and	r11, r31
 95c:	b6 fe       	sbrs	r11, 6
 95e:	0b c0       	rjmp	.+22     	; 0x976 <vfprintf+0x2be>
 960:	2e ef       	ldi	r18, 0xFE	; 254
 962:	b2 22       	and	r11, r18
 964:	7e 14       	cp	r7, r14
 966:	38 f4       	brcc	.+14     	; 0x976 <vfprintf+0x2be>
 968:	b4 fe       	sbrs	r11, 4
 96a:	07 c0       	rjmp	.+14     	; 0x97a <vfprintf+0x2c2>
 96c:	b2 fc       	sbrc	r11, 2
 96e:	05 c0       	rjmp	.+10     	; 0x97a <vfprintf+0x2c2>
 970:	8f ee       	ldi	r24, 0xEF	; 239
 972:	b8 22       	and	r11, r24
 974:	02 c0       	rjmp	.+4      	; 0x97a <vfprintf+0x2c2>
 976:	a7 2c       	mov	r10, r7
 978:	01 c0       	rjmp	.+2      	; 0x97c <vfprintf+0x2c4>
 97a:	ae 2c       	mov	r10, r14
 97c:	8b 2d       	mov	r24, r11
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	b4 fe       	sbrs	r11, 4
 982:	0d c0       	rjmp	.+26     	; 0x99e <vfprintf+0x2e6>
 984:	fe 01       	movw	r30, r28
 986:	e7 0d       	add	r30, r7
 988:	f1 1d       	adc	r31, r1
 98a:	20 81       	ld	r18, Z
 98c:	20 33       	cpi	r18, 0x30	; 48
 98e:	19 f4       	brne	.+6      	; 0x996 <vfprintf+0x2de>
 990:	e9 ee       	ldi	r30, 0xE9	; 233
 992:	be 22       	and	r11, r30
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <vfprintf+0x2f0>
 996:	a3 94       	inc	r10
 998:	b2 fe       	sbrs	r11, 2
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x2f0>
 99c:	04 c0       	rjmp	.+8      	; 0x9a6 <vfprintf+0x2ee>
 99e:	86 78       	andi	r24, 0x86	; 134
 9a0:	90 70       	andi	r25, 0x00	; 0
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <vfprintf+0x2f0>
 9a6:	a3 94       	inc	r10
 9a8:	8b 2c       	mov	r8, r11
 9aa:	99 24       	eor	r9, r9
 9ac:	b3 fc       	sbrc	r11, 3
 9ae:	13 c0       	rjmp	.+38     	; 0x9d6 <vfprintf+0x31e>
 9b0:	b0 fe       	sbrs	r11, 0
 9b2:	0e c0       	rjmp	.+28     	; 0x9d0 <vfprintf+0x318>
 9b4:	af 14       	cp	r10, r15
 9b6:	28 f4       	brcc	.+10     	; 0x9c2 <vfprintf+0x30a>
 9b8:	e7 2c       	mov	r14, r7
 9ba:	ef 0c       	add	r14, r15
 9bc:	ea 18       	sub	r14, r10
 9be:	af 2c       	mov	r10, r15
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <vfprintf+0x318>
 9c2:	e7 2c       	mov	r14, r7
 9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <vfprintf+0x318>
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	b6 01       	movw	r22, r12
 9cc:	63 d0       	rcall	.+198    	; 0xa94 <fputc>
 9ce:	a3 94       	inc	r10
 9d0:	af 14       	cp	r10, r15
 9d2:	c8 f3       	brcs	.-14     	; 0x9c6 <vfprintf+0x30e>
 9d4:	04 c0       	rjmp	.+8      	; 0x9de <vfprintf+0x326>
 9d6:	af 14       	cp	r10, r15
 9d8:	10 f4       	brcc	.+4      	; 0x9de <vfprintf+0x326>
 9da:	fa 18       	sub	r15, r10
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <vfprintf+0x328>
 9de:	ff 24       	eor	r15, r15
 9e0:	84 fe       	sbrs	r8, 4
 9e2:	0e c0       	rjmp	.+28     	; 0xa00 <vfprintf+0x348>
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	b6 01       	movw	r22, r12
 9ea:	54 d0       	rcall	.+168    	; 0xa94 <fputc>
 9ec:	82 fe       	sbrs	r8, 2
 9ee:	1d c0       	rjmp	.+58     	; 0xa2a <vfprintf+0x372>
 9f0:	81 fe       	sbrs	r8, 1
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <vfprintf+0x342>
 9f4:	88 e5       	ldi	r24, 0x58	; 88
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	10 c0       	rjmp	.+32     	; 0xa1a <vfprintf+0x362>
 9fa:	88 e7       	ldi	r24, 0x78	; 120
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <vfprintf+0x362>
 a00:	c4 01       	movw	r24, r8
 a02:	86 78       	andi	r24, 0x86	; 134
 a04:	90 70       	andi	r25, 0x00	; 0
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	81 f0       	breq	.+32     	; 0xa2a <vfprintf+0x372>
 a0a:	81 fc       	sbrc	r8, 1
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x35a>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <vfprintf+0x35c>
 a12:	8b e2       	ldi	r24, 0x2B	; 43
 a14:	b7 fc       	sbrc	r11, 7
 a16:	8d e2       	ldi	r24, 0x2D	; 45
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	b6 01       	movw	r22, r12
 a1c:	3b d0       	rcall	.+118    	; 0xa94 <fputc>
 a1e:	05 c0       	rjmp	.+10     	; 0xa2a <vfprintf+0x372>
 a20:	80 e3       	ldi	r24, 0x30	; 48
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	b6 01       	movw	r22, r12
 a26:	36 d0       	rcall	.+108    	; 0xa94 <fputc>
 a28:	ea 94       	dec	r14
 a2a:	7e 14       	cp	r7, r14
 a2c:	c8 f3       	brcs	.-14     	; 0xa20 <vfprintf+0x368>
 a2e:	7a 94       	dec	r7
 a30:	f2 01       	movw	r30, r4
 a32:	e7 0d       	add	r30, r7
 a34:	f1 1d       	adc	r31, r1
 a36:	80 81       	ld	r24, Z
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	b6 01       	movw	r22, r12
 a3c:	2b d0       	rcall	.+86     	; 0xa94 <fputc>
 a3e:	77 20       	and	r7, r7
 a40:	b1 f7       	brne	.-20     	; 0xa2e <vfprintf+0x376>
 a42:	05 c0       	rjmp	.+10     	; 0xa4e <vfprintf+0x396>
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	b6 01       	movw	r22, r12
 a4a:	24 d0       	rcall	.+72     	; 0xa94 <fputc>
 a4c:	fa 94       	dec	r15
 a4e:	ff 20       	and	r15, r15
 a50:	c9 f7       	brne	.-14     	; 0xa44 <vfprintf+0x38c>
 a52:	44 ce       	rjmp	.-888    	; 0x6dc <vfprintf+0x24>
 a54:	f6 01       	movw	r30, r12
 a56:	26 81       	ldd	r18, Z+6	; 0x06
 a58:	37 81       	ldd	r19, Z+7	; 0x07
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x3a8>
 a5c:	2f ef       	ldi	r18, 0xFF	; 255
 a5e:	3f ef       	ldi	r19, 0xFF	; 255
 a60:	c9 01       	movw	r24, r18
 a62:	2c 96       	adiw	r28, 0x0c	; 12
 a64:	e2 e1       	ldi	r30, 0x12	; 18
 a66:	bc c0       	rjmp	.+376    	; 0xbe0 <__epilogue_restores__>

00000a68 <strnlen_P>:
 a68:	fc 01       	movw	r30, r24
 a6a:	05 90       	lpm	r0, Z+
 a6c:	61 50       	subi	r22, 0x01	; 1
 a6e:	70 40       	sbci	r23, 0x00	; 0
 a70:	01 10       	cpse	r0, r1
 a72:	d8 f7       	brcc	.-10     	; 0xa6a <strnlen_P+0x2>
 a74:	80 95       	com	r24
 a76:	90 95       	com	r25
 a78:	8e 0f       	add	r24, r30
 a7a:	9f 1f       	adc	r25, r31
 a7c:	08 95       	ret

00000a7e <strnlen>:
 a7e:	fc 01       	movw	r30, r24
 a80:	61 50       	subi	r22, 0x01	; 1
 a82:	70 40       	sbci	r23, 0x00	; 0
 a84:	01 90       	ld	r0, Z+
 a86:	01 10       	cpse	r0, r1
 a88:	d8 f7       	brcc	.-10     	; 0xa80 <strnlen+0x2>
 a8a:	80 95       	com	r24
 a8c:	90 95       	com	r25
 a8e:	8e 0f       	add	r24, r30
 a90:	9f 1f       	adc	r25, r31
 a92:	08 95       	ret

00000a94 <fputc>:
 a94:	0f 93       	push	r16
 a96:	1f 93       	push	r17
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
 a9c:	8c 01       	movw	r16, r24
 a9e:	eb 01       	movw	r28, r22
 aa0:	8b 81       	ldd	r24, Y+3	; 0x03
 aa2:	81 ff       	sbrs	r24, 1
 aa4:	1b c0       	rjmp	.+54     	; 0xadc <fputc+0x48>
 aa6:	82 ff       	sbrs	r24, 2
 aa8:	0d c0       	rjmp	.+26     	; 0xac4 <fputc+0x30>
 aaa:	2e 81       	ldd	r18, Y+6	; 0x06
 aac:	3f 81       	ldd	r19, Y+7	; 0x07
 aae:	8c 81       	ldd	r24, Y+4	; 0x04
 ab0:	9d 81       	ldd	r25, Y+5	; 0x05
 ab2:	28 17       	cp	r18, r24
 ab4:	39 07       	cpc	r19, r25
 ab6:	64 f4       	brge	.+24     	; 0xad0 <fputc+0x3c>
 ab8:	e8 81       	ld	r30, Y
 aba:	f9 81       	ldd	r31, Y+1	; 0x01
 abc:	01 93       	st	Z+, r16
 abe:	f9 83       	std	Y+1, r31	; 0x01
 ac0:	e8 83       	st	Y, r30
 ac2:	06 c0       	rjmp	.+12     	; 0xad0 <fputc+0x3c>
 ac4:	e8 85       	ldd	r30, Y+8	; 0x08
 ac6:	f9 85       	ldd	r31, Y+9	; 0x09
 ac8:	80 2f       	mov	r24, r16
 aca:	09 95       	icall
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	31 f4       	brne	.+12     	; 0xadc <fputc+0x48>
 ad0:	8e 81       	ldd	r24, Y+6	; 0x06
 ad2:	9f 81       	ldd	r25, Y+7	; 0x07
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	9f 83       	std	Y+7, r25	; 0x07
 ad8:	8e 83       	std	Y+6, r24	; 0x06
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <fputc+0x4c>
 adc:	0f ef       	ldi	r16, 0xFF	; 255
 ade:	1f ef       	ldi	r17, 0xFF	; 255
 ae0:	c8 01       	movw	r24, r16
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	08 95       	ret

00000aec <__ultoa_invert>:
 aec:	fa 01       	movw	r30, r20
 aee:	aa 27       	eor	r26, r26
 af0:	28 30       	cpi	r18, 0x08	; 8
 af2:	51 f1       	breq	.+84     	; 0xb48 <__ultoa_invert+0x5c>
 af4:	20 31       	cpi	r18, 0x10	; 16
 af6:	81 f1       	breq	.+96     	; 0xb58 <__ultoa_invert+0x6c>
 af8:	e8 94       	clt
 afa:	6f 93       	push	r22
 afc:	6e 7f       	andi	r22, 0xFE	; 254
 afe:	6e 5f       	subi	r22, 0xFE	; 254
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	af 4f       	sbci	r26, 0xFF	; 255
 b08:	b1 e0       	ldi	r27, 0x01	; 1
 b0a:	3e d0       	rcall	.+124    	; 0xb88 <__ultoa_invert+0x9c>
 b0c:	b4 e0       	ldi	r27, 0x04	; 4
 b0e:	3c d0       	rcall	.+120    	; 0xb88 <__ultoa_invert+0x9c>
 b10:	67 0f       	add	r22, r23
 b12:	78 1f       	adc	r23, r24
 b14:	89 1f       	adc	r24, r25
 b16:	9a 1f       	adc	r25, r26
 b18:	a1 1d       	adc	r26, r1
 b1a:	68 0f       	add	r22, r24
 b1c:	79 1f       	adc	r23, r25
 b1e:	8a 1f       	adc	r24, r26
 b20:	91 1d       	adc	r25, r1
 b22:	a1 1d       	adc	r26, r1
 b24:	6a 0f       	add	r22, r26
 b26:	71 1d       	adc	r23, r1
 b28:	81 1d       	adc	r24, r1
 b2a:	91 1d       	adc	r25, r1
 b2c:	a1 1d       	adc	r26, r1
 b2e:	20 d0       	rcall	.+64     	; 0xb70 <__ultoa_invert+0x84>
 b30:	09 f4       	brne	.+2      	; 0xb34 <__ultoa_invert+0x48>
 b32:	68 94       	set
 b34:	3f 91       	pop	r19
 b36:	2a e0       	ldi	r18, 0x0A	; 10
 b38:	26 9f       	mul	r18, r22
 b3a:	11 24       	eor	r1, r1
 b3c:	30 19       	sub	r19, r0
 b3e:	30 5d       	subi	r19, 0xD0	; 208
 b40:	31 93       	st	Z+, r19
 b42:	de f6       	brtc	.-74     	; 0xafa <__ultoa_invert+0xe>
 b44:	cf 01       	movw	r24, r30
 b46:	08 95       	ret
 b48:	46 2f       	mov	r20, r22
 b4a:	47 70       	andi	r20, 0x07	; 7
 b4c:	40 5d       	subi	r20, 0xD0	; 208
 b4e:	41 93       	st	Z+, r20
 b50:	b3 e0       	ldi	r27, 0x03	; 3
 b52:	0f d0       	rcall	.+30     	; 0xb72 <__ultoa_invert+0x86>
 b54:	c9 f7       	brne	.-14     	; 0xb48 <__ultoa_invert+0x5c>
 b56:	f6 cf       	rjmp	.-20     	; 0xb44 <__ultoa_invert+0x58>
 b58:	46 2f       	mov	r20, r22
 b5a:	4f 70       	andi	r20, 0x0F	; 15
 b5c:	40 5d       	subi	r20, 0xD0	; 208
 b5e:	4a 33       	cpi	r20, 0x3A	; 58
 b60:	18 f0       	brcs	.+6      	; 0xb68 <__ultoa_invert+0x7c>
 b62:	49 5d       	subi	r20, 0xD9	; 217
 b64:	31 fd       	sbrc	r19, 1
 b66:	40 52       	subi	r20, 0x20	; 32
 b68:	41 93       	st	Z+, r20
 b6a:	02 d0       	rcall	.+4      	; 0xb70 <__ultoa_invert+0x84>
 b6c:	a9 f7       	brne	.-22     	; 0xb58 <__ultoa_invert+0x6c>
 b6e:	ea cf       	rjmp	.-44     	; 0xb44 <__ultoa_invert+0x58>
 b70:	b4 e0       	ldi	r27, 0x04	; 4
 b72:	a6 95       	lsr	r26
 b74:	97 95       	ror	r25
 b76:	87 95       	ror	r24
 b78:	77 95       	ror	r23
 b7a:	67 95       	ror	r22
 b7c:	ba 95       	dec	r27
 b7e:	c9 f7       	brne	.-14     	; 0xb72 <__ultoa_invert+0x86>
 b80:	00 97       	sbiw	r24, 0x00	; 0
 b82:	61 05       	cpc	r22, r1
 b84:	71 05       	cpc	r23, r1
 b86:	08 95       	ret
 b88:	9b 01       	movw	r18, r22
 b8a:	ac 01       	movw	r20, r24
 b8c:	0a 2e       	mov	r0, r26
 b8e:	06 94       	lsr	r0
 b90:	57 95       	ror	r21
 b92:	47 95       	ror	r20
 b94:	37 95       	ror	r19
 b96:	27 95       	ror	r18
 b98:	ba 95       	dec	r27
 b9a:	c9 f7       	brne	.-14     	; 0xb8e <__ultoa_invert+0xa2>
 b9c:	62 0f       	add	r22, r18
 b9e:	73 1f       	adc	r23, r19
 ba0:	84 1f       	adc	r24, r20
 ba2:	95 1f       	adc	r25, r21
 ba4:	a0 1d       	adc	r26, r0
 ba6:	08 95       	ret

00000ba8 <__prologue_saves__>:
 ba8:	2f 92       	push	r2
 baa:	3f 92       	push	r3
 bac:	4f 92       	push	r4
 bae:	5f 92       	push	r5
 bb0:	6f 92       	push	r6
 bb2:	7f 92       	push	r7
 bb4:	8f 92       	push	r8
 bb6:	9f 92       	push	r9
 bb8:	af 92       	push	r10
 bba:	bf 92       	push	r11
 bbc:	cf 92       	push	r12
 bbe:	df 92       	push	r13
 bc0:	ef 92       	push	r14
 bc2:	ff 92       	push	r15
 bc4:	0f 93       	push	r16
 bc6:	1f 93       	push	r17
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	cd b7       	in	r28, 0x3d	; 61
 bce:	de b7       	in	r29, 0x3e	; 62
 bd0:	ca 1b       	sub	r28, r26
 bd2:	db 0b       	sbc	r29, r27
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	09 94       	ijmp

00000be0 <__epilogue_restores__>:
 be0:	2a 88       	ldd	r2, Y+18	; 0x12
 be2:	39 88       	ldd	r3, Y+17	; 0x11
 be4:	48 88       	ldd	r4, Y+16	; 0x10
 be6:	5f 84       	ldd	r5, Y+15	; 0x0f
 be8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bea:	7d 84       	ldd	r7, Y+13	; 0x0d
 bec:	8c 84       	ldd	r8, Y+12	; 0x0c
 bee:	9b 84       	ldd	r9, Y+11	; 0x0b
 bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf2:	b9 84       	ldd	r11, Y+9	; 0x09
 bf4:	c8 84       	ldd	r12, Y+8	; 0x08
 bf6:	df 80       	ldd	r13, Y+7	; 0x07
 bf8:	ee 80       	ldd	r14, Y+6	; 0x06
 bfa:	fd 80       	ldd	r15, Y+5	; 0x05
 bfc:	0c 81       	ldd	r16, Y+4	; 0x04
 bfe:	1b 81       	ldd	r17, Y+3	; 0x03
 c00:	aa 81       	ldd	r26, Y+2	; 0x02
 c02:	b9 81       	ldd	r27, Y+1	; 0x01
 c04:	ce 0f       	add	r28, r30
 c06:	d1 1d       	adc	r29, r1
 c08:	0f b6       	in	r0, 0x3f	; 63
 c0a:	f8 94       	cli
 c0c:	de bf       	out	0x3e, r29	; 62
 c0e:	0f be       	out	0x3f, r0	; 63
 c10:	cd bf       	out	0x3d, r28	; 61
 c12:	ed 01       	movw	r28, r26
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>

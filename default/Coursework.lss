
Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  00000e74  00000f08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000e2  008000e2  00000f8a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000361  00000000  00000000  00001f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000013c3  00000000  00000000  00002267  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ae0  00000000  00000000  0000362a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bb8  00000000  00000000  0000410a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00005cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053e  00000000  00000000  00005f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c2a  00000000  00000000  000064c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000001fc  00000000  00000000  000070ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  000072e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
   2:	4f c1       	rjmp	.+670    	; 0x2a2 <__vector_1>
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	6a c0       	rjmp	.+212    	; 0xdc <__bad_interrupt>
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	68 c0       	rjmp	.+208    	; 0xdc <__bad_interrupt>
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	66 c0       	rjmp	.+204    	; 0xdc <__bad_interrupt>
  10:	96 c0       	rjmp	.+300    	; 0x13e <__vector_8>
  12:	70 c0       	rjmp	.+224    	; 0xf4 <__vector_9>
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	62 c0       	rjmp	.+196    	; 0xdc <__bad_interrupt>
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	60 c0       	rjmp	.+192    	; 0xdc <__bad_interrupt>
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	5e c0       	rjmp	.+188    	; 0xdc <__bad_interrupt>
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	5c c0       	rjmp	.+184    	; 0xdc <__bad_interrupt>
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	65 c2       	rjmp	.+1226   	; 0x4f2 <char_to_code+0x68>
  28:	67 c2       	rjmp	.+1230   	; 0x4f8 <char_to_code+0x6e>
  2a:	66 c2       	rjmp	.+1228   	; 0x4f8 <char_to_code+0x6e>
  2c:	65 c2       	rjmp	.+1226   	; 0x4f8 <char_to_code+0x6e>
  2e:	64 c2       	rjmp	.+1224   	; 0x4f8 <char_to_code+0x6e>
  30:	63 c2       	rjmp	.+1222   	; 0x4f8 <char_to_code+0x6e>
  32:	62 c2       	rjmp	.+1220   	; 0x4f8 <char_to_code+0x6e>
  34:	61 c2       	rjmp	.+1218   	; 0x4f8 <char_to_code+0x6e>
  36:	60 c2       	rjmp	.+1216   	; 0x4f8 <char_to_code+0x6e>
  38:	5f c2       	rjmp	.+1214   	; 0x4f8 <char_to_code+0x6e>
  3a:	5e c2       	rjmp	.+1212   	; 0x4f8 <char_to_code+0x6e>
  3c:	5d c2       	rjmp	.+1210   	; 0x4f8 <char_to_code+0x6e>
  3e:	5c c2       	rjmp	.+1208   	; 0x4f8 <char_to_code+0x6e>
  40:	2e c2       	rjmp	.+1116   	; 0x49e <char_to_code+0x14>
  42:	5a c2       	rjmp	.+1204   	; 0x4f8 <char_to_code+0x6e>
  44:	59 c2       	rjmp	.+1202   	; 0x4f8 <char_to_code+0x6e>
  46:	2e c2       	rjmp	.+1116   	; 0x4a4 <char_to_code+0x1a>
  48:	30 c2       	rjmp	.+1120   	; 0x4aa <char_to_code+0x20>
  4a:	32 c2       	rjmp	.+1124   	; 0x4b0 <char_to_code+0x26>
  4c:	34 c2       	rjmp	.+1128   	; 0x4b6 <char_to_code+0x2c>
  4e:	36 c2       	rjmp	.+1132   	; 0x4bc <char_to_code+0x32>
  50:	38 c2       	rjmp	.+1136   	; 0x4c2 <char_to_code+0x38>
  52:	3a c2       	rjmp	.+1140   	; 0x4c8 <char_to_code+0x3e>
  54:	3c c2       	rjmp	.+1144   	; 0x4ce <char_to_code+0x44>
  56:	3e c2       	rjmp	.+1148   	; 0x4d4 <char_to_code+0x4a>
  58:	40 c2       	rjmp	.+1152   	; 0x4da <char_to_code+0x50>
  5a:	4e c2       	rjmp	.+1180   	; 0x4f8 <char_to_code+0x6e>
  5c:	4d c2       	rjmp	.+1178   	; 0x4f8 <char_to_code+0x6e>
  5e:	4c c2       	rjmp	.+1176   	; 0x4f8 <char_to_code+0x6e>
  60:	4b c2       	rjmp	.+1174   	; 0x4f8 <char_to_code+0x6e>
  62:	4a c2       	rjmp	.+1172   	; 0x4f8 <char_to_code+0x6e>
  64:	49 c2       	rjmp	.+1170   	; 0x4f8 <char_to_code+0x6e>
  66:	48 c2       	rjmp	.+1168   	; 0x4f8 <char_to_code+0x6e>
  68:	47 c2       	rjmp	.+1166   	; 0x4f8 <char_to_code+0x6e>
  6a:	46 c2       	rjmp	.+1164   	; 0x4f8 <char_to_code+0x6e>
  6c:	39 c2       	rjmp	.+1138   	; 0x4e0 <char_to_code+0x56>
  6e:	44 c2       	rjmp	.+1160   	; 0x4f8 <char_to_code+0x6e>
  70:	43 c2       	rjmp	.+1158   	; 0x4f8 <char_to_code+0x6e>
  72:	42 c2       	rjmp	.+1156   	; 0x4f8 <char_to_code+0x6e>
  74:	41 c2       	rjmp	.+1154   	; 0x4f8 <char_to_code+0x6e>
  76:	37 c2       	rjmp	.+1134   	; 0x4e6 <char_to_code+0x5c>
  78:	3f c2       	rjmp	.+1150   	; 0x4f8 <char_to_code+0x6e>
  7a:	3e c2       	rjmp	.+1148   	; 0x4f8 <char_to_code+0x6e>
  7c:	3d c2       	rjmp	.+1146   	; 0x4f8 <char_to_code+0x6e>
  7e:	36 c2       	rjmp	.+1132   	; 0x4ec <char_to_code+0x62>
  80:	3b c2       	rjmp	.+1142   	; 0x4f8 <char_to_code+0x6e>
  82:	3a c2       	rjmp	.+1140   	; 0x4f8 <char_to_code+0x6e>
  84:	39 c2       	rjmp	.+1138   	; 0x4f8 <char_to_code+0x6e>
  86:	38 c2       	rjmp	.+1136   	; 0x4f8 <char_to_code+0x6e>
  88:	37 c2       	rjmp	.+1134   	; 0x4f8 <char_to_code+0x6e>
  8a:	36 c2       	rjmp	.+1132   	; 0x4f8 <char_to_code+0x6e>
  8c:	35 c2       	rjmp	.+1130   	; 0x4f8 <char_to_code+0x6e>
  8e:	34 c2       	rjmp	.+1128   	; 0x4f8 <char_to_code+0x6e>
  90:	33 c2       	rjmp	.+1126   	; 0x4f8 <char_to_code+0x6e>
  92:	32 c2       	rjmp	.+1124   	; 0x4f8 <char_to_code+0x6e>
  94:	31 c2       	rjmp	.+1122   	; 0x4f8 <char_to_code+0x6e>
  96:	30 c2       	rjmp	.+1120   	; 0x4f8 <char_to_code+0x6e>
  98:	2f c2       	rjmp	.+1118   	; 0x4f8 <char_to_code+0x6e>
  9a:	2e c2       	rjmp	.+1116   	; 0x4f8 <char_to_code+0x6e>
  9c:	2d c2       	rjmp	.+1114   	; 0x4f8 <char_to_code+0x6e>
  9e:	2c c2       	rjmp	.+1112   	; 0x4f8 <char_to_code+0x6e>
  a0:	2b c2       	rjmp	.+1110   	; 0x4f8 <char_to_code+0x6e>
  a2:	2a c2       	rjmp	.+1108   	; 0x4f8 <char_to_code+0x6e>
  a4:	2c c2       	rjmp	.+1112   	; 0x4fe <char_to_code+0x74>

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf e5       	ldi	r28, 0x5F	; 95
  ac:	d4 e0       	ldi	r29, 0x04	; 4
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	10 e0       	ldi	r17, 0x00	; 0
  b4:	a0 e6       	ldi	r26, 0x60	; 96
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e4 e7       	ldi	r30, 0x74	; 116
  ba:	fe e0       	ldi	r31, 0x0E	; 14
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a2 3e       	cpi	r26, 0xE2	; 226
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	10 e0       	ldi	r17, 0x00	; 0
  ca:	a2 ee       	ldi	r26, 0xE2	; 226
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a9 3e       	cpi	r26, 0xE9	; 233
  d4:	b1 07       	cpc	r27, r17
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	1a d1       	rcall	.+564    	; 0x30e <main>
  da:	ca c6       	rjmp	.+3476   	; 0xe70 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <set_up_ports>:
int should_update_temp = 1;

//Настройка портов
void set_up_ports(void) {
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 63       	ori	r24, 0x3F	; 63
  e2:	87 bb       	out	0x17, r24	; 23
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
  e4:	8b 9a       	sbi	0x11, 3	; 17
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
  e6:	84 b3       	in	r24, 0x14	; 20
  e8:	8f 60       	ori	r24, 0x0F	; 15
  ea:	84 bb       	out	0x14, r24	; 20
  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
  ec:	84 b3       	in	r24, 0x14	; 20
  ee:	80 63       	ori	r24, 0x30	; 48
  f0:	84 bb       	out	0x14, r24	; 20
} 
  f2:	08 95       	ret

000000f4 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	printDisplay(display);
 116:	84 ed       	ldi	r24, 0xD4	; 212
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	20 d2       	rcall	.+1088   	; 0x55c <printDisplay>
}
 11c:	ff 91       	pop	r31
 11e:	ef 91       	pop	r30
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	7f 91       	pop	r23
 12a:	6f 91       	pop	r22
 12c:	5f 91       	pop	r21
 12e:	4f 91       	pop	r20
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_8>:

ISR(TIMER1_OVF_vect) {
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	4f 93       	push	r20
 14e:	5f 93       	push	r21
 150:	6f 93       	push	r22
 152:	7f 93       	push	r23
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
 158:	af 93       	push	r26
 15a:	bf 93       	push	r27
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
  if (state == Register) {
 160:	80 91 e2 00 	lds	r24, 0x00E2
 164:	88 23       	and	r24, r24
 166:	c1 f4       	brne	.+48     	; 0x198 <__vector_8+0x5a>
    //Если значение timer1_divider меньше 56, то 15 минут еще не прошло
    if (timer1_divider < 56) {
 168:	80 91 e3 00 	lds	r24, 0x00E3
 16c:	90 91 e4 00 	lds	r25, 0x00E4
 170:	88 33       	cpi	r24, 0x38	; 56
 172:	91 05       	cpc	r25, r1
 174:	34 f4       	brge	.+12     	; 0x182 <__vector_8+0x44>
      timer1_divider++;
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 e4 00 	sts	0x00E4, r25
 17c:	80 93 e3 00 	sts	0x00E3, r24
 180:	0b c0       	rjmp	.+22     	; 0x198 <__vector_8+0x5a>
    } else {
      //Значение timer1_divider достигло 56 => настало время записать данные в EEPROM
      signed char temp = getTemperature();
 182:	7d d2       	rcall	.+1274   	; 0x67e <getTemperature>
 184:	68 2f       	mov	r22, r24
      EEWriteByte(address, temp);
 186:	80 91 e5 00 	lds	r24, 0x00E5
 18a:	90 91 e6 00 	lds	r25, 0x00E6
 18e:	e3 d2       	rcall	.+1478   	; 0x756 <EEWriteByte>
      timer1_divider = 0;
 190:	10 92 e4 00 	sts	0x00E4, r1
 194:	10 92 e3 00 	sts	0x00E3, r1
    }
  }

  if (timer_temp_divider < 3) {
 198:	80 91 e7 00 	lds	r24, 0x00E7
 19c:	90 91 e8 00 	lds	r25, 0x00E8
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	91 05       	cpc	r25, r1
 1a4:	34 f4       	brge	.+12     	; 0x1b2 <__vector_8+0x74>
    timer_temp_divider++;
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 e8 00 	sts	0x00E8, r25
 1ac:	80 93 e7 00 	sts	0x00E7, r24
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <__vector_8+0x88>
  } else {
    should_update_temp = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 d3 00 	sts	0x00D3, r25
 1ba:	80 93 d2 00 	sts	0x00D2, r24
    timer_temp_divider = 0;
 1be:	10 92 e8 00 	sts	0x00E8, r1
 1c2:	10 92 e7 00 	sts	0x00E7, r1
  }
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <transmit_data>:

void transmit_data() {
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
  UART_println("TRANSMITION START");
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	67 d3       	rcall	.+1742   	; 0x8c8 <UART_println>
  for (unsigned int i = 0; i < address; i++) {
 1fa:	80 91 e5 00 	lds	r24, 0x00E5
 1fe:	90 91 e6 00 	lds	r25, 0x00E6
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	91 f1       	breq	.+100    	; 0x26a <transmit_data+0x82>
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
    signed char data = EEReadByte(i);
    char *string_to_transmit = "Data #    : temp =     ";
    sprintf(string_to_transmit, "Data #%4d: temp = %4d", data);
 20a:	02 e7       	ldi	r16, 0x72	; 114
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	0f 2e       	mov	r0, r31
 210:	fa e8       	ldi	r31, 0x8A	; 138
 212:	ef 2e       	mov	r14, r31
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ff 2e       	mov	r15, r31
 218:	f0 2d       	mov	r31, r0
}

void transmit_data() {
  UART_println("TRANSMITION START");
  for (unsigned int i = 0; i < address; i++) {
    signed char data = EEReadByte(i);
 21a:	ce 01       	movw	r24, r28
 21c:	e3 d2       	rcall	.+1478   	; 0x7e4 <EEReadByte>
    char *string_to_transmit = "Data #    : temp =     ";
    sprintf(string_to_transmit, "Data #%4d: temp = %4d", data);
 21e:	00 d0       	rcall	.+0      	; 0x220 <transmit_data+0x38>
 220:	00 d0       	rcall	.+0      	; 0x222 <transmit_data+0x3a>
 222:	00 d0       	rcall	.+0      	; 0x224 <transmit_data+0x3c>
 224:	ed b7       	in	r30, 0x3d	; 61
 226:	fe b7       	in	r31, 0x3e	; 62
 228:	31 96       	adiw	r30, 0x01	; 1
 22a:	ad b7       	in	r26, 0x3d	; 61
 22c:	be b7       	in	r27, 0x3e	; 62
 22e:	12 96       	adiw	r26, 0x02	; 2
 230:	1c 93       	st	X, r17
 232:	0e 93       	st	-X, r16
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	f3 82       	std	Z+3, r15	; 0x03
 238:	e2 82       	std	Z+2, r14	; 0x02
 23a:	99 27       	eor	r25, r25
 23c:	87 fd       	sbrc	r24, 7
 23e:	90 95       	com	r25
 240:	95 83       	std	Z+5, r25	; 0x05
 242:	84 83       	std	Z+4, r24	; 0x04
 244:	46 d3       	rcall	.+1676   	; 0x8d2 <sprintf>
    UART_println(string_to_transmit);
 246:	8d b7       	in	r24, 0x3d	; 61
 248:	9e b7       	in	r25, 0x3e	; 62
 24a:	06 96       	adiw	r24, 0x06	; 6
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	9e bf       	out	0x3e, r25	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	8d bf       	out	0x3d, r24	; 61
 256:	c8 01       	movw	r24, r16
 258:	37 d3       	rcall	.+1646   	; 0x8c8 <UART_println>
  }
}

void transmit_data() {
  UART_println("TRANSMITION START");
  for (unsigned int i = 0; i < address; i++) {
 25a:	21 96       	adiw	r28, 0x01	; 1
 25c:	80 91 e5 00 	lds	r24, 0x00E5
 260:	90 91 e6 00 	lds	r25, 0x00E6
 264:	c8 17       	cp	r28, r24
 266:	d9 07       	cpc	r29, r25
 268:	c0 f2       	brcs	.-80     	; 0x21a <transmit_data+0x32>
    signed char data = EEReadByte(i);
    char *string_to_transmit = "Data #    : temp =     ";
    sprintf(string_to_transmit, "Data #%4d: temp = %4d", data);
    UART_println(string_to_transmit);
  }
  UART_println("TRANSMITION END");
 26a:	80 ea       	ldi	r24, 0xA0	; 160
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	2c d3       	rcall	.+1624   	; 0x8c8 <UART_println>
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	08 95       	ret

0000027e <handle_buttons>:

void handle_buttons(unsigned char button_number) {
  // unsigned char button_number = number_key_pressed();

  switch (button_number) {
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	41 f0       	breq	.+16     	; 0x292 <handle_buttons+0x14>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	18 f0       	brcs	.+6      	; 0x28c <handle_buttons+0xe>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	59 f4       	brne	.+22     	; 0x2a0 <handle_buttons+0x22>
 28a:	07 c0       	rjmp	.+14     	; 0x29a <handle_buttons+0x1c>
    case 0:
    state = Register;
 28c:	10 92 e2 00 	sts	0x00E2, r1
    break;
 290:	08 95       	ret

    case 1:
    transmit_data();
 292:	aa df       	rcall	.-172    	; 0x1e8 <transmit_data>
    state = Register;
 294:	10 92 e2 00 	sts	0x00E2, r1
    break;
 298:	08 95       	ret

    case 2:
    state = TURBO;
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	80 93 e2 00 	sts	0x00E2, r24
 2a0:	08 95       	ret

000002a2 <__vector_1>:
    default:
    break;
  };
}

ISR(INT0_vect) {
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
  unsigned char button_number = number_key_pressed();
 2c4:	61 d1       	rcall	.+706    	; 0x588 <number_key_pressed>
  handle_buttons(button_number);
 2c6:	db df       	rcall	.-74     	; 0x27e <handle_buttons>
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <timer_init>:

//Инициализация таймера
void timer_init() {
	TIMSK |= (1 << TOIE0) | (1 << TOIE1) | (1 << TOIE2);
 2ea:	89 b7       	in	r24, 0x39	; 57
 2ec:	85 64       	ori	r24, 0x45	; 69
 2ee:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1 << CS02);
 2f0:	84 e0       	ldi	r24, 0x04	; 4
 2f2:	83 bf       	out	0x33, r24	; 51
  TCCR1B = (1 << CS12) | (1 << CS10);
 2f4:	85 e0       	ldi	r24, 0x05	; 5
 2f6:	8e bd       	out	0x2e, r24	; 46
}
 2f8:	08 95       	ret

000002fa <init>:

void init() {
  // cli();
  set_up_ports();
 2fa:	f1 de       	rcall	.-542    	; 0xde <set_up_ports>
  timer_init();
 2fc:	f6 df       	rcall	.-20     	; 0x2ea <timer_init>

  GICR |= (1 << INT0);
 2fe:	8b b7       	in	r24, 0x3b	; 59
 300:	80 64       	ori	r24, 0x40	; 64
 302:	8b bf       	out	0x3b, r24	; 59
  MCUCR |= (1 << ISC00) | (1 << ISC01);
 304:	85 b7       	in	r24, 0x35	; 53
 306:	83 60       	ori	r24, 0x03	; 3
 308:	85 bf       	out	0x35, r24	; 53
  sei();
 30a:	78 94       	sei
  // cli();
}
 30c:	08 95       	ret

0000030e <main>:


int main(void) {
 30e:	3f 92       	push	r3
 310:	4f 92       	push	r4
 312:	5f 92       	push	r5
 314:	6f 92       	push	r6
 316:	7f 92       	push	r7
 318:	8f 92       	push	r8
 31a:	9f 92       	push	r9
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	df 92       	push	r13
 324:	ef 92       	push	r14
 326:	ff 92       	push	r15
 328:	0f 93       	push	r16
 32a:	1f 93       	push	r17
 32c:	df 93       	push	r29
 32e:	cf 93       	push	r28
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	6e 97       	sbiw	r28, 0x1e	; 30
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
  init();
 340:	dc df       	rcall	.-72     	; 0x2fa <init>
  ds1621_init();
 342:	45 d1       	rcall	.+650    	; 0x5ce <ds1621_init>
  EEOpen();
 344:	02 d2       	rcall	.+1028   	; 0x74a <EEOpen>
  USART_init(UBRR);
 346:	89 e1       	ldi	r24, 0x19	; 25
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	a5 d2       	rcall	.+1354   	; 0x896 <USART_init>
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 34c:	81 b3       	in	r24, 0x11	; 17
 34e:	80 6e       	ori	r24, 0xE0	; 224
 350:	81 bb       	out	0x11, r24	; 17
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 352:	82 b3       	in	r24, 0x12	; 18
 354:	80 6e       	ori	r24, 0xE0	; 224
 356:	82 bb       	out	0x12, r24	; 18
	while(1) {
    if (should_update_temp) {
      signed int temp = getTemperature();
      sprintf(display, "%4d", temp);
 358:	04 ed       	ldi	r16, 0xD4	; 212
 35a:	10 e0       	ldi	r17, 0x00	; 0
 35c:	0f 2e       	mov	r0, r31
 35e:	f0 eb       	ldi	r31, 0xB0	; 176
 360:	ef 2e       	mov	r14, r31
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ff 2e       	mov	r15, r31
 366:	f0 2d       	mov	r31, r0
      }

      address++;
      sprintf(display, "%4d", temp);
      char str[30];
      sprintf(str, "current temperature: %4d", temp);
 368:	5e 01       	movw	r10, r28
 36a:	08 94       	sec
 36c:	a1 1c       	adc	r10, r1
 36e:	b1 1c       	adc	r11, r1
 370:	0f 2e       	mov	r0, r31
 372:	f9 eb       	ldi	r31, 0xB9	; 185
 374:	8f 2e       	mov	r8, r31
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	9f 2e       	mov	r9, r31
 37a:	f0 2d       	mov	r31, r0

    if (state == TURBO) {
      signed int temp = getTemperature();

      if (EEWriteByte(address, temp) == 0 ) {
        strcpy(display, "0001");
 37c:	c8 01       	movw	r24, r16
 37e:	50 2e       	mov	r5, r16
 380:	49 2e       	mov	r4, r25
 382:	0f 2e       	mov	r0, r31
 384:	f4 eb       	ldi	r31, 0xB4	; 180
 386:	6f 2e       	mov	r6, r31
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	7f 2e       	mov	r7, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	0f 2e       	mov	r0, r31
 390:	f5 e0       	ldi	r31, 0x05	; 5
 392:	3f 2e       	mov	r3, r31
 394:	f0 2d       	mov	r31, r0
  EEOpen();
  USART_init(UBRR);
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
	while(1) {
    if (should_update_temp) {
 396:	80 91 d2 00 	lds	r24, 0x00D2
 39a:	90 91 d3 00 	lds	r25, 0x00D3
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	09 f1       	breq	.+66     	; 0x3e4 <main+0xd6>
      signed int temp = getTemperature();
 3a2:	6d d1       	rcall	.+730    	; 0x67e <getTemperature>
      sprintf(display, "%4d", temp);
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <main+0x98>
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <main+0x9a>
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <main+0x9c>
 3aa:	ed b7       	in	r30, 0x3d	; 61
 3ac:	fe b7       	in	r31, 0x3e	; 62
 3ae:	31 96       	adiw	r30, 0x01	; 1
 3b0:	ad b7       	in	r26, 0x3d	; 61
 3b2:	be b7       	in	r27, 0x3e	; 62
 3b4:	12 96       	adiw	r26, 0x02	; 2
 3b6:	1c 93       	st	X, r17
 3b8:	0e 93       	st	-X, r16
 3ba:	11 97       	sbiw	r26, 0x01	; 1
 3bc:	f3 82       	std	Z+3, r15	; 0x03
 3be:	e2 82       	std	Z+2, r14	; 0x02
  USART_init(UBRR);
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
	while(1) {
    if (should_update_temp) {
      signed int temp = getTemperature();
 3c0:	99 27       	eor	r25, r25
 3c2:	87 fd       	sbrc	r24, 7
 3c4:	90 95       	com	r25
 3c6:	95 83       	std	Z+5, r25	; 0x05
 3c8:	84 83       	std	Z+4, r24	; 0x04
      sprintf(display, "%4d", temp);
 3ca:	83 d2       	rcall	.+1286   	; 0x8d2 <sprintf>
      should_update_temp = 0;
 3cc:	10 92 d3 00 	sts	0x00D3, r1
 3d0:	10 92 d2 00 	sts	0x00D2, r1
 3d4:	8d b7       	in	r24, 0x3d	; 61
 3d6:	9e b7       	in	r25, 0x3e	; 62
 3d8:	06 96       	adiw	r24, 0x06	; 6
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	9e bf       	out	0x3e, r25	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	8d bf       	out	0x3d, r24	; 61
    }

    if (state == TURBO) {
 3e4:	80 91 e2 00 	lds	r24, 0x00E2
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0xe0>
 3ec:	47 c0       	rjmp	.+142    	; 0x47c <__stack+0x1d>
      signed int temp = getTemperature();
 3ee:	47 d1       	rcall	.+654    	; 0x67e <getTemperature>
 3f0:	68 2f       	mov	r22, r24
 3f2:	c8 2e       	mov	r12, r24
 3f4:	dd 24       	eor	r13, r13
 3f6:	c7 fc       	sbrc	r12, 7
 3f8:	d0 94       	com	r13

      if (EEWriteByte(address, temp) == 0 ) {
 3fa:	80 91 e5 00 	lds	r24, 0x00E5
 3fe:	90 91 e6 00 	lds	r25, 0x00E6
 402:	a9 d1       	rcall	.+850    	; 0x756 <EEWriteByte>
 404:	88 23       	and	r24, r24
 406:	41 f4       	brne	.+16     	; 0x418 <main+0x10a>
        strcpy(display, "0001");
 408:	a5 2d       	mov	r26, r5
 40a:	b4 2d       	mov	r27, r4
 40c:	f3 01       	movw	r30, r6
 40e:	83 2d       	mov	r24, r3
 410:	01 90       	ld	r0, Z+
 412:	0d 92       	st	X+, r0
 414:	81 50       	subi	r24, 0x01	; 1
 416:	e1 f7       	brne	.-8      	; 0x410 <main+0x102>
      }

      address++;
 418:	80 91 e5 00 	lds	r24, 0x00E5
 41c:	90 91 e6 00 	lds	r25, 0x00E6
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	90 93 e6 00 	sts	0x00E6, r25
 426:	80 93 e5 00 	sts	0x00E5, r24
      sprintf(display, "%4d", temp);
 42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x11e>
 42c:	00 d0       	rcall	.+0      	; 0x42e <main+0x120>
 42e:	00 d0       	rcall	.+0      	; 0x430 <main+0x122>
 430:	ed b7       	in	r30, 0x3d	; 61
 432:	fe b7       	in	r31, 0x3e	; 62
 434:	31 96       	adiw	r30, 0x01	; 1
 436:	ad b7       	in	r26, 0x3d	; 61
 438:	be b7       	in	r27, 0x3e	; 62
 43a:	12 96       	adiw	r26, 0x02	; 2
 43c:	1c 93       	st	X, r17
 43e:	0e 93       	st	-X, r16
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	f3 82       	std	Z+3, r15	; 0x03
 444:	e2 82       	std	Z+2, r14	; 0x02
 446:	d5 82       	std	Z+5, r13	; 0x05
 448:	c4 82       	std	Z+4, r12	; 0x04
 44a:	43 d2       	rcall	.+1158   	; 0x8d2 <sprintf>
      char str[30];
      sprintf(str, "current temperature: %4d", temp);
 44c:	ed b7       	in	r30, 0x3d	; 61
 44e:	fe b7       	in	r31, 0x3e	; 62
 450:	31 96       	adiw	r30, 0x01	; 1
 452:	ad b7       	in	r26, 0x3d	; 61
 454:	be b7       	in	r27, 0x3e	; 62
 456:	12 96       	adiw	r26, 0x02	; 2
 458:	bc 92       	st	X, r11
 45a:	ae 92       	st	-X, r10
 45c:	11 97       	sbiw	r26, 0x01	; 1
 45e:	93 82       	std	Z+3, r9	; 0x03
 460:	82 82       	std	Z+2, r8	; 0x02
 462:	d5 82       	std	Z+5, r13	; 0x05
 464:	c4 82       	std	Z+4, r12	; 0x04
 466:	35 d2       	rcall	.+1130   	; 0x8d2 <sprintf>
      UART_println(str);
 468:	8d b7       	in	r24, 0x3d	; 61
 46a:	9e b7       	in	r25, 0x3e	; 62
 46c:	06 96       	adiw	r24, 0x06	; 6
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	9e bf       	out	0x3e, r25	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	8d bf       	out	0x3d, r24	; 61
 478:	c5 01       	movw	r24, r10
 47a:	26 d2       	rcall	.+1100   	; 0x8c8 <UART_println>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47c:	a7 ee       	ldi	r26, 0xE7	; 231
 47e:	b3 e0       	ldi	r27, 0x03	; 3
 480:	11 97       	sbiw	r26, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
 484:	00 c0       	rjmp	.+0      	; 0x486 <__stack+0x27>
 486:	00 00       	nop
 488:	86 cf       	rjmp	.-244    	; 0x396 <main+0x88>

0000048a <char_to_code>:

char display[] = "    ";

unsigned int char_to_code(char symbol) {
    unsigned int code;
    switch (symbol) {
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	80 97       	sbiw	r24, 0x20	; 32
 48e:	80 34       	cpi	r24, 0x40	; 64
 490:	91 05       	cpc	r25, r1
 492:	90 f5       	brcc	.+100    	; 0x4f8 <char_to_code+0x6e>
 494:	8d 5e       	subi	r24, 0xED	; 237
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	08 95       	ret
        case '-':
            code = 0b10111111;
 49e:	2f eb       	ldi	r18, 0xBF	; 191
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	2f c0       	rjmp	.+94     	; 0x502 <char_to_code+0x78>
            break;
        case '_':
            code = 0b11110111;
            break;
        case '0':
            code = 0b11000000;
 4a4:	20 ec       	ldi	r18, 0xC0	; 192
 4a6:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4a8:	2c c0       	rjmp	.+88     	; 0x502 <char_to_code+0x78>
        case '1':
            code = 0b11111001;
 4aa:	29 ef       	ldi	r18, 0xF9	; 249
 4ac:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4ae:	29 c0       	rjmp	.+82     	; 0x502 <char_to_code+0x78>
        case '2':
            code = 0b10100100;
 4b0:	24 ea       	ldi	r18, 0xA4	; 164
 4b2:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4b4:	26 c0       	rjmp	.+76     	; 0x502 <char_to_code+0x78>
        case '3':
            code = 0b10110000;
 4b6:	20 eb       	ldi	r18, 0xB0	; 176
 4b8:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4ba:	23 c0       	rjmp	.+70     	; 0x502 <char_to_code+0x78>
        case '4':
            code = 0b10011001;
 4bc:	29 e9       	ldi	r18, 0x99	; 153
 4be:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4c0:	20 c0       	rjmp	.+64     	; 0x502 <char_to_code+0x78>
        case '5':
            code = 0b10010010;
 4c2:	22 e9       	ldi	r18, 0x92	; 146
 4c4:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4c6:	1d c0       	rjmp	.+58     	; 0x502 <char_to_code+0x78>
        case '6':
            code = 0b10000010;
 4c8:	22 e8       	ldi	r18, 0x82	; 130
 4ca:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4cc:	1a c0       	rjmp	.+52     	; 0x502 <char_to_code+0x78>
        case '7':
            code = 0b11111000;
 4ce:	28 ef       	ldi	r18, 0xF8	; 248
 4d0:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4d2:	17 c0       	rjmp	.+46     	; 0x502 <char_to_code+0x78>
        case '8':
            code = 0b10000000;
 4d4:	20 e8       	ldi	r18, 0x80	; 128
 4d6:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4d8:	14 c0       	rjmp	.+40     	; 0x502 <char_to_code+0x78>
        case '9':
            code = 0b10010000;
 4da:	20 e9       	ldi	r18, 0x90	; 144
 4dc:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4de:	11 c0       	rjmp	.+34     	; 0x502 <char_to_code+0x78>
        case 'C':
            code = 0b11000110;
 4e0:	26 ec       	ldi	r18, 0xC6	; 198
 4e2:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <char_to_code+0x78>
        case 'H':
            code = 0b10001001;
 4e6:	29 e8       	ldi	r18, 0x89	; 137
 4e8:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4ea:	0b c0       	rjmp	.+22     	; 0x502 <char_to_code+0x78>
        case 'L':
            code = 0b11000111;
 4ec:	27 ec       	ldi	r18, 0xC7	; 199
 4ee:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <char_to_code+0x78>
        case ' ':
            code = 0b11111111;
 4f2:	2f ef       	ldi	r18, 0xFF	; 255
 4f4:	30 e0       	ldi	r19, 0x00	; 0
            break;
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <char_to_code+0x78>
        default:
            code = 0xff;
 4f8:	2f ef       	ldi	r18, 0xFF	; 255
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <char_to_code+0x78>
    switch (symbol) {
        case '-':
            code = 0b10111111;
            break;
        case '_':
            code = 0b11110111;
 4fe:	27 ef       	ldi	r18, 0xF7	; 247
 500:	30 e0       	ldi	r19, 0x00	; 0
            break;
        default:
            code = 0xff;
    };
    return code;
}
 502:	82 2f       	mov	r24, r18
 504:	93 2f       	mov	r25, r19
 506:	08 95       	ret

00000508 <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
 508:	1f 93       	push	r17
 50a:	18 2f       	mov	r17, r24
 50c:	86 2f       	mov	r24, r22
    unsigned int displayDigit = char_to_code(digit);
 50e:	bd df       	rcall	.-134    	; 0x48a <char_to_code>
 510:	9c 01       	movw	r18, r24
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
 512:	88 b3       	in	r24, 0x18	; 24
 514:	8f 63       	ori	r24, 0x3F	; 63
 516:	88 bb       	out	0x18, r24	; 24
    PORTD |= (1<<PD3);// clr data pin
 518:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
 51a:	85 b3       	in	r24, 0x15	; 21
 51c:	80 7f       	andi	r24, 0xF0	; 240
 51e:	85 bb       	out	0x15, r24	; 21
    PORTC |= (1 << number); // set addr
 520:	65 b3       	in	r22, 0x15	; 21
 522:	41 e0       	ldi	r20, 0x01	; 1
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	ca 01       	movw	r24, r20
 528:	02 c0       	rjmp	.+4      	; 0x52e <send_digit_to_display+0x26>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	1a 95       	dec	r17
 530:	e2 f7       	brpl	.-8      	; 0x52a <send_digit_to_display+0x22>
 532:	86 2b       	or	r24, r22
 534:	85 bb       	out	0x15, r24	; 21
    
    PORTB = displayDigit; // set data1
 536:	28 bb       	out	0x18, r18	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
 538:	82 b3       	in	r24, 0x12	; 18
 53a:	36 95       	lsr	r19
 53c:	27 95       	ror	r18
 53e:	36 95       	lsr	r19
 540:	27 95       	ror	r18
 542:	36 95       	lsr	r19
 544:	27 95       	ror	r18
 546:	27 6f       	ori	r18, 0xF7	; 247
 548:	28 23       	and	r18, r24
 54a:	22 bb       	out	0x12, r18	; 18
 54c:	87 ee       	ldi	r24, 0xE7	; 231
 54e:	93 e0       	ldi	r25, 0x03	; 3
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <send_digit_to_display+0x48>
 554:	00 c0       	rjmp	.+0      	; 0x556 <send_digit_to_display+0x4e>
 556:	00 00       	nop
    _delay_ms(1);
}
 558:	1f 91       	pop	r17
 55a:	08 95       	ret

0000055c <printDisplay>:

void printDisplay() {
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
    for (short int i = 0; i < 4; ++i) {
 564:	04 ed       	ldi	r16, 0xD4	; 212
 566:	10 e0       	ldi	r17, 0x00	; 0
 568:	c0 e0       	ldi	r28, 0x00	; 0
 56a:	d0 e0       	ldi	r29, 0x00	; 0
        send_digit_to_display(i, display[i]);
 56c:	f8 01       	movw	r30, r16
 56e:	61 91       	ld	r22, Z+
 570:	8f 01       	movw	r16, r30
 572:	ce 01       	movw	r24, r28
 574:	c9 df       	rcall	.-110    	; 0x508 <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
 576:	21 96       	adiw	r28, 0x01	; 1
 578:	c4 30       	cpi	r28, 0x04	; 4
 57a:	d1 05       	cpc	r29, r1
 57c:	b9 f7       	brne	.-18     	; 0x56c <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	08 95       	ret

00000588 <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 588:	82 b3       	in	r24, 0x12	; 18
 58a:	8f 71       	andi	r24, 0x1F	; 31
 58c:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD5);
 58e:	95 9a       	sbi	0x12, 5	; 18
  if (PIND & (1 << PD2)) {
 590:	82 9b       	sbis	0x10, 2	; 16
 592:	05 c0       	rjmp	.+10     	; 0x59e <number_key_pressed+0x16>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 594:	82 b3       	in	r24, 0x12	; 18
 596:	80 6e       	ori	r24, 0xE0	; 224
 598:	82 bb       	out	0x12, r24	; 18
    return 0;
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 59e:	82 b3       	in	r24, 0x12	; 18
 5a0:	8f 71       	andi	r24, 0x1F	; 31
 5a2:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD6);
 5a4:	96 9a       	sbi	0x12, 6	; 18
  if (PIND & (1 << PD2)) {
 5a6:	82 9b       	sbis	0x10, 2	; 16
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <number_key_pressed+0x2c>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 5aa:	82 b3       	in	r24, 0x12	; 18
 5ac:	80 6e       	ori	r24, 0xE0	; 224
 5ae:	82 bb       	out	0x12, r24	; 18
    return 1;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	08 95       	ret
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
 5b4:	82 b3       	in	r24, 0x12	; 18
 5b6:	8f 71       	andi	r24, 0x1F	; 31
 5b8:	82 bb       	out	0x12, r24	; 18
  PORTD |= (1 << PD7);
 5ba:	97 9a       	sbi	0x12, 7	; 18
  if (PIND & (1 << PD2)) {
 5bc:	82 9b       	sbis	0x10, 2	; 16
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <number_key_pressed+0x42>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
 5c0:	82 b3       	in	r24, 0x12	; 18
 5c2:	80 6e       	ori	r24, 0xE0	; 224
 5c4:	82 bb       	out	0x12, r24	; 18
    return 2;
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	08 95       	ret
  // }

  // if (!isButton2) {
  //   return 2;
  // }
  return 42;
 5ca:	8a e2       	ldi	r24, 0x2A	; 42
}
 5cc:	08 95       	ret

000005ce <ds1621_init>:
//******************************************************************    
void ds1621_init()
{
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
 5ce:	65 d0       	rcall	.+202    	; 0x69a <i2c_start>
   if(errorStatus == 1)
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	11 f4       	brne	.+4      	; 0x5d8 <ds1621_init+0xa>
   {
   	 i2c_stop();
 5d4:	b7 d0       	rcall	.+366    	; 0x744 <i2c_stop>
  	 return;
 5d6:	08 95       	ret
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 5d8:	80 e9       	ldi	r24, 0x90	; 144
 5da:	77 d0       	rcall	.+238    	; 0x6ca <i2c_sendAddress>
   
   if(errorStatus == 1)
 5dc:	81 30       	cpi	r24, 0x01	; 1
 5de:	11 f4       	brne	.+4      	; 0x5e4 <ds1621_init+0x16>
   {
  	 i2c_stop();
 5e0:	b1 d0       	rcall	.+354    	; 0x744 <i2c_stop>
  	 return;
 5e2:	08 95       	ret
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
 5e4:	8c ea       	ldi	r24, 0xAC	; 172
 5e6:	87 d0       	rcall	.+270    	; 0x6f6 <i2c_sendData>
   if(errorStatus == 1)
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <ds1621_init+0x22>
   {
  	 i2c_stop();
 5ec:	ab d0       	rcall	.+342    	; 0x744 <i2c_stop>
  	 return;
 5ee:	08 95       	ret
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
 5f0:	83 e0       	ldi	r24, 0x03	; 3
 5f2:	81 d0       	rcall	.+258    	; 0x6f6 <i2c_sendData>
   if(errorStatus == 1)
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	11 f4       	brne	.+4      	; 0x5fc <ds1621_init+0x2e>
   {
  	 i2c_stop();
 5f8:	a5 d0       	rcall	.+330    	; 0x744 <i2c_stop>
	 return;
 5fa:	08 95       	ret
   } 

   i2c_stop();
 5fc:	a3 d0       	rcall	.+326    	; 0x744 <i2c_stop>
 5fe:	08 95       	ret

00000600 <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
 600:	1f 93       	push	r17
 602:	18 2f       	mov	r17, r24
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
 604:	4a d0       	rcall	.+148    	; 0x69a <i2c_start>
   if(errorStatus == 1)
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	11 f4       	brne	.+4      	; 0x60e <ds1621_sendCommand+0xe>
   {
   	 i2c_stop();
 60a:	9c d0       	rcall	.+312    	; 0x744 <i2c_stop>
	 return;
 60c:	0d c0       	rjmp	.+26     	; 0x628 <ds1621_sendCommand+0x28>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 60e:	80 e9       	ldi	r24, 0x90	; 144
 610:	5c d0       	rcall	.+184    	; 0x6ca <i2c_sendAddress>
   
   if(errorStatus == 1)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	11 f4       	brne	.+4      	; 0x61a <ds1621_sendCommand+0x1a>
   {
	 i2c_stop();
 616:	96 d0       	rcall	.+300    	; 0x744 <i2c_stop>
	 return;
 618:	07 c0       	rjmp	.+14     	; 0x628 <ds1621_sendCommand+0x28>
   } 
   
   errorStatus = i2c_sendData(command);
 61a:	81 2f       	mov	r24, r17
 61c:	6c d0       	rcall	.+216    	; 0x6f6 <i2c_sendData>
   if(errorStatus == 1)
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	11 f4       	brne	.+4      	; 0x626 <ds1621_sendCommand+0x26>
   {
	 i2c_stop();
 622:	90 d0       	rcall	.+288    	; 0x744 <i2c_stop>
	 return;
 624:	01 c0       	rjmp	.+2      	; 0x628 <ds1621_sendCommand+0x28>
   } 

   i2c_stop();
 626:	8e d0       	rcall	.+284    	; 0x744 <i2c_stop>
}
 628:	1f 91       	pop	r17
 62a:	08 95       	ret

0000062c <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
 62c:	1f 93       	push	r17
 62e:	18 2f       	mov	r17, r24
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
 630:	34 d0       	rcall	.+104    	; 0x69a <i2c_start>
   if(errorStatus == 1)
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	19 f4       	brne	.+6      	; 0x63c <ds1621_readValue+0x10>
   {
   	 i2c_stop();
 636:	86 d0       	rcall	.+268    	; 0x744 <i2c_stop>
	 return (0);
 638:	10 e0       	ldi	r17, 0x00	; 0
 63a:	1e c0       	rjmp	.+60     	; 0x678 <ds1621_readValue+0x4c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
 63c:	80 e9       	ldi	r24, 0x90	; 144
 63e:	45 d0       	rcall	.+138    	; 0x6ca <i2c_sendAddress>
   
   if(errorStatus == 1)
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	19 f4       	brne	.+6      	; 0x64a <ds1621_readValue+0x1e>
   {
	 i2c_stop();
 644:	7f d0       	rcall	.+254    	; 0x744 <i2c_stop>
	 return (0);
 646:	10 e0       	ldi	r17, 0x00	; 0
 648:	17 c0       	rjmp	.+46     	; 0x678 <ds1621_readValue+0x4c>
   } 
   
   errorStatus = i2c_sendData(value);
 64a:	81 2f       	mov	r24, r17
 64c:	54 d0       	rcall	.+168    	; 0x6f6 <i2c_sendData>
   if(errorStatus == 1)
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	19 f4       	brne	.+6      	; 0x658 <ds1621_readValue+0x2c>
   {
	 i2c_stop();
 652:	78 d0       	rcall	.+240    	; 0x744 <i2c_stop>
	 return (0);
 654:	10 e0       	ldi	r17, 0x00	; 0
 656:	10 c0       	rjmp	.+32     	; 0x678 <ds1621_readValue+0x4c>
   } 

    errorStatus = i2c_repeatStart();
 658:	2c d0       	rcall	.+88     	; 0x6b2 <i2c_repeatStart>
   if(errorStatus == 1)
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	19 f4       	brne	.+6      	; 0x664 <ds1621_readValue+0x38>
   {
   	 i2c_stop();
 65e:	72 d0       	rcall	.+228    	; 0x744 <i2c_stop>
	 return (0);
 660:	10 e0       	ldi	r17, 0x00	; 0
 662:	0a c0       	rjmp	.+20     	; 0x678 <ds1621_readValue+0x4c>
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
 664:	81 e9       	ldi	r24, 0x91	; 145
 666:	31 d0       	rcall	.+98     	; 0x6ca <i2c_sendAddress>
   
   if(errorStatus == 1)
 668:	81 30       	cpi	r24, 0x01	; 1
 66a:	19 f4       	brne	.+6      	; 0x672 <ds1621_readValue+0x46>
   {
	 i2c_stop();
 66c:	6b d0       	rcall	.+214    	; 0x744 <i2c_stop>
	 return (0);
 66e:	10 e0       	ldi	r17, 0x00	; 0
 670:	03 c0       	rjmp	.+6      	; 0x678 <ds1621_readValue+0x4c>
   } 
 
   data = i2c_receiveData_NACK(); 
 672:	5b d0       	rcall	.+182    	; 0x72a <i2c_receiveData_NACK>
 674:	18 2f       	mov	r17, r24
   
   i2c_stop();
 676:	66 d0       	rcall	.+204    	; 0x744 <i2c_stop>
   
   return (data);
}	  
 678:	81 2f       	mov	r24, r17
 67a:	1f 91       	pop	r17
 67c:	08 95       	ret

0000067e <getTemperature>:
//******************************************************************
//Function to read 
//******************************************************************    
signed char getTemperature(void)
{ 
  ds1621_sendCommand ( START_CONVERT );
 67e:	8e ee       	ldi	r24, 0xEE	; 238
 680:	bf df       	rcall	.-130    	; 0x600 <ds1621_sendCommand>
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	94 e3       	ldi	r25, 0x34	; 52
 686:	ac e0       	ldi	r26, 0x0C	; 12
 688:	81 50       	subi	r24, 0x01	; 1
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	a0 40       	sbci	r26, 0x00	; 0
 68e:	e1 f7       	brne	.-8      	; 0x688 <getTemperature+0xa>
 690:	00 c0       	rjmp	.+0      	; 0x692 <getTemperature+0x14>
 692:	00 00       	nop
  
  _delay_ms(1000);
  
  return ds1621_readValue ( READ_TEMP );
 694:	8a ea       	ldi	r24, 0xAA	; 170
 696:	ca df       	rcall	.-108    	; 0x62c <ds1621_readValue>
 698:	08 95       	ret

0000069a <i2c_start>:
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
 69a:	84 ea       	ldi	r24, 0xA4	; 164
 69c:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 69e:	06 b6       	in	r0, 0x36	; 54
 6a0:	07 fe       	sbrs	r0, 7
 6a2:	fd cf       	rjmp	.-6      	; 0x69e <i2c_start+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
 6a4:	91 b1       	in	r25, 0x01	; 1
 6a6:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	98 30       	cpi	r25, 0x08	; 8
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <i2c_start+0x16>
 6ae:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 6b0:	08 95       	ret

000006b2 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
 6b2:	84 ea       	ldi	r24, 0xA4	; 164
 6b4:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1 << TWINT)))
 6b6:	06 b6       	in	r0, 0x36	; 54
 6b8:	07 fe       	sbrs	r0, 7
 6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <i2c_repeatStart+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
 6bc:	91 b1       	in	r25, 0x01	; 1
 6be:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 31       	cpi	r25, 0x10	; 16
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <i2c_repeatStart+0x16>
 6c6:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 6c8:	08 95       	ret

000006ca <i2c_sendAddress>:
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
  unsigned char STATUS;

  if ((address & 0x01) == 0)
 6ca:	80 fd       	sbrc	r24, 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <i2c_sendAddress+0x8>
    STATUS = MT_SLA_ACK;
 6ce:	28 e1       	ldi	r18, 0x18	; 24
 6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <i2c_sendAddress+0xa>
  else
    STATUS = MR_SLA_ACK;
 6d2:	20 e4       	ldi	r18, 0x40	; 64

  TWDR = address;
 6d4:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
 6d6:	84 e8       	ldi	r24, 0x84	; 132
 6d8:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
 6da:	06 b6       	in	r0, 0x36	; 54
 6dc:	07 fe       	sbrs	r0, 7
 6de:	fd cf       	rjmp	.-6      	; 0x6da <i2c_sendAddress+0x10>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
 6e0:	41 b1       	in	r20, 0x01	; 1
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	48 7f       	andi	r20, 0xF8	; 248
 6e6:	50 70       	andi	r21, 0x00	; 0
 6e8:	30 e0       	ldi	r19, 0x00	; 0
    return (0);
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	42 17       	cp	r20, r18
 6ee:	53 07       	cpc	r21, r19
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <i2c_sendAddress+0x2a>
 6f2:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
 6f4:	08 95       	ret

000006f6 <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
  TWDR = data;
 6f6:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
 6f8:	84 e8       	ldi	r24, 0x84	; 132
 6fa:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
 6fc:	06 b6       	in	r0, 0x36	; 54
 6fe:	07 fe       	sbrs	r0, 7
 700:	fd cf       	rjmp	.-6      	; 0x6fc <i2c_sendData+0x6>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
 702:	91 b1       	in	r25, 0x01	; 1
 704:	98 7f       	andi	r25, 0xF8	; 248
    return (1);
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	98 32       	cpi	r25, 0x28	; 40
 70a:	09 f4       	brne	.+2      	; 0x70e <i2c_sendData+0x18>
 70c:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (0);
}
 70e:	08 95       	ret

00000710 <i2c_receiveData_ACK>:
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
 710:	84 ec       	ldi	r24, 0xC4	; 196
 712:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 714:	06 b6       	in	r0, 0x36	; 54
 716:	07 fe       	sbrs	r0, 7
 718:	fd cf       	rjmp	.-6      	; 0x714 <i2c_receiveData_ACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
 71a:	81 b1       	in	r24, 0x01	; 1
 71c:	88 7f       	andi	r24, 0xF8	; 248
 71e:	80 35       	cpi	r24, 0x50	; 80
 720:	11 f4       	brne	.+4      	; 0x726 <i2c_receiveData_ACK+0x16>
    return (ERROR_CODE);

  data = TWDR;
 722:	83 b1       	in	r24, 0x03	; 3
  return (data);
 724:	08 95       	ret

  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
    return (ERROR_CODE);
 726:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
 728:	08 95       	ret

0000072a <i2c_receiveData_NACK>:
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
 72a:	84 e8       	ldi	r24, 0x84	; 132
 72c:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
 72e:	06 b6       	in	r0, 0x36	; 54
 730:	07 fe       	sbrs	r0, 7
 732:	fd cf       	rjmp	.-6      	; 0x72e <i2c_receiveData_NACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
 734:	81 b1       	in	r24, 0x01	; 1
 736:	88 7f       	andi	r24, 0xF8	; 248
 738:	88 35       	cpi	r24, 0x58	; 88
 73a:	11 f4       	brne	.+4      	; 0x740 <i2c_receiveData_NACK+0x16>
    return (ERROR_CODE);

  data = TWDR;
 73c:	83 b1       	in	r24, 0x03	; 3
  return (data);
 73e:	08 95       	ret

  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
    return (ERROR_CODE);
 740:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
 742:	08 95       	ret

00000744 <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
 744:	84 e9       	ldi	r24, 0x94	; 148
 746:	86 bf       	out	0x36, r24	; 54
}
 748:	08 95       	ret

0000074a <EEOpen>:
#include "24c64.h"

void EEOpen()
{
	//Set up TWI Module
	TWBR = 5;
 74a:	85 e0       	ldi	r24, 0x05	; 5
 74c:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
 74e:	81 b1       	in	r24, 0x01	; 1
 750:	8c 7f       	andi	r24, 0xFC	; 252
 752:	81 b9       	out	0x01, r24	; 1

}
 754:	08 95       	ret

00000756 <EEWriteByte>:
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 756:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 758:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 75a:	44 e8       	ldi	r20, 0x84	; 132
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 75c:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 75e:	06 b6       	in	r0, 0x36	; 54
 760:	07 fe       	sbrs	r0, 7
 762:	fd cf       	rjmp	.-6      	; 0x75e <EEWriteByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 764:	21 b1       	in	r18, 0x01	; 1
 766:	28 7f       	andi	r18, 0xF8	; 248
 768:	28 30       	cpi	r18, 0x08	; 8
 76a:	a1 f5       	brne	.+104    	; 0x7d4 <EEWriteByte+0x7e>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 76c:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 76e:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 770:	06 b6       	in	r0, 0x36	; 54
 772:	07 fe       	sbrs	r0, 7
 774:	fd cf       	rjmp	.-6      	; 0x770 <EEWriteByte+0x1a>
	
	}while((TWSR & 0xF8) != 0x18);
 776:	21 b1       	in	r18, 0x01	; 1
 778:	28 7f       	andi	r18, 0xF8	; 248
 77a:	28 31       	cpi	r18, 0x18	; 24
 77c:	79 f7       	brne	.-34     	; 0x75c <EEWriteByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 77e:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 780:	94 e8       	ldi	r25, 0x84	; 132
 782:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 784:	06 b6       	in	r0, 0x36	; 54
 786:	07 fe       	sbrs	r0, 7
 788:	fd cf       	rjmp	.-6      	; 0x784 <EEWriteByte+0x2e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 78a:	91 b1       	in	r25, 0x01	; 1
 78c:	98 7f       	andi	r25, 0xF8	; 248
 78e:	98 32       	cpi	r25, 0x28	; 40
 790:	19 f5       	brne	.+70     	; 0x7d8 <EEWriteByte+0x82>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 792:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 794:	84 e8       	ldi	r24, 0x84	; 132
 796:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 798:	06 b6       	in	r0, 0x36	; 54
 79a:	07 fe       	sbrs	r0, 7
 79c:	fd cf       	rjmp	.-6      	; 0x798 <EEWriteByte+0x42>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 79e:	81 b1       	in	r24, 0x01	; 1
 7a0:	88 7f       	andi	r24, 0xF8	; 248
 7a2:	88 32       	cpi	r24, 0x28	; 40
 7a4:	d9 f4       	brne	.+54     	; 0x7dc <EEWriteByte+0x86>
		return FALSE;

	//Now write DATA
	TWDR=(data);
 7a6:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 7a8:	84 e8       	ldi	r24, 0x84	; 132
 7aa:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 7ac:	06 b6       	in	r0, 0x36	; 54
 7ae:	07 fe       	sbrs	r0, 7
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <EEWriteByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 7b2:	81 b1       	in	r24, 0x01	; 1
 7b4:	88 7f       	andi	r24, 0xF8	; 248
 7b6:	88 32       	cpi	r24, 0x28	; 40
 7b8:	99 f4       	brne	.+38     	; 0x7e0 <EEWriteByte+0x8a>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 7ba:	84 e9       	ldi	r24, 0x94	; 148
 7bc:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 7be:	06 b6       	in	r0, 0x36	; 54
 7c0:	04 fc       	sbrc	r0, 4
 7c2:	fd cf       	rjmp	.-6      	; 0x7be <EEWriteByte+0x68>
 7c4:	8f ed       	ldi	r24, 0xDF	; 223
 7c6:	9e e2       	ldi	r25, 0x2E	; 46
 7c8:	01 97       	sbiw	r24, 0x01	; 1
 7ca:	f1 f7       	brne	.-4      	; 0x7c8 <EEWriteByte+0x72>
 7cc:	00 c0       	rjmp	.+0      	; 0x7ce <EEWriteByte+0x78>
 7ce:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 7e0:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
 7e2:	08 95       	ret

000007e4 <EEReadByte>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 7e4:	34 ea       	ldi	r19, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 7e6:	50 ea       	ldi	r21, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 7e8:	44 e8       	ldi	r20, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 7ea:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 7ec:	06 b6       	in	r0, 0x36	; 54
 7ee:	07 fe       	sbrs	r0, 7
 7f0:	fd cf       	rjmp	.-6      	; 0x7ec <EEReadByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
 7f2:	21 b1       	in	r18, 0x01	; 1
 7f4:	28 7f       	andi	r18, 0xF8	; 248
 7f6:	28 30       	cpi	r18, 0x08	; 8
 7f8:	09 f0       	breq	.+2      	; 0x7fc <EEReadByte+0x18>
 7fa:	41 c0       	rjmp	.+130    	; 0x87e <EEReadByte+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
 7fc:	53 b9       	out	0x03, r21	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
 7fe:	46 bf       	out	0x36, r20	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
 800:	06 b6       	in	r0, 0x36	; 54
 802:	07 fe       	sbrs	r0, 7
 804:	fd cf       	rjmp	.-6      	; 0x800 <EEReadByte+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
 806:	21 b1       	in	r18, 0x01	; 1
 808:	28 7f       	andi	r18, 0xF8	; 248
 80a:	28 31       	cpi	r18, 0x18	; 24
 80c:	71 f7       	brne	.-36     	; 0x7ea <EEReadByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
 80e:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 810:	94 e8       	ldi	r25, 0x84	; 132
 812:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 814:	06 b6       	in	r0, 0x36	; 54
 816:	07 fe       	sbrs	r0, 7
 818:	fd cf       	rjmp	.-6      	; 0x814 <EEReadByte+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 81a:	91 b1       	in	r25, 0x01	; 1
 81c:	98 7f       	andi	r25, 0xF8	; 248
 81e:	98 32       	cpi	r25, 0x28	; 40
 820:	81 f5       	brne	.+96     	; 0x882 <EEReadByte+0x9e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
 822:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 824:	84 e8       	ldi	r24, 0x84	; 132
 826:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 828:	06 b6       	in	r0, 0x36	; 54
 82a:	07 fe       	sbrs	r0, 7
 82c:	fd cf       	rjmp	.-6      	; 0x828 <EEReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
 82e:	81 b1       	in	r24, 0x01	; 1
 830:	88 7f       	andi	r24, 0xF8	; 248
 832:	88 32       	cpi	r24, 0x28	; 40
 834:	41 f5       	brne	.+80     	; 0x886 <EEReadByte+0xa2>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 836:	84 ea       	ldi	r24, 0xA4	; 164
 838:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 83a:	06 b6       	in	r0, 0x36	; 54
 83c:	07 fe       	sbrs	r0, 7
 83e:	fd cf       	rjmp	.-6      	; 0x83a <EEReadByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
 840:	81 b1       	in	r24, 0x01	; 1
 842:	88 7f       	andi	r24, 0xF8	; 248
 844:	80 31       	cpi	r24, 0x10	; 16
 846:	09 f5       	brne	.+66     	; 0x88a <EEReadByte+0xa6>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
 848:	81 ea       	ldi	r24, 0xA1	; 161
 84a:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
 84c:	84 e8       	ldi	r24, 0x84	; 132
 84e:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
 850:	06 b6       	in	r0, 0x36	; 54
 852:	07 fe       	sbrs	r0, 7
 854:	fd cf       	rjmp	.-6      	; 0x850 <EEReadByte+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
 856:	81 b1       	in	r24, 0x01	; 1
 858:	88 7f       	andi	r24, 0xF8	; 248
 85a:	80 34       	cpi	r24, 0x40	; 64
 85c:	c1 f4       	brne	.+48     	; 0x88e <EEReadByte+0xaa>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
 85e:	84 e8       	ldi	r24, 0x84	; 132
 860:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
 862:	06 b6       	in	r0, 0x36	; 54
 864:	07 fe       	sbrs	r0, 7
 866:	fd cf       	rjmp	.-6      	; 0x862 <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
 868:	81 b1       	in	r24, 0x01	; 1
 86a:	88 7f       	andi	r24, 0xF8	; 248
 86c:	88 35       	cpi	r24, 0x58	; 88
 86e:	89 f4       	brne	.+34     	; 0x892 <EEReadByte+0xae>
		return FALSE;

	//Read the data
	data=TWDR;
 870:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 872:	94 e9       	ldi	r25, 0x94	; 148
 874:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
 876:	06 b6       	in	r0, 0x36	; 54
 878:	04 fc       	sbrc	r0, 4
 87a:	fd cf       	rjmp	.-6      	; 0x876 <EEReadByte+0x92>
 87c:	08 95       	ret
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
 892:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
 894:	08 95       	ret

00000896 <USART_init>:
#include "uart.h"
#include <avr/io.h>

void USART_init(unsigned int ubrr) {
    //Настройка скорости
    UBRRH = (unsigned char)(ubrr >> 8);
 896:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
 898:	89 b9       	out	0x09, r24	; 9
    // 8 бит данных, 1 стоповый бит, без контроля четности
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 89a:	86 e8       	ldi	r24, 0x86	; 134
 89c:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << TXEN);
 89e:	88 e0       	ldi	r24, 0x08	; 8
 8a0:	8a b9       	out	0x0a, r24	; 10
}
 8a2:	08 95       	ret

000008a4 <USART_transmit>:

void USART_transmit(char data) {
    while (!(UCSRA & (1 << UDRE))); //Ждём опустошения буффера
 8a4:	5d 9b       	sbis	0x0b, 5	; 11
 8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <USART_transmit>
    UDR = data;
 8a8:	8c b9       	out	0x0c, r24	; 12
}
 8aa:	08 95       	ret

000008ac <UART_print>:

void UART_print(char* str) {
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	ec 01       	movw	r28, r24
    int i = 0;
    while (str[i] != 0x00) {
 8b2:	88 81       	ld	r24, Y
 8b4:	88 23       	and	r24, r24
 8b6:	29 f0       	breq	.+10     	; 0x8c2 <UART_print+0x16>
void USART_transmit(char data) {
    while (!(UCSRA & (1 << UDRE))); //Ждём опустошения буффера
    UDR = data;
}

void UART_print(char* str) {
 8b8:	21 96       	adiw	r28, 0x01	; 1
    int i = 0;
    while (str[i] != 0x00) {
        USART_transmit(str[i++]);
 8ba:	f4 df       	rcall	.-24     	; 0x8a4 <USART_transmit>
    UDR = data;
}

void UART_print(char* str) {
    int i = 0;
    while (str[i] != 0x00) {
 8bc:	89 91       	ld	r24, Y+
 8be:	88 23       	and	r24, r24
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <UART_print+0xe>
        USART_transmit(str[i++]);
    }
}
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <UART_println>:

void UART_println(char* str) {
    UART_print(str);
 8c8:	f1 df       	rcall	.-30     	; 0x8ac <UART_print>
    UART_print("\n\r");
 8ca:	8f ed       	ldi	r24, 0xDF	; 223
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	ee df       	rcall	.-36     	; 0x8ac <UART_print>
}
 8d0:	08 95       	ret

000008d2 <sprintf>:
 8d2:	ae e0       	ldi	r26, 0x0E	; 14
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	ee e6       	ldi	r30, 0x6E	; 110
 8d8:	f4 e0       	ldi	r31, 0x04	; 4
 8da:	a1 c2       	rjmp	.+1346   	; 0xe1e <__prologue_saves__+0x1c>
 8dc:	0d 89       	ldd	r16, Y+21	; 0x15
 8de:	1e 89       	ldd	r17, Y+22	; 0x16
 8e0:	86 e0       	ldi	r24, 0x06	; 6
 8e2:	8c 83       	std	Y+4, r24	; 0x04
 8e4:	1a 83       	std	Y+2, r17	; 0x02
 8e6:	09 83       	std	Y+1, r16	; 0x01
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	9f e7       	ldi	r25, 0x7F	; 127
 8ec:	9e 83       	std	Y+6, r25	; 0x06
 8ee:	8d 83       	std	Y+5, r24	; 0x05
 8f0:	9e 01       	movw	r18, r28
 8f2:	27 5e       	subi	r18, 0xE7	; 231
 8f4:	3f 4f       	sbci	r19, 0xFF	; 255
 8f6:	ce 01       	movw	r24, r28
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	6f 89       	ldd	r22, Y+23	; 0x17
 8fc:	78 8d       	ldd	r23, Y+24	; 0x18
 8fe:	a9 01       	movw	r20, r18
 900:	08 d0       	rcall	.+16     	; 0x912 <vfprintf>
 902:	ef 81       	ldd	r30, Y+7	; 0x07
 904:	f8 85       	ldd	r31, Y+8	; 0x08
 906:	e0 0f       	add	r30, r16
 908:	f1 1f       	adc	r31, r17
 90a:	10 82       	st	Z, r1
 90c:	2e 96       	adiw	r28, 0x0e	; 14
 90e:	e4 e0       	ldi	r30, 0x04	; 4
 910:	a2 c2       	rjmp	.+1348   	; 0xe56 <__epilogue_restores__+0x1c>

00000912 <vfprintf>:
 912:	ac e0       	ldi	r26, 0x0C	; 12
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	ee e8       	ldi	r30, 0x8E	; 142
 918:	f4 e0       	ldi	r31, 0x04	; 4
 91a:	73 c2       	rjmp	.+1254   	; 0xe02 <__prologue_saves__>
 91c:	6c 01       	movw	r12, r24
 91e:	1b 01       	movw	r2, r22
 920:	8a 01       	movw	r16, r20
 922:	fc 01       	movw	r30, r24
 924:	17 82       	std	Z+7, r1	; 0x07
 926:	16 82       	std	Z+6, r1	; 0x06
 928:	83 81       	ldd	r24, Z+3	; 0x03
 92a:	81 ff       	sbrs	r24, 1
 92c:	c4 c1       	rjmp	.+904    	; 0xcb6 <vfprintf+0x3a4>
 92e:	2e 01       	movw	r4, r28
 930:	08 94       	sec
 932:	41 1c       	adc	r4, r1
 934:	51 1c       	adc	r5, r1
 936:	f6 01       	movw	r30, r12
 938:	93 81       	ldd	r25, Z+3	; 0x03
 93a:	f1 01       	movw	r30, r2
 93c:	93 fd       	sbrc	r25, 3
 93e:	85 91       	lpm	r24, Z+
 940:	93 ff       	sbrs	r25, 3
 942:	81 91       	ld	r24, Z+
 944:	1f 01       	movw	r2, r30
 946:	88 23       	and	r24, r24
 948:	09 f4       	brne	.+2      	; 0x94c <vfprintf+0x3a>
 94a:	b1 c1       	rjmp	.+866    	; 0xcae <vfprintf+0x39c>
 94c:	85 32       	cpi	r24, 0x25	; 37
 94e:	39 f4       	brne	.+14     	; 0x95e <vfprintf+0x4c>
 950:	93 fd       	sbrc	r25, 3
 952:	85 91       	lpm	r24, Z+
 954:	93 ff       	sbrs	r25, 3
 956:	81 91       	ld	r24, Z+
 958:	1f 01       	movw	r2, r30
 95a:	85 32       	cpi	r24, 0x25	; 37
 95c:	21 f4       	brne	.+8      	; 0x966 <vfprintf+0x54>
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	b6 01       	movw	r22, r12
 962:	c5 d1       	rcall	.+906    	; 0xcee <fputc>
 964:	e8 cf       	rjmp	.-48     	; 0x936 <vfprintf+0x24>
 966:	ee 24       	eor	r14, r14
 968:	ff 24       	eor	r15, r15
 96a:	20 e0       	ldi	r18, 0x00	; 0
 96c:	20 32       	cpi	r18, 0x20	; 32
 96e:	b0 f4       	brcc	.+44     	; 0x99c <vfprintf+0x8a>
 970:	8b 32       	cpi	r24, 0x2B	; 43
 972:	69 f0       	breq	.+26     	; 0x98e <vfprintf+0x7c>
 974:	8c 32       	cpi	r24, 0x2C	; 44
 976:	28 f4       	brcc	.+10     	; 0x982 <vfprintf+0x70>
 978:	80 32       	cpi	r24, 0x20	; 32
 97a:	51 f0       	breq	.+20     	; 0x990 <vfprintf+0x7e>
 97c:	83 32       	cpi	r24, 0x23	; 35
 97e:	71 f4       	brne	.+28     	; 0x99c <vfprintf+0x8a>
 980:	0b c0       	rjmp	.+22     	; 0x998 <vfprintf+0x86>
 982:	8d 32       	cpi	r24, 0x2D	; 45
 984:	39 f0       	breq	.+14     	; 0x994 <vfprintf+0x82>
 986:	80 33       	cpi	r24, 0x30	; 48
 988:	49 f4       	brne	.+18     	; 0x99c <vfprintf+0x8a>
 98a:	21 60       	ori	r18, 0x01	; 1
 98c:	2c c0       	rjmp	.+88     	; 0x9e6 <vfprintf+0xd4>
 98e:	22 60       	ori	r18, 0x02	; 2
 990:	24 60       	ori	r18, 0x04	; 4
 992:	29 c0       	rjmp	.+82     	; 0x9e6 <vfprintf+0xd4>
 994:	28 60       	ori	r18, 0x08	; 8
 996:	27 c0       	rjmp	.+78     	; 0x9e6 <vfprintf+0xd4>
 998:	20 61       	ori	r18, 0x10	; 16
 99a:	25 c0       	rjmp	.+74     	; 0x9e6 <vfprintf+0xd4>
 99c:	27 fd       	sbrc	r18, 7
 99e:	2c c0       	rjmp	.+88     	; 0x9f8 <vfprintf+0xe6>
 9a0:	38 2f       	mov	r19, r24
 9a2:	30 53       	subi	r19, 0x30	; 48
 9a4:	3a 30       	cpi	r19, 0x0A	; 10
 9a6:	98 f4       	brcc	.+38     	; 0x9ce <vfprintf+0xbc>
 9a8:	26 ff       	sbrs	r18, 6
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <vfprintf+0xaa>
 9ac:	8e 2d       	mov	r24, r14
 9ae:	88 0f       	add	r24, r24
 9b0:	e8 2e       	mov	r14, r24
 9b2:	ee 0c       	add	r14, r14
 9b4:	ee 0c       	add	r14, r14
 9b6:	e8 0e       	add	r14, r24
 9b8:	e3 0e       	add	r14, r19
 9ba:	15 c0       	rjmp	.+42     	; 0x9e6 <vfprintf+0xd4>
 9bc:	8f 2d       	mov	r24, r15
 9be:	88 0f       	add	r24, r24
 9c0:	f8 2e       	mov	r15, r24
 9c2:	ff 0c       	add	r15, r15
 9c4:	ff 0c       	add	r15, r15
 9c6:	f8 0e       	add	r15, r24
 9c8:	f3 0e       	add	r15, r19
 9ca:	20 62       	ori	r18, 0x20	; 32
 9cc:	0c c0       	rjmp	.+24     	; 0x9e6 <vfprintf+0xd4>
 9ce:	8e 32       	cpi	r24, 0x2E	; 46
 9d0:	21 f4       	brne	.+8      	; 0x9da <vfprintf+0xc8>
 9d2:	26 fd       	sbrc	r18, 6
 9d4:	6c c1       	rjmp	.+728    	; 0xcae <vfprintf+0x39c>
 9d6:	20 64       	ori	r18, 0x40	; 64
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <vfprintf+0xd4>
 9da:	8c 36       	cpi	r24, 0x6C	; 108
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <vfprintf+0xd0>
 9de:	20 68       	ori	r18, 0x80	; 128
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <vfprintf+0xd4>
 9e2:	88 36       	cpi	r24, 0x68	; 104
 9e4:	49 f4       	brne	.+18     	; 0x9f8 <vfprintf+0xe6>
 9e6:	f1 01       	movw	r30, r2
 9e8:	93 fd       	sbrc	r25, 3
 9ea:	85 91       	lpm	r24, Z+
 9ec:	93 ff       	sbrs	r25, 3
 9ee:	81 91       	ld	r24, Z+
 9f0:	1f 01       	movw	r2, r30
 9f2:	88 23       	and	r24, r24
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <vfprintf+0xe6>
 9f6:	ba cf       	rjmp	.-140    	; 0x96c <vfprintf+0x5a>
 9f8:	98 2f       	mov	r25, r24
 9fa:	95 54       	subi	r25, 0x45	; 69
 9fc:	93 30       	cpi	r25, 0x03	; 3
 9fe:	18 f0       	brcs	.+6      	; 0xa06 <vfprintf+0xf4>
 a00:	90 52       	subi	r25, 0x20	; 32
 a02:	93 30       	cpi	r25, 0x03	; 3
 a04:	28 f4       	brcc	.+10     	; 0xa10 <vfprintf+0xfe>
 a06:	0c 5f       	subi	r16, 0xFC	; 252
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	ff e3       	ldi	r31, 0x3F	; 63
 a0c:	f9 83       	std	Y+1, r31	; 0x01
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <vfprintf+0x118>
 a10:	83 36       	cpi	r24, 0x63	; 99
 a12:	31 f0       	breq	.+12     	; 0xa20 <vfprintf+0x10e>
 a14:	83 37       	cpi	r24, 0x73	; 115
 a16:	71 f0       	breq	.+28     	; 0xa34 <vfprintf+0x122>
 a18:	83 35       	cpi	r24, 0x53	; 83
 a1a:	09 f0       	breq	.+2      	; 0xa1e <vfprintf+0x10c>
 a1c:	5c c0       	rjmp	.+184    	; 0xad6 <vfprintf+0x1c4>
 a1e:	21 c0       	rjmp	.+66     	; 0xa62 <vfprintf+0x150>
 a20:	f8 01       	movw	r30, r16
 a22:	80 81       	ld	r24, Z
 a24:	89 83       	std	Y+1, r24	; 0x01
 a26:	0e 5f       	subi	r16, 0xFE	; 254
 a28:	1f 4f       	sbci	r17, 0xFF	; 255
 a2a:	42 01       	movw	r8, r4
 a2c:	71 e0       	ldi	r23, 0x01	; 1
 a2e:	a7 2e       	mov	r10, r23
 a30:	b1 2c       	mov	r11, r1
 a32:	15 c0       	rjmp	.+42     	; 0xa5e <vfprintf+0x14c>
 a34:	62 e0       	ldi	r22, 0x02	; 2
 a36:	66 2e       	mov	r6, r22
 a38:	71 2c       	mov	r7, r1
 a3a:	60 0e       	add	r6, r16
 a3c:	71 1e       	adc	r7, r17
 a3e:	f8 01       	movw	r30, r16
 a40:	80 80       	ld	r8, Z
 a42:	91 80       	ldd	r9, Z+1	; 0x01
 a44:	26 ff       	sbrs	r18, 6
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <vfprintf+0x13c>
 a48:	6e 2d       	mov	r22, r14
 a4a:	70 e0       	ldi	r23, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <vfprintf+0x140>
 a4e:	6f ef       	ldi	r22, 0xFF	; 255
 a50:	7f ef       	ldi	r23, 0xFF	; 255
 a52:	c4 01       	movw	r24, r8
 a54:	2c 87       	std	Y+12, r18	; 0x0c
 a56:	40 d1       	rcall	.+640    	; 0xcd8 <strnlen>
 a58:	5c 01       	movw	r10, r24
 a5a:	83 01       	movw	r16, r6
 a5c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a5e:	2f 77       	andi	r18, 0x7F	; 127
 a60:	16 c0       	rjmp	.+44     	; 0xa8e <vfprintf+0x17c>
 a62:	52 e0       	ldi	r21, 0x02	; 2
 a64:	65 2e       	mov	r6, r21
 a66:	71 2c       	mov	r7, r1
 a68:	60 0e       	add	r6, r16
 a6a:	71 1e       	adc	r7, r17
 a6c:	f8 01       	movw	r30, r16
 a6e:	80 80       	ld	r8, Z
 a70:	91 80       	ldd	r9, Z+1	; 0x01
 a72:	26 ff       	sbrs	r18, 6
 a74:	03 c0       	rjmp	.+6      	; 0xa7c <vfprintf+0x16a>
 a76:	6e 2d       	mov	r22, r14
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x16e>
 a7c:	6f ef       	ldi	r22, 0xFF	; 255
 a7e:	7f ef       	ldi	r23, 0xFF	; 255
 a80:	c4 01       	movw	r24, r8
 a82:	2c 87       	std	Y+12, r18	; 0x0c
 a84:	1e d1       	rcall	.+572    	; 0xcc2 <strnlen_P>
 a86:	5c 01       	movw	r10, r24
 a88:	2c 85       	ldd	r18, Y+12	; 0x0c
 a8a:	20 68       	ori	r18, 0x80	; 128
 a8c:	83 01       	movw	r16, r6
 a8e:	23 fd       	sbrc	r18, 3
 a90:	1e c0       	rjmp	.+60     	; 0xace <vfprintf+0x1bc>
 a92:	07 c0       	rjmp	.+14     	; 0xaa2 <vfprintf+0x190>
 a94:	80 e2       	ldi	r24, 0x20	; 32
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	b6 01       	movw	r22, r12
 a9a:	2c 87       	std	Y+12, r18	; 0x0c
 a9c:	28 d1       	rcall	.+592    	; 0xcee <fputc>
 a9e:	fa 94       	dec	r15
 aa0:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa2:	8f 2d       	mov	r24, r15
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	a8 16       	cp	r10, r24
 aa8:	b9 06       	cpc	r11, r25
 aaa:	a0 f3       	brcs	.-24     	; 0xa94 <vfprintf+0x182>
 aac:	10 c0       	rjmp	.+32     	; 0xace <vfprintf+0x1bc>
 aae:	f4 01       	movw	r30, r8
 ab0:	27 fd       	sbrc	r18, 7
 ab2:	85 91       	lpm	r24, Z+
 ab4:	27 ff       	sbrs	r18, 7
 ab6:	81 91       	ld	r24, Z+
 ab8:	4f 01       	movw	r8, r30
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	b6 01       	movw	r22, r12
 abe:	2c 87       	std	Y+12, r18	; 0x0c
 ac0:	16 d1       	rcall	.+556    	; 0xcee <fputc>
 ac2:	2c 85       	ldd	r18, Y+12	; 0x0c
 ac4:	f1 10       	cpse	r15, r1
 ac6:	fa 94       	dec	r15
 ac8:	08 94       	sec
 aca:	a1 08       	sbc	r10, r1
 acc:	b1 08       	sbc	r11, r1
 ace:	a1 14       	cp	r10, r1
 ad0:	b1 04       	cpc	r11, r1
 ad2:	69 f7       	brne	.-38     	; 0xaae <vfprintf+0x19c>
 ad4:	e9 c0       	rjmp	.+466    	; 0xca8 <vfprintf+0x396>
 ad6:	84 36       	cpi	r24, 0x64	; 100
 ad8:	11 f0       	breq	.+4      	; 0xade <vfprintf+0x1cc>
 ada:	89 36       	cpi	r24, 0x69	; 105
 adc:	41 f5       	brne	.+80     	; 0xb2e <vfprintf+0x21c>
 ade:	27 ff       	sbrs	r18, 7
 ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <vfprintf+0x1e0>
 ae2:	f8 01       	movw	r30, r16
 ae4:	60 81       	ld	r22, Z
 ae6:	71 81       	ldd	r23, Z+1	; 0x01
 ae8:	82 81       	ldd	r24, Z+2	; 0x02
 aea:	93 81       	ldd	r25, Z+3	; 0x03
 aec:	0c 5f       	subi	r16, 0xFC	; 252
 aee:	1f 4f       	sbci	r17, 0xFF	; 255
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <vfprintf+0x1f2>
 af2:	f8 01       	movw	r30, r16
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	88 27       	eor	r24, r24
 afa:	77 fd       	sbrc	r23, 7
 afc:	80 95       	com	r24
 afe:	98 2f       	mov	r25, r24
 b00:	0e 5f       	subi	r16, 0xFE	; 254
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	4f e6       	ldi	r20, 0x6F	; 111
 b06:	b4 2e       	mov	r11, r20
 b08:	b2 22       	and	r11, r18
 b0a:	97 ff       	sbrs	r25, 7
 b0c:	09 c0       	rjmp	.+18     	; 0xb20 <vfprintf+0x20e>
 b0e:	90 95       	com	r25
 b10:	80 95       	com	r24
 b12:	70 95       	com	r23
 b14:	61 95       	neg	r22
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	f0 e8       	ldi	r31, 0x80	; 128
 b1e:	bf 2a       	or	r11, r31
 b20:	a2 01       	movw	r20, r4
 b22:	2a e0       	ldi	r18, 0x0A	; 10
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	0f d1       	rcall	.+542    	; 0xd46 <__ultoa_invert>
 b28:	78 2e       	mov	r7, r24
 b2a:	74 18       	sub	r7, r4
 b2c:	44 c0       	rjmp	.+136    	; 0xbb6 <vfprintf+0x2a4>
 b2e:	85 37       	cpi	r24, 0x75	; 117
 b30:	31 f4       	brne	.+12     	; 0xb3e <vfprintf+0x22c>
 b32:	3f ee       	ldi	r19, 0xEF	; 239
 b34:	b3 2e       	mov	r11, r19
 b36:	b2 22       	and	r11, r18
 b38:	2a e0       	ldi	r18, 0x0A	; 10
 b3a:	30 e0       	ldi	r19, 0x00	; 0
 b3c:	25 c0       	rjmp	.+74     	; 0xb88 <vfprintf+0x276>
 b3e:	99 ef       	ldi	r25, 0xF9	; 249
 b40:	b9 2e       	mov	r11, r25
 b42:	b2 22       	and	r11, r18
 b44:	8f 36       	cpi	r24, 0x6F	; 111
 b46:	c1 f0       	breq	.+48     	; 0xb78 <vfprintf+0x266>
 b48:	80 37       	cpi	r24, 0x70	; 112
 b4a:	20 f4       	brcc	.+8      	; 0xb54 <vfprintf+0x242>
 b4c:	88 35       	cpi	r24, 0x58	; 88
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x240>
 b50:	ae c0       	rjmp	.+348    	; 0xcae <vfprintf+0x39c>
 b52:	0d c0       	rjmp	.+26     	; 0xb6e <vfprintf+0x25c>
 b54:	80 37       	cpi	r24, 0x70	; 112
 b56:	21 f0       	breq	.+8      	; 0xb60 <vfprintf+0x24e>
 b58:	88 37       	cpi	r24, 0x78	; 120
 b5a:	09 f0       	breq	.+2      	; 0xb5e <vfprintf+0x24c>
 b5c:	a8 c0       	rjmp	.+336    	; 0xcae <vfprintf+0x39c>
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x252>
 b60:	20 e1       	ldi	r18, 0x10	; 16
 b62:	b2 2a       	or	r11, r18
 b64:	b4 fe       	sbrs	r11, 4
 b66:	0b c0       	rjmp	.+22     	; 0xb7e <vfprintf+0x26c>
 b68:	84 e0       	ldi	r24, 0x04	; 4
 b6a:	b8 2a       	or	r11, r24
 b6c:	08 c0       	rjmp	.+16     	; 0xb7e <vfprintf+0x26c>
 b6e:	b4 fe       	sbrs	r11, 4
 b70:	09 c0       	rjmp	.+18     	; 0xb84 <vfprintf+0x272>
 b72:	e6 e0       	ldi	r30, 0x06	; 6
 b74:	be 2a       	or	r11, r30
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <vfprintf+0x272>
 b78:	28 e0       	ldi	r18, 0x08	; 8
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	05 c0       	rjmp	.+10     	; 0xb88 <vfprintf+0x276>
 b7e:	20 e1       	ldi	r18, 0x10	; 16
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <vfprintf+0x276>
 b84:	20 e1       	ldi	r18, 0x10	; 16
 b86:	32 e0       	ldi	r19, 0x02	; 2
 b88:	b7 fe       	sbrs	r11, 7
 b8a:	08 c0       	rjmp	.+16     	; 0xb9c <vfprintf+0x28a>
 b8c:	f8 01       	movw	r30, r16
 b8e:	60 81       	ld	r22, Z
 b90:	71 81       	ldd	r23, Z+1	; 0x01
 b92:	82 81       	ldd	r24, Z+2	; 0x02
 b94:	93 81       	ldd	r25, Z+3	; 0x03
 b96:	0c 5f       	subi	r16, 0xFC	; 252
 b98:	1f 4f       	sbci	r17, 0xFF	; 255
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <vfprintf+0x298>
 b9c:	f8 01       	movw	r30, r16
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 5f       	subi	r16, 0xFE	; 254
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	a2 01       	movw	r20, r4
 bac:	cc d0       	rcall	.+408    	; 0xd46 <__ultoa_invert>
 bae:	78 2e       	mov	r7, r24
 bb0:	74 18       	sub	r7, r4
 bb2:	ff e7       	ldi	r31, 0x7F	; 127
 bb4:	bf 22       	and	r11, r31
 bb6:	b6 fe       	sbrs	r11, 6
 bb8:	0b c0       	rjmp	.+22     	; 0xbd0 <vfprintf+0x2be>
 bba:	2e ef       	ldi	r18, 0xFE	; 254
 bbc:	b2 22       	and	r11, r18
 bbe:	7e 14       	cp	r7, r14
 bc0:	38 f4       	brcc	.+14     	; 0xbd0 <vfprintf+0x2be>
 bc2:	b4 fe       	sbrs	r11, 4
 bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <vfprintf+0x2c2>
 bc6:	b2 fc       	sbrc	r11, 2
 bc8:	05 c0       	rjmp	.+10     	; 0xbd4 <vfprintf+0x2c2>
 bca:	8f ee       	ldi	r24, 0xEF	; 239
 bcc:	b8 22       	and	r11, r24
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <vfprintf+0x2c2>
 bd0:	a7 2c       	mov	r10, r7
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <vfprintf+0x2c4>
 bd4:	ae 2c       	mov	r10, r14
 bd6:	8b 2d       	mov	r24, r11
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	b4 fe       	sbrs	r11, 4
 bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <vfprintf+0x2e6>
 bde:	fe 01       	movw	r30, r28
 be0:	e7 0d       	add	r30, r7
 be2:	f1 1d       	adc	r31, r1
 be4:	20 81       	ld	r18, Z
 be6:	20 33       	cpi	r18, 0x30	; 48
 be8:	19 f4       	brne	.+6      	; 0xbf0 <vfprintf+0x2de>
 bea:	e9 ee       	ldi	r30, 0xE9	; 233
 bec:	be 22       	and	r11, r30
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x2f0>
 bf0:	a3 94       	inc	r10
 bf2:	b2 fe       	sbrs	r11, 2
 bf4:	06 c0       	rjmp	.+12     	; 0xc02 <vfprintf+0x2f0>
 bf6:	04 c0       	rjmp	.+8      	; 0xc00 <vfprintf+0x2ee>
 bf8:	86 78       	andi	r24, 0x86	; 134
 bfa:	90 70       	andi	r25, 0x00	; 0
 bfc:	00 97       	sbiw	r24, 0x00	; 0
 bfe:	09 f0       	breq	.+2      	; 0xc02 <vfprintf+0x2f0>
 c00:	a3 94       	inc	r10
 c02:	8b 2c       	mov	r8, r11
 c04:	99 24       	eor	r9, r9
 c06:	b3 fc       	sbrc	r11, 3
 c08:	13 c0       	rjmp	.+38     	; 0xc30 <vfprintf+0x31e>
 c0a:	b0 fe       	sbrs	r11, 0
 c0c:	0e c0       	rjmp	.+28     	; 0xc2a <vfprintf+0x318>
 c0e:	af 14       	cp	r10, r15
 c10:	28 f4       	brcc	.+10     	; 0xc1c <vfprintf+0x30a>
 c12:	e7 2c       	mov	r14, r7
 c14:	ef 0c       	add	r14, r15
 c16:	ea 18       	sub	r14, r10
 c18:	af 2c       	mov	r10, r15
 c1a:	07 c0       	rjmp	.+14     	; 0xc2a <vfprintf+0x318>
 c1c:	e7 2c       	mov	r14, r7
 c1e:	05 c0       	rjmp	.+10     	; 0xc2a <vfprintf+0x318>
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	b6 01       	movw	r22, r12
 c26:	63 d0       	rcall	.+198    	; 0xcee <fputc>
 c28:	a3 94       	inc	r10
 c2a:	af 14       	cp	r10, r15
 c2c:	c8 f3       	brcs	.-14     	; 0xc20 <vfprintf+0x30e>
 c2e:	04 c0       	rjmp	.+8      	; 0xc38 <vfprintf+0x326>
 c30:	af 14       	cp	r10, r15
 c32:	10 f4       	brcc	.+4      	; 0xc38 <vfprintf+0x326>
 c34:	fa 18       	sub	r15, r10
 c36:	01 c0       	rjmp	.+2      	; 0xc3a <vfprintf+0x328>
 c38:	ff 24       	eor	r15, r15
 c3a:	84 fe       	sbrs	r8, 4
 c3c:	0e c0       	rjmp	.+28     	; 0xc5a <vfprintf+0x348>
 c3e:	80 e3       	ldi	r24, 0x30	; 48
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	b6 01       	movw	r22, r12
 c44:	54 d0       	rcall	.+168    	; 0xcee <fputc>
 c46:	82 fe       	sbrs	r8, 2
 c48:	1d c0       	rjmp	.+58     	; 0xc84 <vfprintf+0x372>
 c4a:	81 fe       	sbrs	r8, 1
 c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vfprintf+0x342>
 c4e:	88 e5       	ldi	r24, 0x58	; 88
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	10 c0       	rjmp	.+32     	; 0xc74 <vfprintf+0x362>
 c54:	88 e7       	ldi	r24, 0x78	; 120
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x362>
 c5a:	c4 01       	movw	r24, r8
 c5c:	86 78       	andi	r24, 0x86	; 134
 c5e:	90 70       	andi	r25, 0x00	; 0
 c60:	00 97       	sbiw	r24, 0x00	; 0
 c62:	81 f0       	breq	.+32     	; 0xc84 <vfprintf+0x372>
 c64:	81 fc       	sbrc	r8, 1
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x35a>
 c68:	80 e2       	ldi	r24, 0x20	; 32
 c6a:	01 c0       	rjmp	.+2      	; 0xc6e <vfprintf+0x35c>
 c6c:	8b e2       	ldi	r24, 0x2B	; 43
 c6e:	b7 fc       	sbrc	r11, 7
 c70:	8d e2       	ldi	r24, 0x2D	; 45
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	b6 01       	movw	r22, r12
 c76:	3b d0       	rcall	.+118    	; 0xcee <fputc>
 c78:	05 c0       	rjmp	.+10     	; 0xc84 <vfprintf+0x372>
 c7a:	80 e3       	ldi	r24, 0x30	; 48
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	b6 01       	movw	r22, r12
 c80:	36 d0       	rcall	.+108    	; 0xcee <fputc>
 c82:	ea 94       	dec	r14
 c84:	7e 14       	cp	r7, r14
 c86:	c8 f3       	brcs	.-14     	; 0xc7a <vfprintf+0x368>
 c88:	7a 94       	dec	r7
 c8a:	f2 01       	movw	r30, r4
 c8c:	e7 0d       	add	r30, r7
 c8e:	f1 1d       	adc	r31, r1
 c90:	80 81       	ld	r24, Z
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	b6 01       	movw	r22, r12
 c96:	2b d0       	rcall	.+86     	; 0xcee <fputc>
 c98:	77 20       	and	r7, r7
 c9a:	b1 f7       	brne	.-20     	; 0xc88 <vfprintf+0x376>
 c9c:	05 c0       	rjmp	.+10     	; 0xca8 <vfprintf+0x396>
 c9e:	80 e2       	ldi	r24, 0x20	; 32
 ca0:	90 e0       	ldi	r25, 0x00	; 0
 ca2:	b6 01       	movw	r22, r12
 ca4:	24 d0       	rcall	.+72     	; 0xcee <fputc>
 ca6:	fa 94       	dec	r15
 ca8:	ff 20       	and	r15, r15
 caa:	c9 f7       	brne	.-14     	; 0xc9e <vfprintf+0x38c>
 cac:	44 ce       	rjmp	.-888    	; 0x936 <vfprintf+0x24>
 cae:	f6 01       	movw	r30, r12
 cb0:	26 81       	ldd	r18, Z+6	; 0x06
 cb2:	37 81       	ldd	r19, Z+7	; 0x07
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <vfprintf+0x3a8>
 cb6:	2f ef       	ldi	r18, 0xFF	; 255
 cb8:	3f ef       	ldi	r19, 0xFF	; 255
 cba:	c9 01       	movw	r24, r18
 cbc:	2c 96       	adiw	r28, 0x0c	; 12
 cbe:	e2 e1       	ldi	r30, 0x12	; 18
 cc0:	bc c0       	rjmp	.+376    	; 0xe3a <__epilogue_restores__>

00000cc2 <strnlen_P>:
 cc2:	fc 01       	movw	r30, r24
 cc4:	05 90       	lpm	r0, Z+
 cc6:	61 50       	subi	r22, 0x01	; 1
 cc8:	70 40       	sbci	r23, 0x00	; 0
 cca:	01 10       	cpse	r0, r1
 ccc:	d8 f7       	brcc	.-10     	; 0xcc4 <strnlen_P+0x2>
 cce:	80 95       	com	r24
 cd0:	90 95       	com	r25
 cd2:	8e 0f       	add	r24, r30
 cd4:	9f 1f       	adc	r25, r31
 cd6:	08 95       	ret

00000cd8 <strnlen>:
 cd8:	fc 01       	movw	r30, r24
 cda:	61 50       	subi	r22, 0x01	; 1
 cdc:	70 40       	sbci	r23, 0x00	; 0
 cde:	01 90       	ld	r0, Z+
 ce0:	01 10       	cpse	r0, r1
 ce2:	d8 f7       	brcc	.-10     	; 0xcda <strnlen+0x2>
 ce4:	80 95       	com	r24
 ce6:	90 95       	com	r25
 ce8:	8e 0f       	add	r24, r30
 cea:	9f 1f       	adc	r25, r31
 cec:	08 95       	ret

00000cee <fputc>:
 cee:	0f 93       	push	r16
 cf0:	1f 93       	push	r17
 cf2:	cf 93       	push	r28
 cf4:	df 93       	push	r29
 cf6:	8c 01       	movw	r16, r24
 cf8:	eb 01       	movw	r28, r22
 cfa:	8b 81       	ldd	r24, Y+3	; 0x03
 cfc:	81 ff       	sbrs	r24, 1
 cfe:	1b c0       	rjmp	.+54     	; 0xd36 <fputc+0x48>
 d00:	82 ff       	sbrs	r24, 2
 d02:	0d c0       	rjmp	.+26     	; 0xd1e <fputc+0x30>
 d04:	2e 81       	ldd	r18, Y+6	; 0x06
 d06:	3f 81       	ldd	r19, Y+7	; 0x07
 d08:	8c 81       	ldd	r24, Y+4	; 0x04
 d0a:	9d 81       	ldd	r25, Y+5	; 0x05
 d0c:	28 17       	cp	r18, r24
 d0e:	39 07       	cpc	r19, r25
 d10:	64 f4       	brge	.+24     	; 0xd2a <fputc+0x3c>
 d12:	e8 81       	ld	r30, Y
 d14:	f9 81       	ldd	r31, Y+1	; 0x01
 d16:	01 93       	st	Z+, r16
 d18:	f9 83       	std	Y+1, r31	; 0x01
 d1a:	e8 83       	st	Y, r30
 d1c:	06 c0       	rjmp	.+12     	; 0xd2a <fputc+0x3c>
 d1e:	e8 85       	ldd	r30, Y+8	; 0x08
 d20:	f9 85       	ldd	r31, Y+9	; 0x09
 d22:	80 2f       	mov	r24, r16
 d24:	09 95       	icall
 d26:	00 97       	sbiw	r24, 0x00	; 0
 d28:	31 f4       	brne	.+12     	; 0xd36 <fputc+0x48>
 d2a:	8e 81       	ldd	r24, Y+6	; 0x06
 d2c:	9f 81       	ldd	r25, Y+7	; 0x07
 d2e:	01 96       	adiw	r24, 0x01	; 1
 d30:	9f 83       	std	Y+7, r25	; 0x07
 d32:	8e 83       	std	Y+6, r24	; 0x06
 d34:	02 c0       	rjmp	.+4      	; 0xd3a <fputc+0x4c>
 d36:	0f ef       	ldi	r16, 0xFF	; 255
 d38:	1f ef       	ldi	r17, 0xFF	; 255
 d3a:	c8 01       	movw	r24, r16
 d3c:	df 91       	pop	r29
 d3e:	cf 91       	pop	r28
 d40:	1f 91       	pop	r17
 d42:	0f 91       	pop	r16
 d44:	08 95       	ret

00000d46 <__ultoa_invert>:
 d46:	fa 01       	movw	r30, r20
 d48:	aa 27       	eor	r26, r26
 d4a:	28 30       	cpi	r18, 0x08	; 8
 d4c:	51 f1       	breq	.+84     	; 0xda2 <__ultoa_invert+0x5c>
 d4e:	20 31       	cpi	r18, 0x10	; 16
 d50:	81 f1       	breq	.+96     	; 0xdb2 <__ultoa_invert+0x6c>
 d52:	e8 94       	clt
 d54:	6f 93       	push	r22
 d56:	6e 7f       	andi	r22, 0xFE	; 254
 d58:	6e 5f       	subi	r22, 0xFE	; 254
 d5a:	7f 4f       	sbci	r23, 0xFF	; 255
 d5c:	8f 4f       	sbci	r24, 0xFF	; 255
 d5e:	9f 4f       	sbci	r25, 0xFF	; 255
 d60:	af 4f       	sbci	r26, 0xFF	; 255
 d62:	b1 e0       	ldi	r27, 0x01	; 1
 d64:	3e d0       	rcall	.+124    	; 0xde2 <__ultoa_invert+0x9c>
 d66:	b4 e0       	ldi	r27, 0x04	; 4
 d68:	3c d0       	rcall	.+120    	; 0xde2 <__ultoa_invert+0x9c>
 d6a:	67 0f       	add	r22, r23
 d6c:	78 1f       	adc	r23, r24
 d6e:	89 1f       	adc	r24, r25
 d70:	9a 1f       	adc	r25, r26
 d72:	a1 1d       	adc	r26, r1
 d74:	68 0f       	add	r22, r24
 d76:	79 1f       	adc	r23, r25
 d78:	8a 1f       	adc	r24, r26
 d7a:	91 1d       	adc	r25, r1
 d7c:	a1 1d       	adc	r26, r1
 d7e:	6a 0f       	add	r22, r26
 d80:	71 1d       	adc	r23, r1
 d82:	81 1d       	adc	r24, r1
 d84:	91 1d       	adc	r25, r1
 d86:	a1 1d       	adc	r26, r1
 d88:	20 d0       	rcall	.+64     	; 0xdca <__ultoa_invert+0x84>
 d8a:	09 f4       	brne	.+2      	; 0xd8e <__ultoa_invert+0x48>
 d8c:	68 94       	set
 d8e:	3f 91       	pop	r19
 d90:	2a e0       	ldi	r18, 0x0A	; 10
 d92:	26 9f       	mul	r18, r22
 d94:	11 24       	eor	r1, r1
 d96:	30 19       	sub	r19, r0
 d98:	30 5d       	subi	r19, 0xD0	; 208
 d9a:	31 93       	st	Z+, r19
 d9c:	de f6       	brtc	.-74     	; 0xd54 <__ultoa_invert+0xe>
 d9e:	cf 01       	movw	r24, r30
 da0:	08 95       	ret
 da2:	46 2f       	mov	r20, r22
 da4:	47 70       	andi	r20, 0x07	; 7
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	41 93       	st	Z+, r20
 daa:	b3 e0       	ldi	r27, 0x03	; 3
 dac:	0f d0       	rcall	.+30     	; 0xdcc <__ultoa_invert+0x86>
 dae:	c9 f7       	brne	.-14     	; 0xda2 <__ultoa_invert+0x5c>
 db0:	f6 cf       	rjmp	.-20     	; 0xd9e <__ultoa_invert+0x58>
 db2:	46 2f       	mov	r20, r22
 db4:	4f 70       	andi	r20, 0x0F	; 15
 db6:	40 5d       	subi	r20, 0xD0	; 208
 db8:	4a 33       	cpi	r20, 0x3A	; 58
 dba:	18 f0       	brcs	.+6      	; 0xdc2 <__ultoa_invert+0x7c>
 dbc:	49 5d       	subi	r20, 0xD9	; 217
 dbe:	31 fd       	sbrc	r19, 1
 dc0:	40 52       	subi	r20, 0x20	; 32
 dc2:	41 93       	st	Z+, r20
 dc4:	02 d0       	rcall	.+4      	; 0xdca <__ultoa_invert+0x84>
 dc6:	a9 f7       	brne	.-22     	; 0xdb2 <__ultoa_invert+0x6c>
 dc8:	ea cf       	rjmp	.-44     	; 0xd9e <__ultoa_invert+0x58>
 dca:	b4 e0       	ldi	r27, 0x04	; 4
 dcc:	a6 95       	lsr	r26
 dce:	97 95       	ror	r25
 dd0:	87 95       	ror	r24
 dd2:	77 95       	ror	r23
 dd4:	67 95       	ror	r22
 dd6:	ba 95       	dec	r27
 dd8:	c9 f7       	brne	.-14     	; 0xdcc <__ultoa_invert+0x86>
 dda:	00 97       	sbiw	r24, 0x00	; 0
 ddc:	61 05       	cpc	r22, r1
 dde:	71 05       	cpc	r23, r1
 de0:	08 95       	ret
 de2:	9b 01       	movw	r18, r22
 de4:	ac 01       	movw	r20, r24
 de6:	0a 2e       	mov	r0, r26
 de8:	06 94       	lsr	r0
 dea:	57 95       	ror	r21
 dec:	47 95       	ror	r20
 dee:	37 95       	ror	r19
 df0:	27 95       	ror	r18
 df2:	ba 95       	dec	r27
 df4:	c9 f7       	brne	.-14     	; 0xde8 <__ultoa_invert+0xa2>
 df6:	62 0f       	add	r22, r18
 df8:	73 1f       	adc	r23, r19
 dfa:	84 1f       	adc	r24, r20
 dfc:	95 1f       	adc	r25, r21
 dfe:	a0 1d       	adc	r26, r0
 e00:	08 95       	ret

00000e02 <__prologue_saves__>:
 e02:	2f 92       	push	r2
 e04:	3f 92       	push	r3
 e06:	4f 92       	push	r4
 e08:	5f 92       	push	r5
 e0a:	6f 92       	push	r6
 e0c:	7f 92       	push	r7
 e0e:	8f 92       	push	r8
 e10:	9f 92       	push	r9
 e12:	af 92       	push	r10
 e14:	bf 92       	push	r11
 e16:	cf 92       	push	r12
 e18:	df 92       	push	r13
 e1a:	ef 92       	push	r14
 e1c:	ff 92       	push	r15
 e1e:	0f 93       	push	r16
 e20:	1f 93       	push	r17
 e22:	cf 93       	push	r28
 e24:	df 93       	push	r29
 e26:	cd b7       	in	r28, 0x3d	; 61
 e28:	de b7       	in	r29, 0x3e	; 62
 e2a:	ca 1b       	sub	r28, r26
 e2c:	db 0b       	sbc	r29, r27
 e2e:	0f b6       	in	r0, 0x3f	; 63
 e30:	f8 94       	cli
 e32:	de bf       	out	0x3e, r29	; 62
 e34:	0f be       	out	0x3f, r0	; 63
 e36:	cd bf       	out	0x3d, r28	; 61
 e38:	09 94       	ijmp

00000e3a <__epilogue_restores__>:
 e3a:	2a 88       	ldd	r2, Y+18	; 0x12
 e3c:	39 88       	ldd	r3, Y+17	; 0x11
 e3e:	48 88       	ldd	r4, Y+16	; 0x10
 e40:	5f 84       	ldd	r5, Y+15	; 0x0f
 e42:	6e 84       	ldd	r6, Y+14	; 0x0e
 e44:	7d 84       	ldd	r7, Y+13	; 0x0d
 e46:	8c 84       	ldd	r8, Y+12	; 0x0c
 e48:	9b 84       	ldd	r9, Y+11	; 0x0b
 e4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4c:	b9 84       	ldd	r11, Y+9	; 0x09
 e4e:	c8 84       	ldd	r12, Y+8	; 0x08
 e50:	df 80       	ldd	r13, Y+7	; 0x07
 e52:	ee 80       	ldd	r14, Y+6	; 0x06
 e54:	fd 80       	ldd	r15, Y+5	; 0x05
 e56:	0c 81       	ldd	r16, Y+4	; 0x04
 e58:	1b 81       	ldd	r17, Y+3	; 0x03
 e5a:	aa 81       	ldd	r26, Y+2	; 0x02
 e5c:	b9 81       	ldd	r27, Y+1	; 0x01
 e5e:	ce 0f       	add	r28, r30
 e60:	d1 1d       	adc	r29, r1
 e62:	0f b6       	in	r0, 0x3f	; 63
 e64:	f8 94       	cli
 e66:	de bf       	out	0x3e, r29	; 62
 e68:	0f be       	out	0x3f, r0	; 63
 e6a:	cd bf       	out	0x3d, r28	; 61
 e6c:	ed 01       	movw	r28, r26
 e6e:	08 95       	ret

00000e70 <_exit>:
 e70:	f8 94       	cli

00000e72 <__stop_program>:
 e72:	ff cf       	rjmp	.-2      	; 0xe72 <__stop_program>

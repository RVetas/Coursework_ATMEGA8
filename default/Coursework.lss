
Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  000014f4  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000039d  00000000  00000000  00002061  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a19  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001692  00000000  00000000  00004e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002089  00000000  00000000  000064a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00008534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  00008844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001542  00000000  00000000  00008e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000006a9  00000000  00000000  0000a372  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  0000aa1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
       4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
       6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
       8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
       a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
       c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
       e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
      10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__vector_9>
      14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
      16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
      18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
      1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
      1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
      1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
      20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
      22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
      24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	12 e0       	ldi	r17, 0x02	; 2
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e4 ef       	ldi	r30, 0xF4	; 244
      3a:	f4 e1       	ldi	r31, 0x14	; 20
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a8 30       	cpi	r26, 0x08	; 8
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
      48:	61 d0       	rcall	.+194    	; 0x10c <main>
      4a:	52 ca       	rjmp	.-2908   	; 0xfffff4f0 <__eeprom_end+0xff7ef4f0>

0000004c <__bad_interrupt>:
      4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <set_up_ports>:
#include <string.h>

//Настройка портов
void set_up_ports(void) {
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
      4e:	87 b3       	in	r24, 0x17	; 23
      50:	8f 63       	ori	r24, 0x3F	; 63
      52:	87 bb       	out	0x17, r24	; 23
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
      54:	8b 9a       	sbi	0x11, 3	; 17
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
      56:	84 b3       	in	r24, 0x14	; 20
      58:	8f 60       	ori	r24, 0x0F	; 15
      5a:	84 bb       	out	0x14, r24	; 20

  // Перевод PD5,6,7 на чтение для последующей обработки кнопок
  DDRD &= ~((1 << PD5)| (1 << PD6) | (1 << PD7)); 
      5c:	81 b3       	in	r24, 0x11	; 17
      5e:	8f 71       	andi	r24, 0x1F	; 31
      60:	81 bb       	out	0x11, r24	; 17
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
      62:	82 b3       	in	r24, 0x12	; 18
      64:	80 6e       	ori	r24, 0xE0	; 224
      66:	82 bb       	out	0x12, r24	; 18
} 
      68:	08 95       	ret

0000006a <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
      6a:	1f 92       	push	r1
      6c:	0f 92       	push	r0
      6e:	0f b6       	in	r0, 0x3f	; 63
      70:	0f 92       	push	r0
      72:	11 24       	eor	r1, r1
      74:	2f 93       	push	r18
      76:	3f 93       	push	r19
      78:	4f 93       	push	r20
      7a:	5f 93       	push	r21
      7c:	6f 93       	push	r22
      7e:	7f 93       	push	r23
      80:	8f 93       	push	r24
      82:	9f 93       	push	r25
      84:	af 93       	push	r26
      86:	bf 93       	push	r27
      88:	ef 93       	push	r30
      8a:	ff 93       	push	r31
	printDisplay(display);
      8c:	8f e6       	ldi	r24, 0x6F	; 111
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	cd d0       	rcall	.+410    	; 0x22c <printDisplay>
}
      92:	ff 91       	pop	r31
      94:	ef 91       	pop	r30
      96:	bf 91       	pop	r27
      98:	af 91       	pop	r26
      9a:	9f 91       	pop	r25
      9c:	8f 91       	pop	r24
      9e:	7f 91       	pop	r23
      a0:	6f 91       	pop	r22
      a2:	5f 91       	pop	r21
      a4:	4f 91       	pop	r20
      a6:	3f 91       	pop	r19
      a8:	2f 91       	pop	r18
      aa:	0f 90       	pop	r0
      ac:	0f be       	out	0x3f, r0	; 63
      ae:	0f 90       	pop	r0
      b0:	1f 90       	pop	r1
      b2:	18 95       	reti

000000b4 <handle_buttons>:

void handle_buttons(void) {
  unsigned char button_number = number_key_pressed();
      b4:	63 d1       	rcall	.+710    	; 0x37c <number_key_pressed>

  switch (button_number) {
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	c9 f0       	breq	.+50     	; 0xec <handle_buttons+0x38>
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	50 f4       	brcc	.+20     	; 0xd2 <handle_buttons+0x1e>
    case 0:
    strcpy(display, "0000");
      be:	af e6       	ldi	r26, 0x6F	; 111
      c0:	b0 e0       	ldi	r27, 0x00	; 0
      c2:	e0 e6       	ldi	r30, 0x60	; 96
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	85 e0       	ldi	r24, 0x05	; 5
      c8:	01 90       	ld	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	81 50       	subi	r24, 0x01	; 1
      ce:	e1 f7       	brne	.-8      	; 0xc8 <handle_buttons+0x14>
      d0:	08 95       	ret
}

void handle_buttons(void) {
  unsigned char button_number = number_key_pressed();

  switch (button_number) {
      d2:	82 30       	cpi	r24, 0x02	; 2
      d4:	09 f0       	breq	.+2      	; 0xd8 <handle_buttons+0x24>
      d6:	08 95       	ret
    case 1:
    strcpy(display, "1111");
    break;

    case 2:
    strcpy(display, "2222");
      d8:	af e6       	ldi	r26, 0x6F	; 111
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	ea e6       	ldi	r30, 0x6A	; 106
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	85 e0       	ldi	r24, 0x05	; 5
      e2:	01 90       	ld	r0, Z+
      e4:	0d 92       	st	X+, r0
      e6:	81 50       	subi	r24, 0x01	; 1
      e8:	e1 f7       	brne	.-8      	; 0xe2 <handle_buttons+0x2e>
      ea:	08 95       	ret
    case 0:
    strcpy(display, "0000");
    break;

    case 1:
    strcpy(display, "1111");
      ec:	af e6       	ldi	r26, 0x6F	; 111
      ee:	b0 e0       	ldi	r27, 0x00	; 0
      f0:	e5 e6       	ldi	r30, 0x65	; 101
      f2:	f0 e0       	ldi	r31, 0x00	; 0
      f4:	85 e0       	ldi	r24, 0x05	; 5
      f6:	01 90       	ld	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	81 50       	subi	r24, 0x01	; 1
      fc:	e1 f7       	brne	.-8      	; 0xf6 <handle_buttons+0x42>
      fe:	08 95       	ret

00000100 <timer_init>:
}


//Инициализация таймера
void timer_init() {
	TIMSK |= (1 << TOIE0);
     100:	89 b7       	in	r24, 0x39	; 57
     102:	81 60       	ori	r24, 0x01	; 1
     104:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1 << CS01);
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	83 bf       	out	0x33, r24	; 51
}
     10a:	08 95       	ret

0000010c <main>:
#include <string.h>

//Настройка портов
void set_up_ports(void) {
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
     10c:	87 b3       	in	r24, 0x17	; 23
     10e:	8f 63       	ori	r24, 0x3F	; 63
     110:	87 bb       	out	0x17, r24	; 23
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
     112:	8b 9a       	sbi	0x11, 3	; 17
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
     114:	84 b3       	in	r24, 0x14	; 20
     116:	8f 60       	ori	r24, 0x0F	; 15
     118:	84 bb       	out	0x14, r24	; 20

  // Перевод PD5,6,7 на чтение для последующей обработки кнопок
  DDRD &= ~((1 << PD5)| (1 << PD6) | (1 << PD7)); 
     11a:	81 b3       	in	r24, 0x11	; 17
     11c:	8f 71       	andi	r24, 0x1F	; 31
     11e:	81 bb       	out	0x11, r24	; 17
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     120:	82 b3       	in	r24, 0x12	; 18
     122:	80 6e       	ori	r24, 0xE0	; 224
     124:	82 bb       	out	0x12, r24	; 18
}


//Инициализация таймера
void timer_init() {
	TIMSK |= (1 << TOIE0);
     126:	89 b7       	in	r24, 0x39	; 57
     128:	81 60       	ori	r24, 0x01	; 1
     12a:	89 bf       	out	0x39, r24	; 57
	TCCR0 = (1 << CS01);
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	83 bf       	out	0x33, r24	; 51
}

int main(void) {
	set_up_ports();
  timer_init();
	sei(); //Глобальное разрешение прерываний
     130:	78 94       	sei
ISR(TIMER0_OVF_vect) {
	printDisplay(display);
}

void handle_buttons(void) {
  unsigned char button_number = number_key_pressed();
     132:	24 d1       	rcall	.+584    	; 0x37c <number_key_pressed>

  switch (button_number) {
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	a1 f0       	breq	.+40     	; 0x160 <main+0x54>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	10 f5       	brcc	.+68     	; 0x180 <main+0x74>
    case 0:
    strcpy(display, "0000");
     13c:	af e6       	ldi	r26, 0x6F	; 111
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	e0 e6       	ldi	r30, 0x60	; 96
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	85 e0       	ldi	r24, 0x05	; 5
     146:	01 90       	ld	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	81 50       	subi	r24, 0x01	; 1
     14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14e:	87 ee       	ldi	r24, 0xE7	; 231
     150:	93 e0       	ldi	r25, 0x03	; 3
     152:	01 97       	sbiw	r24, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <main+0x46>
     156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x4c>
     158:	00 00       	nop
ISR(TIMER0_OVF_vect) {
	printDisplay(display);
}

void handle_buttons(void) {
  unsigned char button_number = number_key_pressed();
     15a:	10 d1       	rcall	.+544    	; 0x37c <number_key_pressed>

  switch (button_number) {
     15c:	81 30       	cpi	r24, 0x01	; 1
     15e:	61 f7       	brne	.-40     	; 0x138 <main+0x2c>
    case 0:
    strcpy(display, "0000");
    break;

    case 1:
    strcpy(display, "1111");
     160:	af e6       	ldi	r26, 0x6F	; 111
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e5 e6       	ldi	r30, 0x65	; 101
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	85 e0       	ldi	r24, 0x05	; 5
     16a:	01 90       	ld	r0, Z+
     16c:	0d 92       	st	X+, r0
     16e:	81 50       	subi	r24, 0x01	; 1
     170:	e1 f7       	brne	.-8      	; 0x16a <main+0x5e>
     172:	87 ee       	ldi	r24, 0xE7	; 231
     174:	93 e0       	ldi	r25, 0x03	; 3
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <main+0x6a>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x70>
     17c:	00 00       	nop
     17e:	ed cf       	rjmp	.-38     	; 0x15a <main+0x4e>
}

void handle_buttons(void) {
  unsigned char button_number = number_key_pressed();

  switch (button_number) {
     180:	82 30       	cpi	r24, 0x02	; 2
     182:	29 f7       	brne	.-54     	; 0x14e <main+0x42>
    case 1:
    strcpy(display, "1111");
    break;

    case 2:
    strcpy(display, "2222");
     184:	af e6       	ldi	r26, 0x6F	; 111
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	ea e6       	ldi	r30, 0x6A	; 106
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	85 e0       	ldi	r24, 0x05	; 5
     18e:	01 90       	ld	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	81 50       	subi	r24, 0x01	; 1
     194:	e1 f7       	brne	.-8      	; 0x18e <main+0x82>
     196:	87 ee       	ldi	r24, 0xE7	; 231
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x8e>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x94>
     1a0:	00 00       	nop
     1a2:	db cf       	rjmp	.-74     	; 0x15a <main+0x4e>

000001a4 <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     1a4:	80 52       	subi	r24, 0x20	; 32
     1a6:	80 34       	cpi	r24, 0x40	; 64
     1a8:	50 f4       	brcc	.+20     	; 0x1be <char_to_code+0x1a>
     1aa:	e8 2f       	mov	r30, r24
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	ee 0f       	add	r30, r30
     1b0:	ff 1f       	adc	r31, r31
     1b2:	ec 58       	subi	r30, 0x8C	; 140
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
     1b6:	20 81       	ld	r18, Z
     1b8:	31 81       	ldd	r19, Z+1	; 0x01
            break;
        default:
            code = 0xff;
    };
    return code;
}
     1ba:	c9 01       	movw	r24, r18
     1bc:	08 95       	ret
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     1be:	2f ef       	ldi	r18, 0xFF	; 255
     1c0:	30 e0       	ldi	r19, 0x00	; 0
            break;
        default:
            code = 0xff;
    };
    return code;
}
     1c2:	c9 01       	movw	r24, r18
     1c4:	08 95       	ret

000001c6 <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
     1c6:	60 52       	subi	r22, 0x20	; 32
     1c8:	60 34       	cpi	r22, 0x40	; 64
     1ca:	68 f5       	brcc	.+90     	; 0x226 <send_digit_to_display+0x60>
     1cc:	e6 2f       	mov	r30, r22
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	ee 0f       	add	r30, r30
     1d2:	ff 1f       	adc	r31, r31
     1d4:	ec 58       	subi	r30, 0x8C	; 140
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	20 81       	ld	r18, Z
     1da:	31 81       	ldd	r19, Z+1	; 0x01
     1dc:	52 2f       	mov	r21, r18
     1de:	36 95       	lsr	r19
     1e0:	27 95       	ror	r18
     1e2:	36 95       	lsr	r19
     1e4:	27 95       	ror	r18
     1e6:	36 95       	lsr	r19
     1e8:	27 95       	ror	r18
     1ea:	42 2f       	mov	r20, r18
     1ec:	47 6f       	ori	r20, 0xF7	; 247
    unsigned int displayDigit = char_to_code(digit);
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     1ee:	98 b3       	in	r25, 0x18	; 24
     1f0:	9f 63       	ori	r25, 0x3F	; 63
     1f2:	98 bb       	out	0x18, r25	; 24
    PORTD |= (1<<PD3);// clr data pin
     1f4:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     1f6:	95 b3       	in	r25, 0x15	; 21
     1f8:	90 7f       	andi	r25, 0xF0	; 240
     1fa:	95 bb       	out	0x15, r25	; 21
    PORTC |= (1 << number); // set addr
     1fc:	95 b3       	in	r25, 0x15	; 21
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	02 c0       	rjmp	.+4      	; 0x208 <send_digit_to_display+0x42>
     204:	22 0f       	add	r18, r18
     206:	33 1f       	adc	r19, r19
     208:	8a 95       	dec	r24
     20a:	e2 f7       	brpl	.-8      	; 0x204 <send_digit_to_display+0x3e>
     20c:	92 2b       	or	r25, r18
     20e:	95 bb       	out	0x15, r25	; 21
    
    PORTB = displayDigit; // set data1
     210:	58 bb       	out	0x18, r21	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     212:	82 b3       	in	r24, 0x12	; 18
     214:	84 23       	and	r24, r20
     216:	82 bb       	out	0x12, r24	; 18
     218:	87 ee       	ldi	r24, 0xE7	; 231
     21a:	93 e0       	ldi	r25, 0x03	; 3
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <send_digit_to_display+0x56>
     220:	00 c0       	rjmp	.+0      	; 0x222 <send_digit_to_display+0x5c>
     222:	00 00       	nop
    _delay_ms(1);
}
     224:	08 95       	ret
     226:	4f ef       	ldi	r20, 0xFF	; 255
     228:	5f ef       	ldi	r21, 0xFF	; 255
     22a:	e1 cf       	rjmp	.-62     	; 0x1ee <send_digit_to_display+0x28>

0000022c <printDisplay>:

void printDisplay() {
     22c:	e0 91 6f 00 	lds	r30, 0x006F
     230:	e0 52       	subi	r30, 0x20	; 32
     232:	e0 34       	cpi	r30, 0x40	; 64
     234:	08 f0       	brcs	.+2      	; 0x238 <printDisplay+0xc>
     236:	96 c0       	rjmp	.+300    	; 0x364 <printDisplay+0x138>
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ee 0f       	add	r30, r30
     23c:	ff 1f       	adc	r31, r31
     23e:	ec 58       	subi	r30, 0x8C	; 140
     240:	ff 4f       	sbci	r31, 0xFF	; 255
     242:	80 81       	ld	r24, Z
     244:	91 81       	ldd	r25, Z+1	; 0x01
     246:	28 2f       	mov	r18, r24
     248:	96 95       	lsr	r25
     24a:	87 95       	ror	r24
     24c:	96 95       	lsr	r25
     24e:	87 95       	ror	r24
     250:	96 95       	lsr	r25
     252:	87 95       	ror	r24
     254:	87 6f       	ori	r24, 0xF7	; 247
    return code;
}

void send_digit_to_display(unsigned int number, char digit) {
    unsigned int displayDigit = char_to_code(digit);
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     256:	98 b3       	in	r25, 0x18	; 24
     258:	9f 63       	ori	r25, 0x3F	; 63
     25a:	98 bb       	out	0x18, r25	; 24
    PORTD |= (1<<PD3);// clr data pin
     25c:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     25e:	95 b3       	in	r25, 0x15	; 21
     260:	90 7f       	andi	r25, 0xF0	; 240
     262:	95 bb       	out	0x15, r25	; 21
    PORTC |= (1 << number); // set addr
     264:	a8 9a       	sbi	0x15, 0	; 21
    
    PORTB = displayDigit; // set data1
     266:	28 bb       	out	0x18, r18	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     268:	92 b3       	in	r25, 0x12	; 18
     26a:	98 23       	and	r25, r24
     26c:	92 bb       	out	0x12, r25	; 18
     26e:	87 ee       	ldi	r24, 0xE7	; 231
     270:	93 e0       	ldi	r25, 0x03	; 3
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <printDisplay+0x46>
     276:	00 c0       	rjmp	.+0      	; 0x278 <printDisplay+0x4c>
     278:	00 00       	nop
     27a:	e0 91 70 00 	lds	r30, 0x0070
     27e:	e0 52       	subi	r30, 0x20	; 32
     280:	e0 34       	cpi	r30, 0x40	; 64
     282:	08 f0       	brcs	.+2      	; 0x286 <printDisplay+0x5a>
     284:	78 c0       	rjmp	.+240    	; 0x376 <printDisplay+0x14a>
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	ee 0f       	add	r30, r30
     28a:	ff 1f       	adc	r31, r31
     28c:	ec 58       	subi	r30, 0x8C	; 140
     28e:	ff 4f       	sbci	r31, 0xFF	; 255
     290:	80 81       	ld	r24, Z
     292:	91 81       	ldd	r25, Z+1	; 0x01
     294:	28 2f       	mov	r18, r24
     296:	96 95       	lsr	r25
     298:	87 95       	ror	r24
     29a:	96 95       	lsr	r25
     29c:	87 95       	ror	r24
     29e:	96 95       	lsr	r25
     2a0:	87 95       	ror	r24
     2a2:	87 6f       	ori	r24, 0xF7	; 247
    return code;
}

void send_digit_to_display(unsigned int number, char digit) {
    unsigned int displayDigit = char_to_code(digit);
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     2a4:	98 b3       	in	r25, 0x18	; 24
     2a6:	9f 63       	ori	r25, 0x3F	; 63
     2a8:	98 bb       	out	0x18, r25	; 24
    PORTD |= (1<<PD3);// clr data pin
     2aa:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     2ac:	95 b3       	in	r25, 0x15	; 21
     2ae:	90 7f       	andi	r25, 0xF0	; 240
     2b0:	95 bb       	out	0x15, r25	; 21
    PORTC |= (1 << number); // set addr
     2b2:	a9 9a       	sbi	0x15, 1	; 21
    
    PORTB = displayDigit; // set data1
     2b4:	28 bb       	out	0x18, r18	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     2b6:	92 b3       	in	r25, 0x12	; 18
     2b8:	98 23       	and	r25, r24
     2ba:	92 bb       	out	0x12, r25	; 18
     2bc:	87 ee       	ldi	r24, 0xE7	; 231
     2be:	93 e0       	ldi	r25, 0x03	; 3
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <printDisplay+0x94>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <printDisplay+0x9a>
     2c6:	00 00       	nop
     2c8:	e0 91 71 00 	lds	r30, 0x0071
     2cc:	e0 52       	subi	r30, 0x20	; 32
     2ce:	e0 34       	cpi	r30, 0x40	; 64
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <printDisplay+0xa8>
     2d2:	4e c0       	rjmp	.+156    	; 0x370 <printDisplay+0x144>
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	ec 58       	subi	r30, 0x8C	; 140
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	80 81       	ld	r24, Z
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	28 2f       	mov	r18, r24
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	96 95       	lsr	r25
     2ea:	87 95       	ror	r24
     2ec:	96 95       	lsr	r25
     2ee:	87 95       	ror	r24
     2f0:	87 6f       	ori	r24, 0xF7	; 247
    return code;
}

void send_digit_to_display(unsigned int number, char digit) {
    unsigned int displayDigit = char_to_code(digit);
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     2f2:	98 b3       	in	r25, 0x18	; 24
     2f4:	9f 63       	ori	r25, 0x3F	; 63
     2f6:	98 bb       	out	0x18, r25	; 24
    PORTD |= (1<<PD3);// clr data pin
     2f8:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     2fa:	95 b3       	in	r25, 0x15	; 21
     2fc:	90 7f       	andi	r25, 0xF0	; 240
     2fe:	95 bb       	out	0x15, r25	; 21
    PORTC |= (1 << number); // set addr
     300:	aa 9a       	sbi	0x15, 2	; 21
    
    PORTB = displayDigit; // set data1
     302:	28 bb       	out	0x18, r18	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     304:	92 b3       	in	r25, 0x12	; 18
     306:	98 23       	and	r25, r24
     308:	92 bb       	out	0x12, r25	; 18
     30a:	87 ee       	ldi	r24, 0xE7	; 231
     30c:	93 e0       	ldi	r25, 0x03	; 3
     30e:	01 97       	sbiw	r24, 0x01	; 1
     310:	f1 f7       	brne	.-4      	; 0x30e <printDisplay+0xe2>
     312:	00 c0       	rjmp	.+0      	; 0x314 <printDisplay+0xe8>
     314:	00 00       	nop
     316:	e0 91 72 00 	lds	r30, 0x0072
     31a:	e0 52       	subi	r30, 0x20	; 32
     31c:	e0 34       	cpi	r30, 0x40	; 64
     31e:	28 f5       	brcc	.+74     	; 0x36a <printDisplay+0x13e>
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	ee 0f       	add	r30, r30
     324:	ff 1f       	adc	r31, r31
     326:	ec 58       	subi	r30, 0x8C	; 140
     328:	ff 4f       	sbci	r31, 0xFF	; 255
     32a:	80 81       	ld	r24, Z
     32c:	91 81       	ldd	r25, Z+1	; 0x01
     32e:	28 2f       	mov	r18, r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	96 95       	lsr	r25
     33a:	87 95       	ror	r24
     33c:	87 6f       	ori	r24, 0xF7	; 247
    return code;
}

void send_digit_to_display(unsigned int number, char digit) {
    unsigned int displayDigit = char_to_code(digit);
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     33e:	98 b3       	in	r25, 0x18	; 24
     340:	9f 63       	ori	r25, 0x3F	; 63
     342:	98 bb       	out	0x18, r25	; 24
    PORTD |= (1<<PD3);// clr data pin
     344:	93 9a       	sbi	0x12, 3	; 18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     346:	95 b3       	in	r25, 0x15	; 21
     348:	90 7f       	andi	r25, 0xF0	; 240
     34a:	95 bb       	out	0x15, r25	; 21
    PORTC |= (1 << number); // set addr
     34c:	ab 9a       	sbi	0x15, 3	; 21
    
    PORTB = displayDigit; // set data1
     34e:	28 bb       	out	0x18, r18	; 24
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     350:	92 b3       	in	r25, 0x12	; 18
     352:	98 23       	and	r25, r24
     354:	92 bb       	out	0x12, r25	; 18
     356:	87 ee       	ldi	r24, 0xE7	; 231
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <printDisplay+0x12e>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <printDisplay+0x134>
     360:	00 00       	nop

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
        send_digit_to_display(i, display[i]);
    }
}
     362:	08 95       	ret
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	2f ef       	ldi	r18, 0xFF	; 255
     368:	76 cf       	rjmp	.-276    	; 0x256 <printDisplay+0x2a>
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	2f ef       	ldi	r18, 0xFF	; 255
     36e:	e7 cf       	rjmp	.-50     	; 0x33e <printDisplay+0x112>
     370:	8f ef       	ldi	r24, 0xFF	; 255
     372:	2f ef       	ldi	r18, 0xFF	; 255
     374:	be cf       	rjmp	.-132    	; 0x2f2 <printDisplay+0xc6>
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	94 cf       	rjmp	.-216    	; 0x2a4 <printDisplay+0x78>

0000037c <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
  unsigned char isButton2 = ((PIND >> (8 - 1)) & 1);
     37c:	20 b3       	in	r18, 0x10	; 16
  unsigned char isButton1 = ((PIND >> (7 - 1)) & 1);
     37e:	90 b3       	in	r25, 0x10	; 16
  unsigned char isButton0 = ((PIND >> (6 - 1)) & 1);
     380:	80 b3       	in	r24, 0x10	; 16

  if (!isButton0) {
     382:	85 ff       	sbrs	r24, 5
     384:	08 c0       	rjmp	.+16     	; 0x396 <number_key_pressed+0x1a>
    return 0;
  }

  if (!isButton1) {
     386:	96 ff       	sbrs	r25, 6
     388:	04 c0       	rjmp	.+8      	; 0x392 <number_key_pressed+0x16>
    return 1;
  }

  if (!isButton2) {
     38a:	27 ff       	sbrs	r18, 7
     38c:	06 c0       	rjmp	.+12     	; 0x39a <number_key_pressed+0x1e>
    return 2;
  }
  return 42;
     38e:	8a e2       	ldi	r24, 0x2A	; 42
}
     390:	08 95       	ret
  if (!isButton0) {
    return 0;
  }

  if (!isButton1) {
    return 1;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	08 95       	ret
  unsigned char isButton2 = ((PIND >> (8 - 1)) & 1);
  unsigned char isButton1 = ((PIND >> (7 - 1)) & 1);
  unsigned char isButton0 = ((PIND >> (6 - 1)) & 1);

  if (!isButton0) {
    return 0;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret
  if (!isButton1) {
    return 1;
  }

  if (!isButton2) {
    return 2;
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	08 95       	ret

0000039e <i2c_start>:
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     39e:	84 ea       	ldi	r24, 0xA4	; 164
     3a0:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
     3a2:	06 b6       	in	r0, 0x36	; 54
     3a4:	07 fe       	sbrs	r0, 7
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <i2c_start+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
     3a8:	91 b1       	in	r25, 0x01	; 1
     3aa:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	98 30       	cpi	r25, 0x08	; 8
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <i2c_start+0x16>
  else
    return (1);
}
     3b2:	08 95       	ret

  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
    return (0);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
     3b6:	08 95       	ret

000003b8 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     3b8:	84 ea       	ldi	r24, 0xA4	; 164
     3ba:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1 << TWINT)))
     3bc:	06 b6       	in	r0, 0x36	; 54
     3be:	07 fe       	sbrs	r0, 7
     3c0:	fd cf       	rjmp	.-6      	; 0x3bc <i2c_repeatStart+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
     3c2:	91 b1       	in	r25, 0x01	; 1
     3c4:	98 7f       	andi	r25, 0xF8	; 248
    return (0);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 31       	cpi	r25, 0x10	; 16
     3ca:	09 f0       	breq	.+2      	; 0x3ce <i2c_repeatStart+0x16>
  else
    return (1);
}
     3cc:	08 95       	ret
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
    return (0);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
     3d0:	08 95       	ret

000003d2 <i2c_sendAddress>:
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     3d2:	80 ff       	sbrs	r24, 0
     3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <i2c_sendAddress+0x26>
     3d6:	40 e4       	ldi	r20, 0x40	; 64
     3d8:	50 e0       	ldi	r21, 0x00	; 0
    STATUS = MT_SLA_ACK;
  else
    STATUS = MR_SLA_ACK;

  TWDR = address;
     3da:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
     3dc:	84 e8       	ldi	r24, 0x84	; 132
     3de:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
     3e0:	06 b6       	in	r0, 0x36	; 54
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <i2c_sendAddress+0xe>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
     3e6:	21 b1       	in	r18, 0x01	; 1
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	28 7f       	andi	r18, 0xF8	; 248
     3ec:	30 70       	andi	r19, 0x00	; 0
    return (0);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	24 17       	cp	r18, r20
     3f2:	35 07       	cpc	r19, r21
     3f4:	21 f0       	breq	.+8      	; 0x3fe <i2c_sendAddress+0x2c>
  else
    return (1);
}
     3f6:	08 95       	ret
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     3f8:	48 e1       	ldi	r20, 0x18	; 24
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	ee cf       	rjmp	.-36     	; 0x3da <i2c_sendAddress+0x8>
  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
    return (0);
     3fe:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (1);
}
     400:	08 95       	ret

00000402 <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
  TWDR = data;
     402:	83 b9       	out	0x03, r24	; 3
  TWCR = (1 << TWINT) |
     404:	84 e8       	ldi	r24, 0x84	; 132
     406:	86 bf       	out	0x36, r24	; 54
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <i2c_sendData+0x6>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
     40e:	91 b1       	in	r25, 0x01	; 1
     410:	98 7f       	andi	r25, 0xF8	; 248
    return (1);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	98 32       	cpi	r25, 0x28	; 40
     416:	09 f0       	breq	.+2      	; 0x41a <i2c_sendData+0x18>
  else
    return (0);
}
     418:	08 95       	ret
  while (!(TWCR & (1 << TWINT)))
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
    return (1);
     41a:	80 e0       	ldi	r24, 0x00	; 0
  else
    return (0);
}
     41c:	08 95       	ret

0000041e <i2c_receiveData_ACK>:
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     41e:	84 ec       	ldi	r24, 0xC4	; 196
     420:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
     422:	06 b6       	in	r0, 0x36	; 54
     424:	07 fe       	sbrs	r0, 7
     426:	fd cf       	rjmp	.-6      	; 0x422 <i2c_receiveData_ACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
     428:	81 b1       	in	r24, 0x01	; 1
     42a:	88 7f       	andi	r24, 0xF8	; 248
     42c:	80 35       	cpi	r24, 0x50	; 80
     42e:	11 f0       	breq	.+4      	; 0x434 <i2c_receiveData_ACK+0x16>
    return (ERROR_CODE);
     430:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
     432:	08 95       	ret
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
    return (ERROR_CODE);

  data = TWDR;
     434:	83 b1       	in	r24, 0x03	; 3
  return (data);
     436:	08 95       	ret

00000438 <i2c_receiveData_NACK>:
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
     438:	84 e8       	ldi	r24, 0x84	; 132
     43a:	86 bf       	out	0x36, r24	; 54

  while (!(TWCR & (1 << TWINT)))
     43c:	06 b6       	in	r0, 0x36	; 54
     43e:	07 fe       	sbrs	r0, 7
     440:	fd cf       	rjmp	.-6      	; 0x43c <i2c_receiveData_NACK+0x4>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
     442:	81 b1       	in	r24, 0x01	; 1
     444:	88 7f       	andi	r24, 0xF8	; 248
     446:	88 35       	cpi	r24, 0x58	; 88
     448:	11 f0       	breq	.+4      	; 0x44e <i2c_receiveData_NACK+0x16>
    return (ERROR_CODE);
     44a:	8e e7       	ldi	r24, 0x7E	; 126

  data = TWDR;
  return (data);
}
     44c:	08 95       	ret
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
    return (ERROR_CODE);

  data = TWDR;
     44e:	83 b1       	in	r24, 0x03	; 3
  return (data);
     450:	08 95       	ret

00000452 <i2c_stop>:
}
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
     452:	84 e9       	ldi	r24, 0x94	; 148
     454:	86 bf       	out	0x36, r24	; 54
}
     456:	08 95       	ret

00000458 <ds1621_init>:
//******************************************************************    
void ds1621_init()
{
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     458:	a2 df       	rcall	.-188    	; 0x39e <i2c_start>
   if(errorStatus == 1)
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	c1 f0       	breq	.+48     	; 0x48e <__stack+0x2f>
     strcpy(display, "LLLL");
   	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     45e:	80 e9       	ldi	r24, 0x90	; 144
     460:	b8 df       	rcall	.-144    	; 0x3d2 <i2c_sendAddress>
   
   if(errorStatus == 1)
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	f1 f0       	breq	.+60     	; 0x4a2 <__stack+0x43>
     strcpy(display, "LLLL");
  	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
     466:	8c ea       	ldi	r24, 0xAC	; 172
     468:	cc df       	rcall	.-104    	; 0x402 <i2c_sendData>
   if(errorStatus == 1)
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	21 f1       	breq	.+72     	; 0x4b6 <__stack+0x57>
     strcpy(display, "LLLL");
  	 i2c_stop();
  	 return;
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	c8 df       	rcall	.-112    	; 0x402 <i2c_sendData>
   if(errorStatus == 1)
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	11 f0       	breq	.+4      	; 0x47a <__stack+0x1b>
     strcpy(display, "LLLL");
  	 i2c_stop();
	 return;
   } 

   i2c_stop();
     476:	ed df       	rcall	.-38     	; 0x452 <i2c_stop>
     478:	08 95       	ret
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     47a:	af e6       	ldi	r26, 0x6F	; 111
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	e4 ef       	ldi	r30, 0xF4	; 244
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	85 e0       	ldi	r24, 0x05	; 5
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	81 50       	subi	r24, 0x01	; 1
     48a:	e1 f7       	brne	.-8      	; 0x484 <__stack+0x25>
     48c:	f4 cf       	rjmp	.-24     	; 0x476 <__stack+0x17>
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     48e:	af e6       	ldi	r26, 0x6F	; 111
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e4 ef       	ldi	r30, 0xF4	; 244
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	85 e0       	ldi	r24, 0x05	; 5
     498:	01 90       	ld	r0, Z+
     49a:	0d 92       	st	X+, r0
     49c:	81 50       	subi	r24, 0x01	; 1
     49e:	e1 f7       	brne	.-8      	; 0x498 <__stack+0x39>
     4a0:	ea cf       	rjmp	.-44     	; 0x476 <__stack+0x17>
   
   errorStatus = i2c_sendAddress(DS1621_W);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     4a2:	af e6       	ldi	r26, 0x6F	; 111
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	e4 ef       	ldi	r30, 0xF4	; 244
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	85 e0       	ldi	r24, 0x05	; 5
     4ac:	01 90       	ld	r0, Z+
     4ae:	0d 92       	st	X+, r0
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__stack+0x4d>
     4b4:	e0 cf       	rjmp	.-64     	; 0x476 <__stack+0x17>
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     4b6:	af e6       	ldi	r26, 0x6F	; 111
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	e4 ef       	ldi	r30, 0xF4	; 244
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	85 e0       	ldi	r24, 0x05	; 5
     4c0:	01 90       	ld	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	81 50       	subi	r24, 0x01	; 1
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__stack+0x61>
     4c8:	d6 cf       	rjmp	.-84     	; 0x476 <__stack+0x17>

000004ca <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
     4ca:	1f 93       	push	r17
     4cc:	18 2f       	mov	r17, r24
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     4ce:	67 df       	rcall	.-306    	; 0x39e <i2c_start>
   if(errorStatus == 1)
     4d0:	81 30       	cpi	r24, 0x01	; 1
     4d2:	59 f0       	breq	.+22     	; 0x4ea <ds1621_sendCommand+0x20>
     strcpy(display, "LLLL");
   	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     4d4:	80 e9       	ldi	r24, 0x90	; 144
     4d6:	7d df       	rcall	.-262    	; 0x3d2 <i2c_sendAddress>
   
   if(errorStatus == 1)
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	89 f0       	breq	.+34     	; 0x4fe <ds1621_sendCommand+0x34>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendData(command);
     4dc:	81 2f       	mov	r24, r17
     4de:	91 df       	rcall	.-222    	; 0x402 <i2c_sendData>
   if(errorStatus == 1)
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	b9 f0       	breq	.+46     	; 0x512 <ds1621_sendCommand+0x48>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return;
   } 

   i2c_stop();
     4e4:	b6 df       	rcall	.-148    	; 0x452 <i2c_stop>
}
     4e6:	1f 91       	pop	r17
     4e8:	08 95       	ret
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     4ea:	af e6       	ldi	r26, 0x6F	; 111
     4ec:	b0 e0       	ldi	r27, 0x00	; 0
     4ee:	e4 ef       	ldi	r30, 0xF4	; 244
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	85 e0       	ldi	r24, 0x05	; 5
     4f4:	01 90       	ld	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <ds1621_sendCommand+0x2a>
     4fc:	f3 cf       	rjmp	.-26     	; 0x4e4 <ds1621_sendCommand+0x1a>
   
   errorStatus = i2c_sendAddress(DS1621_W);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     4fe:	af e6       	ldi	r26, 0x6F	; 111
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e4 ef       	ldi	r30, 0xF4	; 244
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	01 90       	ld	r0, Z+
     50a:	0d 92       	st	X+, r0
     50c:	81 50       	subi	r24, 0x01	; 1
     50e:	e1 f7       	brne	.-8      	; 0x508 <ds1621_sendCommand+0x3e>
     510:	e9 cf       	rjmp	.-46     	; 0x4e4 <ds1621_sendCommand+0x1a>
   } 
   
   errorStatus = i2c_sendData(command);
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     512:	af e6       	ldi	r26, 0x6F	; 111
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	e4 ef       	ldi	r30, 0xF4	; 244
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	85 e0       	ldi	r24, 0x05	; 5
     51c:	01 90       	ld	r0, Z+
     51e:	0d 92       	st	X+, r0
     520:	81 50       	subi	r24, 0x01	; 1
     522:	e1 f7       	brne	.-8      	; 0x51c <ds1621_sendCommand+0x52>
     524:	df cf       	rjmp	.-66     	; 0x4e4 <ds1621_sendCommand+0x1a>

00000526 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
     526:	1f 93       	push	r17
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	0f 92       	push	r0
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	18 2f       	mov	r17, r24
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     534:	34 df       	rcall	.-408    	; 0x39e <i2c_start>
   if(errorStatus == 1)
     536:	81 30       	cpi	r24, 0x01	; 1
     538:	41 f1       	breq	.+80     	; 0x58a <ds1621_readValue+0x64>
     strcpy(display, "LLLL");
   	 i2c_stop();
	 return (0);
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     53a:	80 e9       	ldi	r24, 0x90	; 144
     53c:	4a df       	rcall	.-364    	; 0x3d2 <i2c_sendAddress>
   
   if(errorStatus == 1)
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	71 f1       	breq	.+92     	; 0x59e <ds1621_readValue+0x78>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return (0);
   } 
   
   errorStatus = i2c_sendData(value);
     542:	81 2f       	mov	r24, r17
     544:	5e df       	rcall	.-324    	; 0x402 <i2c_sendData>
   if(errorStatus == 1)
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	a1 f1       	breq	.+104    	; 0x5b2 <ds1621_readValue+0x8c>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return (0);
   } 

    errorStatus = i2c_repeatStart();
     54a:	36 df       	rcall	.-404    	; 0x3b8 <i2c_repeatStart>
   if(errorStatus == 1)
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	69 f0       	breq	.+26     	; 0x56a <ds1621_readValue+0x44>
     strcpy(display, "LLLL");
   	 i2c_stop();
	 return (0);
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
     550:	81 e9       	ldi	r24, 0x91	; 145
     552:	3f df       	rcall	.-386    	; 0x3d2 <i2c_sendAddress>
   
   if(errorStatus == 1)
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	b9 f1       	breq	.+110    	; 0x5c6 <ds1621_readValue+0xa0>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return (0);
   } 
 
   data = i2c_receiveData_NACK(); 
     558:	6f df       	rcall	.-290    	; 0x438 <i2c_receiveData_NACK>
   
   i2c_stop();
     55a:	89 83       	std	Y+1, r24	; 0x01
     55c:	7a df       	rcall	.-268    	; 0x452 <i2c_stop>
     55e:	89 81       	ldd	r24, Y+1	; 0x01
   
   return (data);
}	  
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	1f 91       	pop	r17
     568:	08 95       	ret
   } 

    errorStatus = i2c_repeatStart();
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     56a:	af e6       	ldi	r26, 0x6F	; 111
     56c:	b0 e0       	ldi	r27, 0x00	; 0
     56e:	e4 ef       	ldi	r30, 0xF4	; 244
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	01 90       	ld	r0, Z+
     576:	0d 92       	st	X+, r0
     578:	81 50       	subi	r24, 0x01	; 1
     57a:	e1 f7       	brne	.-8      	; 0x574 <ds1621_readValue+0x4e>
    errorStatus = i2c_sendAddress(DS1621_R);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
	 i2c_stop();
     57c:	6a df       	rcall	.-300    	; 0x452 <i2c_stop>
	 return (0);
     57e:	80 e0       	ldi	r24, 0x00	; 0
   data = i2c_receiveData_NACK(); 
   
   i2c_stop();
   
   return (data);
}	  
     580:	0f 90       	pop	r0
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	1f 91       	pop	r17
     588:	08 95       	ret
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     58a:	af e6       	ldi	r26, 0x6F	; 111
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	e4 ef       	ldi	r30, 0xF4	; 244
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	01 90       	ld	r0, Z+
     596:	0d 92       	st	X+, r0
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	e1 f7       	brne	.-8      	; 0x594 <ds1621_readValue+0x6e>
     59c:	ef cf       	rjmp	.-34     	; 0x57c <ds1621_readValue+0x56>
   
   errorStatus = i2c_sendAddress(DS1621_W);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     59e:	af e6       	ldi	r26, 0x6F	; 111
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	e4 ef       	ldi	r30, 0xF4	; 244
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	85 e0       	ldi	r24, 0x05	; 5
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <ds1621_readValue+0x82>
     5b0:	e5 cf       	rjmp	.-54     	; 0x57c <ds1621_readValue+0x56>
   } 
   
   errorStatus = i2c_sendData(value);
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     5b2:	af e6       	ldi	r26, 0x6F	; 111
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	e4 ef       	ldi	r30, 0xF4	; 244
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	81 50       	subi	r24, 0x01	; 1
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <ds1621_readValue+0x96>
     5c4:	db cf       	rjmp	.-74     	; 0x57c <ds1621_readValue+0x56>
   
    errorStatus = i2c_sendAddress(DS1621_R);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     5c6:	af e6       	ldi	r26, 0x6F	; 111
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	e4 ef       	ldi	r30, 0xF4	; 244
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	01 90       	ld	r0, Z+
     5d2:	0d 92       	st	X+, r0
     5d4:	81 50       	subi	r24, 0x01	; 1
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <ds1621_readValue+0xaa>
     5d8:	d1 cf       	rjmp	.-94     	; 0x57c <ds1621_readValue+0x56>

000005da <getTemperature>:

//******************************************************************
//Function to read 
//******************************************************************    
unsigned char* getTemperature(void)
{
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     5f2:	d5 de       	rcall	.-598    	; 0x39e <i2c_start>
   if(errorStatus == 1)
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <getTemperature+0x20>
     5f8:	94 c0       	rjmp	.+296    	; 0x722 <getTemperature+0x148>
     strcpy(display, "LLLL");
   	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     5fa:	80 e9       	ldi	r24, 0x90	; 144
     5fc:	ea de       	rcall	.-556    	; 0x3d2 <i2c_sendAddress>
   
   if(errorStatus == 1)
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	09 f4       	brne	.+2      	; 0x604 <getTemperature+0x2a>
     602:	99 c0       	rjmp	.+306    	; 0x736 <getTemperature+0x15c>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return;
   } 
   
   errorStatus = i2c_sendData(command);
     604:	8e ee       	ldi	r24, 0xEE	; 238
     606:	fd de       	rcall	.-518    	; 0x402 <i2c_sendData>
   if(errorStatus == 1)
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	09 f4       	brne	.+2      	; 0x60e <getTemperature+0x34>
     60c:	9e c0       	rjmp	.+316    	; 0x74a <getTemperature+0x170>
     strcpy(display, "LLLL");
	 i2c_stop();
	 return;
   } 

   i2c_stop();
     60e:	21 df       	rcall	.-446    	; 0x452 <i2c_stop>
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	94 e3       	ldi	r25, 0x34	; 52
     614:	ac e0       	ldi	r26, 0x0C	; 12
     616:	81 50       	subi	r24, 0x01	; 1
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	a0 40       	sbci	r26, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <getTemperature+0x3c>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <getTemperature+0x46>
     620:	00 00       	nop
  
  ds1621_sendCommand ( START_CONVERT );
  
  _delay_ms(1000);
  
  temperature = ds1621_readValue ( READ_TEMP );
     622:	8a ea       	ldi	r24, 0xAA	; 170
     624:	80 df       	rcall	.-256    	; 0x526 <ds1621_readValue>
     626:	08 2f       	mov	r16, r24
  counter = ds1621_readValue ( READ_COUNTER );
     628:	88 ea       	ldi	r24, 0xA8	; 168
     62a:	7d df       	rcall	.-262    	; 0x526 <ds1621_readValue>
     62c:	c8 2e       	mov	r12, r24
  slope = ds1621_readValue ( READ_SLOPE );   
     62e:	89 ea       	ldi	r24, 0xA9	; 169
     630:	7a df       	rcall	.-268    	; 0x526 <ds1621_readValue>
     632:	18 2f       	mov	r17, r24
  
  actualTemp = (float)temperature - 0.25 + ((float)(slope - counter) / (float)slope);
     634:	60 2f       	mov	r22, r16
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	9e d4       	rcall	.+2364   	; 0xf7a <__floatunsisf>
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e8       	ldi	r20, 0x80	; 128
     644:	5e e3       	ldi	r21, 0x3E	; 62
     646:	fa d1       	rcall	.+1012   	; 0xa3c <__subsf3>
     648:	4b 01       	movw	r8, r22
     64a:	5c 01       	movw	r10, r24
     64c:	61 2f       	mov	r22, r17
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	6c 19       	sub	r22, r12
     652:	71 09       	sbc	r23, r1
     654:	88 27       	eor	r24, r24
     656:	77 fd       	sbrc	r23, 7
     658:	80 95       	com	r24
     65a:	98 2f       	mov	r25, r24
     65c:	e3 d3       	rcall	.+1990   	; 0xe24 <__floatsisf>
     65e:	6b 01       	movw	r12, r22
     660:	7c 01       	movw	r14, r24
     662:	61 2f       	mov	r22, r17
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	87 d4       	rcall	.+2318   	; 0xf7a <__floatunsisf>
     66c:	9b 01       	movw	r18, r22
     66e:	ac 01       	movw	r20, r24
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	03 d3       	rcall	.+1542   	; 0xc7c <__divsf3>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	b7 d1       	rcall	.+878    	; 0x9ee <__addsf3>
  
 	temp=(int)(actualTemp * 10.0);   //to include decimal point for display
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e2       	ldi	r20, 0x20	; 32
     686:	51 e4       	ldi	r21, 0x41	; 65
     688:	04 d2       	rcall	.+1032   	; 0xa92 <__mulsf3>
     68a:	06 2f       	mov	r16, r22
     68c:	87 2e       	mov	r8, r23
     68e:	c8 2e       	mov	r12, r24
     690:	19 2f       	mov	r17, r25
     692:	24 d4       	rcall	.+2120   	; 0xedc <__fixsfsi>
     694:	eb 01       	movw	r28, r22
	
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     696:	be 01       	movw	r22, r28
     698:	88 27       	eor	r24, r24
     69a:	77 fd       	sbrc	r23, 7
     69c:	80 95       	com	r24
     69e:	98 2f       	mov	r25, r24
     6a0:	c1 d3       	rcall	.+1922   	; 0xe24 <__floatsisf>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	60 2f       	mov	r22, r16
     6a8:	78 2d       	mov	r23, r8
     6aa:	8c 2d       	mov	r24, r12
     6ac:	91 2f       	mov	r25, r17
     6ae:	c6 d1       	rcall	.+908    	; 0xa3c <__subsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	5f e3       	ldi	r21, 0x3F	; 63
     6b8:	8a d3       	rcall	.+1812   	; 0xdce <__gesf2>
     6ba:	87 ff       	sbrs	r24, 7
     6bc:	28 c0       	rjmp	.+80     	; 0x70e <getTemperature+0x134>
	
//    tempDisplay[8]=0xdf;			//Symbol of degree

	if(temp < 0)
     6be:	d7 fd       	sbrc	r29, 7
     6c0:	29 c0       	rjmp	.+82     	; 0x714 <getTemperature+0x13a>
	  tempDisplay[0] = '-';
	  temp *= -1;
	}
	else
	{
	  tempDisplay[0] = '+';
     6c2:	8b e2       	ldi	r24, 0x2B	; 43
     6c4:	80 93 f9 00 	sts	0x00F9, r24
	}     
	
	tempDisplay[4] = ((unsigned char)(temp%10)) | 0x30;
     6c8:	2a e0       	ldi	r18, 0x0A	; 10
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	ce 01       	movw	r24, r28
     6ce:	b9 01       	movw	r22, r18
     6d0:	b1 d6       	rcall	.+3426   	; 0x1434 <__divmodhi4>
     6d2:	80 63       	ori	r24, 0x30	; 48
     6d4:	80 93 fd 00 	sts	0x00FD, r24
	temp=temp/10;
	
	tempDisplay[2] = ((unsigned char)(temp%10)) | 0x30;
     6d8:	cb 01       	movw	r24, r22
     6da:	b9 01       	movw	r22, r18
     6dc:	ab d6       	rcall	.+3414   	; 0x1434 <__divmodhi4>
     6de:	80 63       	ori	r24, 0x30	; 48
     6e0:	80 93 fb 00 	sts	0x00FB, r24
	temp=temp/10;
	
	tempDisplay[1] = ((unsigned char)(temp%10)) | 0x30;
     6e4:	cb 01       	movw	r24, r22
     6e6:	b9 01       	movw	r22, r18
     6e8:	a5 d6       	rcall	.+3402   	; 0x1434 <__divmodhi4>
     6ea:	80 63       	ori	r24, 0x30	; 48
     6ec:	80 93 fa 00 	sts	0x00FA, r24
	temp=temp/10;
	
	return tempDisplay;
     6f0:	89 ef       	ldi	r24, 0xF9	; 249
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	08 95       	ret
  
  actualTemp = (float)temperature - 0.25 + ((float)(slope - counter) / (float)slope);
  
 	temp=(int)(actualTemp * 10.0);   //to include decimal point for display
	
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     70e:	21 96       	adiw	r28, 0x01	; 1
	
//    tempDisplay[8]=0xdf;			//Symbol of degree

	if(temp < 0)
     710:	d7 ff       	sbrs	r29, 7
     712:	d7 cf       	rjmp	.-82     	; 0x6c2 <getTemperature+0xe8>
	{
	  tempDisplay[0] = '-';
     714:	8d e2       	ldi	r24, 0x2D	; 45
     716:	80 93 f9 00 	sts	0x00F9, r24
	  temp *= -1;
     71a:	d0 95       	com	r29
     71c:	c1 95       	neg	r28
     71e:	df 4f       	sbci	r29, 0xFF	; 255
     720:	d3 cf       	rjmp	.-90     	; 0x6c8 <getTemperature+0xee>
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     722:	af e6       	ldi	r26, 0x6F	; 111
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e4 ef       	ldi	r30, 0xF4	; 244
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	85 e0       	ldi	r24, 0x05	; 5
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	81 50       	subi	r24, 0x01	; 1
     732:	e1 f7       	brne	.-8      	; 0x72c <getTemperature+0x152>
     734:	6c cf       	rjmp	.-296    	; 0x60e <getTemperature+0x34>
   
   errorStatus = i2c_sendAddress(DS1621_W);
   
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     736:	af e6       	ldi	r26, 0x6F	; 111
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e4 ef       	ldi	r30, 0xF4	; 244
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	85 e0       	ldi	r24, 0x05	; 5
     740:	01 90       	ld	r0, Z+
     742:	0d 92       	st	X+, r0
     744:	81 50       	subi	r24, 0x01	; 1
     746:	e1 f7       	brne	.-8      	; 0x740 <getTemperature+0x166>
     748:	62 cf       	rjmp	.-316    	; 0x60e <getTemperature+0x34>
   } 
   
   errorStatus = i2c_sendData(command);
   if(errorStatus == 1)
   {
     strcpy(display, "LLLL");
     74a:	af e6       	ldi	r26, 0x6F	; 111
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e4 ef       	ldi	r30, 0xF4	; 244
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	85 e0       	ldi	r24, 0x05	; 5
     754:	01 90       	ld	r0, Z+
     756:	0d 92       	st	X+, r0
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	e1 f7       	brne	.-8      	; 0x754 <getTemperature+0x17a>
     75c:	58 cf       	rjmp	.-336    	; 0x60e <getTemperature+0x34>

0000075e <_fpadd_parts>:
     75e:	a0 e0       	ldi	r26, 0x00	; 0
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e4 eb       	ldi	r30, 0xB4	; 180
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	91 c6       	rjmp	.+3362   	; 0x148a <__prologue_saves__+0x8>
     768:	fc 01       	movw	r30, r24
     76a:	ea 01       	movw	r28, r20
     76c:	80 81       	ld	r24, Z
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <_fpadd_parts+0x16>
     772:	38 c1       	rjmp	.+624    	; 0x9e4 <_fpadd_parts+0x286>
     774:	db 01       	movw	r26, r22
     776:	9c 91       	ld	r25, X
     778:	92 30       	cpi	r25, 0x02	; 2
     77a:	08 f4       	brcc	.+2      	; 0x77e <_fpadd_parts+0x20>
     77c:	30 c1       	rjmp	.+608    	; 0x9de <_fpadd_parts+0x280>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	59 f4       	brne	.+22     	; 0x798 <_fpadd_parts+0x3a>
     782:	94 30       	cpi	r25, 0x04	; 4
     784:	09 f0       	breq	.+2      	; 0x788 <_fpadd_parts+0x2a>
     786:	2e c1       	rjmp	.+604    	; 0x9e4 <_fpadd_parts+0x286>
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	11 96       	adiw	r26, 0x01	; 1
     78c:	8c 91       	ld	r24, X
     78e:	11 97       	sbiw	r26, 0x01	; 1
     790:	98 17       	cp	r25, r24
     792:	09 f0       	breq	.+2      	; 0x796 <_fpadd_parts+0x38>
     794:	21 c1       	rjmp	.+578    	; 0x9d8 <_fpadd_parts+0x27a>
     796:	26 c1       	rjmp	.+588    	; 0x9e4 <_fpadd_parts+0x286>
     798:	94 30       	cpi	r25, 0x04	; 4
     79a:	09 f4       	brne	.+2      	; 0x79e <_fpadd_parts+0x40>
     79c:	20 c1       	rjmp	.+576    	; 0x9de <_fpadd_parts+0x280>
     79e:	92 30       	cpi	r25, 0x02	; 2
     7a0:	b1 f4       	brne	.+44     	; 0x7ce <_fpadd_parts+0x70>
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <_fpadd_parts+0x4a>
     7a6:	1e c1       	rjmp	.+572    	; 0x9e4 <_fpadd_parts+0x286>
     7a8:	ca 01       	movw	r24, r20
     7aa:	af 01       	movw	r20, r30
     7ac:	28 e0       	ldi	r18, 0x08	; 8
     7ae:	da 01       	movw	r26, r20
     7b0:	0d 90       	ld	r0, X+
     7b2:	ad 01       	movw	r20, r26
     7b4:	dc 01       	movw	r26, r24
     7b6:	0d 92       	st	X+, r0
     7b8:	cd 01       	movw	r24, r26
     7ba:	21 50       	subi	r18, 0x01	; 1
     7bc:	c1 f7       	brne	.-16     	; 0x7ae <_fpadd_parts+0x50>
     7be:	db 01       	movw	r26, r22
     7c0:	11 96       	adiw	r26, 0x01	; 1
     7c2:	8c 91       	ld	r24, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	91 81       	ldd	r25, Z+1	; 0x01
     7c8:	89 23       	and	r24, r25
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	0a c1       	rjmp	.+532    	; 0x9e2 <_fpadd_parts+0x284>
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <_fpadd_parts+0x76>
     7d2:	05 c1       	rjmp	.+522    	; 0x9de <_fpadd_parts+0x280>
     7d4:	c2 80       	ldd	r12, Z+2	; 0x02
     7d6:	d3 80       	ldd	r13, Z+3	; 0x03
     7d8:	db 01       	movw	r26, r22
     7da:	12 96       	adiw	r26, 0x02	; 2
     7dc:	6d 90       	ld	r6, X+
     7de:	7c 90       	ld	r7, X
     7e0:	13 97       	sbiw	r26, 0x03	; 3
     7e2:	24 81       	ldd	r18, Z+4	; 0x04
     7e4:	35 81       	ldd	r19, Z+5	; 0x05
     7e6:	46 81       	ldd	r20, Z+6	; 0x06
     7e8:	57 81       	ldd	r21, Z+7	; 0x07
     7ea:	14 96       	adiw	r26, 0x04	; 4
     7ec:	ed 90       	ld	r14, X+
     7ee:	fd 90       	ld	r15, X+
     7f0:	0d 91       	ld	r16, X+
     7f2:	1c 91       	ld	r17, X
     7f4:	17 97       	sbiw	r26, 0x07	; 7
     7f6:	c6 01       	movw	r24, r12
     7f8:	86 19       	sub	r24, r6
     7fa:	97 09       	sbc	r25, r7
     7fc:	5c 01       	movw	r10, r24
     7fe:	97 ff       	sbrs	r25, 7
     800:	04 c0       	rjmp	.+8      	; 0x80a <_fpadd_parts+0xac>
     802:	aa 24       	eor	r10, r10
     804:	bb 24       	eor	r11, r11
     806:	a8 1a       	sub	r10, r24
     808:	b9 0a       	sbc	r11, r25
     80a:	b0 e2       	ldi	r27, 0x20	; 32
     80c:	ab 16       	cp	r10, r27
     80e:	b1 04       	cpc	r11, r1
     810:	0c f0       	brlt	.+2      	; 0x814 <_fpadd_parts+0xb6>
     812:	61 c0       	rjmp	.+194    	; 0x8d6 <_fpadd_parts+0x178>
     814:	18 16       	cp	r1, r24
     816:	19 06       	cpc	r1, r25
     818:	6c f5       	brge	.+90     	; 0x874 <_fpadd_parts+0x116>
     81a:	37 01       	movw	r6, r14
     81c:	48 01       	movw	r8, r16
     81e:	0a 2c       	mov	r0, r10
     820:	04 c0       	rjmp	.+8      	; 0x82a <_fpadd_parts+0xcc>
     822:	96 94       	lsr	r9
     824:	87 94       	ror	r8
     826:	77 94       	ror	r7
     828:	67 94       	ror	r6
     82a:	0a 94       	dec	r0
     82c:	d2 f7       	brpl	.-12     	; 0x822 <_fpadd_parts+0xc4>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	a0 e0       	ldi	r26, 0x00	; 0
     834:	b0 e0       	ldi	r27, 0x00	; 0
     836:	0a 2c       	mov	r0, r10
     838:	04 c0       	rjmp	.+8      	; 0x842 <_fpadd_parts+0xe4>
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	aa 1f       	adc	r26, r26
     840:	bb 1f       	adc	r27, r27
     842:	0a 94       	dec	r0
     844:	d2 f7       	brpl	.-12     	; 0x83a <_fpadd_parts+0xdc>
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	a1 09       	sbc	r26, r1
     84a:	b1 09       	sbc	r27, r1
     84c:	8e 21       	and	r24, r14
     84e:	9f 21       	and	r25, r15
     850:	a0 23       	and	r26, r16
     852:	b1 23       	and	r27, r17
     854:	ee 24       	eor	r14, r14
     856:	ff 24       	eor	r15, r15
     858:	87 01       	movw	r16, r14
     85a:	e3 94       	inc	r14
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	a1 05       	cpc	r26, r1
     860:	b1 05       	cpc	r27, r1
     862:	19 f4       	brne	.+6      	; 0x86a <_fpadd_parts+0x10c>
     864:	ee 24       	eor	r14, r14
     866:	ff 24       	eor	r15, r15
     868:	87 01       	movw	r16, r14
     86a:	e6 28       	or	r14, r6
     86c:	f7 28       	or	r15, r7
     86e:	08 29       	or	r16, r8
     870:	19 29       	or	r17, r9
     872:	3c c0       	rjmp	.+120    	; 0x8ec <_fpadd_parts+0x18e>
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	d1 f1       	breq	.+116    	; 0x8ec <_fpadd_parts+0x18e>
     878:	ca 0c       	add	r12, r10
     87a:	db 1c       	adc	r13, r11
     87c:	39 01       	movw	r6, r18
     87e:	4a 01       	movw	r8, r20
     880:	0a 2c       	mov	r0, r10
     882:	04 c0       	rjmp	.+8      	; 0x88c <_fpadd_parts+0x12e>
     884:	96 94       	lsr	r9
     886:	87 94       	ror	r8
     888:	77 94       	ror	r7
     88a:	67 94       	ror	r6
     88c:	0a 94       	dec	r0
     88e:	d2 f7       	brpl	.-12     	; 0x884 <_fpadd_parts+0x126>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	a0 e0       	ldi	r26, 0x00	; 0
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	0a 2c       	mov	r0, r10
     89a:	04 c0       	rjmp	.+8      	; 0x8a4 <_fpadd_parts+0x146>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	aa 1f       	adc	r26, r26
     8a2:	bb 1f       	adc	r27, r27
     8a4:	0a 94       	dec	r0
     8a6:	d2 f7       	brpl	.-12     	; 0x89c <_fpadd_parts+0x13e>
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	a1 09       	sbc	r26, r1
     8ac:	b1 09       	sbc	r27, r1
     8ae:	82 23       	and	r24, r18
     8b0:	93 23       	and	r25, r19
     8b2:	a4 23       	and	r26, r20
     8b4:	b5 23       	and	r27, r21
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	00 97       	sbiw	r24, 0x00	; 0
     8c0:	a1 05       	cpc	r26, r1
     8c2:	b1 05       	cpc	r27, r1
     8c4:	19 f4       	brne	.+6      	; 0x8cc <_fpadd_parts+0x16e>
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	a9 01       	movw	r20, r18
     8cc:	26 29       	or	r18, r6
     8ce:	37 29       	or	r19, r7
     8d0:	48 29       	or	r20, r8
     8d2:	59 29       	or	r21, r9
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <_fpadd_parts+0x18e>
     8d6:	6c 14       	cp	r6, r12
     8d8:	7d 04       	cpc	r7, r13
     8da:	24 f4       	brge	.+8      	; 0x8e4 <_fpadd_parts+0x186>
     8dc:	ee 24       	eor	r14, r14
     8de:	ff 24       	eor	r15, r15
     8e0:	87 01       	movw	r16, r14
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <_fpadd_parts+0x18e>
     8e4:	63 01       	movw	r12, r6
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	a9 01       	movw	r20, r18
     8ec:	81 81       	ldd	r24, Z+1	; 0x01
     8ee:	fb 01       	movw	r30, r22
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	89 17       	cp	r24, r25
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <_fpadd_parts+0x19a>
     8f6:	45 c0       	rjmp	.+138    	; 0x982 <_fpadd_parts+0x224>
     8f8:	88 23       	and	r24, r24
     8fa:	49 f0       	breq	.+18     	; 0x90e <_fpadd_parts+0x1b0>
     8fc:	d8 01       	movw	r26, r16
     8fe:	c7 01       	movw	r24, r14
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	a4 0b       	sbc	r26, r20
     906:	b5 0b       	sbc	r27, r21
     908:	9c 01       	movw	r18, r24
     90a:	ad 01       	movw	r20, r26
     90c:	04 c0       	rjmp	.+8      	; 0x916 <_fpadd_parts+0x1b8>
     90e:	2e 19       	sub	r18, r14
     910:	3f 09       	sbc	r19, r15
     912:	40 0b       	sbc	r20, r16
     914:	51 0b       	sbc	r21, r17
     916:	57 fd       	sbrc	r21, 7
     918:	04 c0       	rjmp	.+8      	; 0x922 <_fpadd_parts+0x1c4>
     91a:	19 82       	std	Y+1, r1	; 0x01
     91c:	db 82       	std	Y+3, r13	; 0x03
     91e:	ca 82       	std	Y+2, r12	; 0x02
     920:	0b c0       	rjmp	.+22     	; 0x938 <_fpadd_parts+0x1da>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	db 82       	std	Y+3, r13	; 0x03
     928:	ca 82       	std	Y+2, r12	; 0x02
     92a:	50 95       	com	r21
     92c:	40 95       	com	r20
     92e:	30 95       	com	r19
     930:	21 95       	neg	r18
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	4f 4f       	sbci	r20, 0xFF	; 255
     936:	5f 4f       	sbci	r21, 0xFF	; 255
     938:	2c 83       	std	Y+4, r18	; 0x04
     93a:	3d 83       	std	Y+5, r19	; 0x05
     93c:	4e 83       	std	Y+6, r20	; 0x06
     93e:	5f 83       	std	Y+7, r21	; 0x07
     940:	0d c0       	rjmp	.+26     	; 0x95c <_fpadd_parts+0x1fe>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	aa 1f       	adc	r26, r26
     948:	bb 1f       	adc	r27, r27
     94a:	8c 83       	std	Y+4, r24	; 0x04
     94c:	9d 83       	std	Y+5, r25	; 0x05
     94e:	ae 83       	std	Y+6, r26	; 0x06
     950:	bf 83       	std	Y+7, r27	; 0x07
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	9b 83       	std	Y+3, r25	; 0x03
     95a:	8a 83       	std	Y+2, r24	; 0x02
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	9d 81       	ldd	r25, Y+5	; 0x05
     960:	ae 81       	ldd	r26, Y+6	; 0x06
     962:	bf 81       	ldd	r27, Y+7	; 0x07
     964:	9c 01       	movw	r18, r24
     966:	ad 01       	movw	r20, r26
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	30 40       	sbci	r19, 0x00	; 0
     96c:	40 40       	sbci	r20, 0x00	; 0
     96e:	50 40       	sbci	r21, 0x00	; 0
     970:	2f 3f       	cpi	r18, 0xFF	; 255
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	3e 07       	cpc	r19, r30
     976:	ef ef       	ldi	r30, 0xFF	; 255
     978:	4e 07       	cpc	r20, r30
     97a:	ef e3       	ldi	r30, 0x3F	; 63
     97c:	5e 07       	cpc	r21, r30
     97e:	08 f3       	brcs	.-62     	; 0x942 <_fpadd_parts+0x1e4>
     980:	0b c0       	rjmp	.+22     	; 0x998 <_fpadd_parts+0x23a>
     982:	89 83       	std	Y+1, r24	; 0x01
     984:	db 82       	std	Y+3, r13	; 0x03
     986:	ca 82       	std	Y+2, r12	; 0x02
     988:	2e 0d       	add	r18, r14
     98a:	3f 1d       	adc	r19, r15
     98c:	40 1f       	adc	r20, r16
     98e:	51 1f       	adc	r21, r17
     990:	2c 83       	std	Y+4, r18	; 0x04
     992:	3d 83       	std	Y+5, r19	; 0x05
     994:	4e 83       	std	Y+6, r20	; 0x06
     996:	5f 83       	std	Y+7, r21	; 0x07
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	88 83       	st	Y, r24
     99c:	2c 81       	ldd	r18, Y+4	; 0x04
     99e:	3d 81       	ldd	r19, Y+5	; 0x05
     9a0:	4e 81       	ldd	r20, Y+6	; 0x06
     9a2:	5f 81       	ldd	r21, Y+7	; 0x07
     9a4:	57 ff       	sbrs	r21, 7
     9a6:	1d c0       	rjmp	.+58     	; 0x9e2 <_fpadd_parts+0x284>
     9a8:	da 01       	movw	r26, r20
     9aa:	c9 01       	movw	r24, r18
     9ac:	81 70       	andi	r24, 0x01	; 1
     9ae:	90 70       	andi	r25, 0x00	; 0
     9b0:	a0 70       	andi	r26, 0x00	; 0
     9b2:	b0 70       	andi	r27, 0x00	; 0
     9b4:	56 95       	lsr	r21
     9b6:	47 95       	ror	r20
     9b8:	37 95       	ror	r19
     9ba:	27 95       	ror	r18
     9bc:	82 2b       	or	r24, r18
     9be:	93 2b       	or	r25, r19
     9c0:	a4 2b       	or	r26, r20
     9c2:	b5 2b       	or	r27, r21
     9c4:	8c 83       	std	Y+4, r24	; 0x04
     9c6:	9d 83       	std	Y+5, r25	; 0x05
     9c8:	ae 83       	std	Y+6, r26	; 0x06
     9ca:	bf 83       	std	Y+7, r27	; 0x07
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	9b 81       	ldd	r25, Y+3	; 0x03
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	9b 83       	std	Y+3, r25	; 0x03
     9d4:	8a 83       	std	Y+2, r24	; 0x02
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <_fpadd_parts+0x284>
     9d8:	ef ef       	ldi	r30, 0xFF	; 255
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <_fpadd_parts+0x286>
     9de:	fb 01       	movw	r30, r22
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <_fpadd_parts+0x286>
     9e2:	fe 01       	movw	r30, r28
     9e4:	cf 01       	movw	r24, r30
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	ee e0       	ldi	r30, 0x0E	; 14
     9ec:	6a c5       	rjmp	.+2772   	; 0x14c2 <__epilogue_restores__+0x8>

000009ee <__addsf3>:
     9ee:	a0 e2       	ldi	r26, 0x20	; 32
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	ec ef       	ldi	r30, 0xFC	; 252
     9f4:	f4 e0       	ldi	r31, 0x04	; 4
     9f6:	51 c5       	rjmp	.+2722   	; 0x149a <__prologue_saves__+0x18>
     9f8:	69 83       	std	Y+1, r22	; 0x01
     9fa:	7a 83       	std	Y+2, r23	; 0x02
     9fc:	8b 83       	std	Y+3, r24	; 0x03
     9fe:	9c 83       	std	Y+4, r25	; 0x04
     a00:	2d 83       	std	Y+5, r18	; 0x05
     a02:	3e 83       	std	Y+6, r19	; 0x06
     a04:	4f 83       	std	Y+7, r20	; 0x07
     a06:	58 87       	std	Y+8, r21	; 0x08
     a08:	89 e0       	ldi	r24, 0x09	; 9
     a0a:	e8 2e       	mov	r14, r24
     a0c:	f1 2c       	mov	r15, r1
     a0e:	ec 0e       	add	r14, r28
     a10:	fd 1e       	adc	r15, r29
     a12:	ce 01       	movw	r24, r28
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	b7 01       	movw	r22, r14
     a18:	4b d4       	rcall	.+2198   	; 0x12b0 <__unpack_f>
     a1a:	8e 01       	movw	r16, r28
     a1c:	0f 5e       	subi	r16, 0xEF	; 239
     a1e:	1f 4f       	sbci	r17, 0xFF	; 255
     a20:	ce 01       	movw	r24, r28
     a22:	05 96       	adiw	r24, 0x05	; 5
     a24:	b8 01       	movw	r22, r16
     a26:	44 d4       	rcall	.+2184   	; 0x12b0 <__unpack_f>
     a28:	c7 01       	movw	r24, r14
     a2a:	b8 01       	movw	r22, r16
     a2c:	ae 01       	movw	r20, r28
     a2e:	47 5e       	subi	r20, 0xE7	; 231
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	95 de       	rcall	.-726    	; 0x75e <_fpadd_parts>
     a34:	70 d3       	rcall	.+1760   	; 0x1116 <__pack_f>
     a36:	a0 96       	adiw	r28, 0x20	; 32
     a38:	e6 e0       	ldi	r30, 0x06	; 6
     a3a:	4b c5       	rjmp	.+2710   	; 0x14d2 <__epilogue_restores__+0x18>

00000a3c <__subsf3>:
     a3c:	a0 e2       	ldi	r26, 0x20	; 32
     a3e:	b0 e0       	ldi	r27, 0x00	; 0
     a40:	e3 e2       	ldi	r30, 0x23	; 35
     a42:	f5 e0       	ldi	r31, 0x05	; 5
     a44:	2a c5       	rjmp	.+2644   	; 0x149a <__prologue_saves__+0x18>
     a46:	69 83       	std	Y+1, r22	; 0x01
     a48:	7a 83       	std	Y+2, r23	; 0x02
     a4a:	8b 83       	std	Y+3, r24	; 0x03
     a4c:	9c 83       	std	Y+4, r25	; 0x04
     a4e:	2d 83       	std	Y+5, r18	; 0x05
     a50:	3e 83       	std	Y+6, r19	; 0x06
     a52:	4f 83       	std	Y+7, r20	; 0x07
     a54:	58 87       	std	Y+8, r21	; 0x08
     a56:	8e 01       	movw	r16, r28
     a58:	07 5f       	subi	r16, 0xF7	; 247
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	b8 01       	movw	r22, r16
     a62:	26 d4       	rcall	.+2124   	; 0x12b0 <__unpack_f>
     a64:	91 e1       	ldi	r25, 0x11	; 17
     a66:	e9 2e       	mov	r14, r25
     a68:	f1 2c       	mov	r15, r1
     a6a:	ec 0e       	add	r14, r28
     a6c:	fd 1e       	adc	r15, r29
     a6e:	ce 01       	movw	r24, r28
     a70:	05 96       	adiw	r24, 0x05	; 5
     a72:	b7 01       	movw	r22, r14
     a74:	1d d4       	rcall	.+2106   	; 0x12b0 <__unpack_f>
     a76:	8a 89       	ldd	r24, Y+18	; 0x12
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	89 27       	eor	r24, r25
     a7c:	8a 8b       	std	Y+18, r24	; 0x12
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	ae 01       	movw	r20, r28
     a84:	47 5e       	subi	r20, 0xE7	; 231
     a86:	5f 4f       	sbci	r21, 0xFF	; 255
     a88:	6a de       	rcall	.-812    	; 0x75e <_fpadd_parts>
     a8a:	45 d3       	rcall	.+1674   	; 0x1116 <__pack_f>
     a8c:	a0 96       	adiw	r28, 0x20	; 32
     a8e:	e6 e0       	ldi	r30, 0x06	; 6
     a90:	20 c5       	rjmp	.+2624   	; 0x14d2 <__epilogue_restores__+0x18>

00000a92 <__mulsf3>:
     a92:	a0 e2       	ldi	r26, 0x20	; 32
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	ee e4       	ldi	r30, 0x4E	; 78
     a98:	f5 e0       	ldi	r31, 0x05	; 5
     a9a:	f3 c4       	rjmp	.+2534   	; 0x1482 <__prologue_saves__>
     a9c:	69 83       	std	Y+1, r22	; 0x01
     a9e:	7a 83       	std	Y+2, r23	; 0x02
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	2d 83       	std	Y+5, r18	; 0x05
     aa6:	3e 83       	std	Y+6, r19	; 0x06
     aa8:	4f 83       	std	Y+7, r20	; 0x07
     aaa:	58 87       	std	Y+8, r21	; 0x08
     aac:	ce 01       	movw	r24, r28
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	be 01       	movw	r22, r28
     ab2:	67 5f       	subi	r22, 0xF7	; 247
     ab4:	7f 4f       	sbci	r23, 0xFF	; 255
     ab6:	fc d3       	rcall	.+2040   	; 0x12b0 <__unpack_f>
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	be 01       	movw	r22, r28
     abe:	6f 5e       	subi	r22, 0xEF	; 239
     ac0:	7f 4f       	sbci	r23, 0xFF	; 255
     ac2:	f6 d3       	rcall	.+2028   	; 0x12b0 <__unpack_f>
     ac4:	99 85       	ldd	r25, Y+9	; 0x09
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	78 f0       	brcs	.+30     	; 0xae8 <__mulsf3+0x56>
     aca:	89 89       	ldd	r24, Y+17	; 0x11
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	c0 f0       	brcs	.+48     	; 0xb00 <__mulsf3+0x6e>
     ad0:	94 30       	cpi	r25, 0x04	; 4
     ad2:	19 f4       	brne	.+6      	; 0xada <__mulsf3+0x48>
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	41 f4       	brne	.+16     	; 0xae8 <__mulsf3+0x56>
     ad8:	cb c0       	rjmp	.+406    	; 0xc70 <__mulsf3+0x1de>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	19 f4       	brne	.+6      	; 0xae4 <__mulsf3+0x52>
     ade:	92 30       	cpi	r25, 0x02	; 2
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__mulsf3+0x6e>
     ae2:	c6 c0       	rjmp	.+396    	; 0xc70 <__mulsf3+0x1de>
     ae4:	92 30       	cpi	r25, 0x02	; 2
     ae6:	51 f4       	brne	.+20     	; 0xafc <__mulsf3+0x6a>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	2a 85       	ldd	r18, Y+10	; 0x0a
     aec:	9a 89       	ldd	r25, Y+18	; 0x12
     aee:	29 17       	cp	r18, r25
     af0:	09 f4       	brne	.+2      	; 0xaf4 <__mulsf3+0x62>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	8a 87       	std	Y+10, r24	; 0x0a
     af6:	ce 01       	movw	r24, r28
     af8:	09 96       	adiw	r24, 0x09	; 9
     afa:	bc c0       	rjmp	.+376    	; 0xc74 <__mulsf3+0x1e2>
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	51 f4       	brne	.+20     	; 0xb14 <__mulsf3+0x82>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	2a 85       	ldd	r18, Y+10	; 0x0a
     b04:	9a 89       	ldd	r25, Y+18	; 0x12
     b06:	29 17       	cp	r18, r25
     b08:	09 f4       	brne	.+2      	; 0xb0c <__mulsf3+0x7a>
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	8a 8b       	std	Y+18, r24	; 0x12
     b0e:	ce 01       	movw	r24, r28
     b10:	41 96       	adiw	r24, 0x11	; 17
     b12:	b0 c0       	rjmp	.+352    	; 0xc74 <__mulsf3+0x1e2>
     b14:	6d 84       	ldd	r6, Y+13	; 0x0d
     b16:	7e 84       	ldd	r7, Y+14	; 0x0e
     b18:	8f 84       	ldd	r8, Y+15	; 0x0f
     b1a:	98 88       	ldd	r9, Y+16	; 0x10
     b1c:	ed 88       	ldd	r14, Y+21	; 0x15
     b1e:	fe 88       	ldd	r15, Y+22	; 0x16
     b20:	0f 89       	ldd	r16, Y+23	; 0x17
     b22:	18 8d       	ldd	r17, Y+24	; 0x18
     b24:	e0 e2       	ldi	r30, 0x20	; 32
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	dc 01       	movw	r26, r24
     b2e:	aa 24       	eor	r10, r10
     b30:	bb 24       	eor	r11, r11
     b32:	65 01       	movw	r12, r10
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	a9 01       	movw	r20, r18
     b3a:	b3 01       	movw	r22, r6
     b3c:	61 70       	andi	r22, 0x01	; 1
     b3e:	70 70       	andi	r23, 0x00	; 0
     b40:	61 15       	cp	r22, r1
     b42:	71 05       	cpc	r23, r1
     b44:	d1 f0       	breq	.+52     	; 0xb7a <__mulsf3+0xe8>
     b46:	2e 0d       	add	r18, r14
     b48:	3f 1d       	adc	r19, r15
     b4a:	40 1f       	adc	r20, r16
     b4c:	51 1f       	adc	r21, r17
     b4e:	15 01       	movw	r2, r10
     b50:	26 01       	movw	r4, r12
     b52:	28 0e       	add	r2, r24
     b54:	39 1e       	adc	r3, r25
     b56:	4a 1e       	adc	r4, r26
     b58:	5b 1e       	adc	r5, r27
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	2e 15       	cp	r18, r14
     b64:	3f 05       	cpc	r19, r15
     b66:	40 07       	cpc	r20, r16
     b68:	51 07       	cpc	r21, r17
     b6a:	18 f0       	brcs	.+6      	; 0xb72 <__mulsf3+0xe0>
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	dc 01       	movw	r26, r24
     b72:	82 0d       	add	r24, r2
     b74:	93 1d       	adc	r25, r3
     b76:	a4 1d       	adc	r26, r4
     b78:	b5 1d       	adc	r27, r5
     b7a:	aa 0c       	add	r10, r10
     b7c:	bb 1c       	adc	r11, r11
     b7e:	cc 1c       	adc	r12, r12
     b80:	dd 1c       	adc	r13, r13
     b82:	17 ff       	sbrs	r17, 7
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <__mulsf3+0x106>
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	26 2e       	mov	r2, r22
     b8a:	31 2c       	mov	r3, r1
     b8c:	41 2c       	mov	r4, r1
     b8e:	51 2c       	mov	r5, r1
     b90:	a2 28       	or	r10, r2
     b92:	b3 28       	or	r11, r3
     b94:	c4 28       	or	r12, r4
     b96:	d5 28       	or	r13, r5
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	49 f0       	breq	.+18     	; 0xbae <__mulsf3+0x11c>
     b9c:	ee 0c       	add	r14, r14
     b9e:	ff 1c       	adc	r15, r15
     ba0:	00 1f       	adc	r16, r16
     ba2:	11 1f       	adc	r17, r17
     ba4:	96 94       	lsr	r9
     ba6:	87 94       	ror	r8
     ba8:	77 94       	ror	r7
     baa:	67 94       	ror	r6
     bac:	c6 cf       	rjmp	.-116    	; 0xb3a <__mulsf3+0xa8>
     bae:	6b 89       	ldd	r22, Y+19	; 0x13
     bb0:	7c 89       	ldd	r23, Y+20	; 0x14
     bb2:	eb 85       	ldd	r30, Y+11	; 0x0b
     bb4:	fc 85       	ldd	r31, Y+12	; 0x0c
     bb6:	6e 0f       	add	r22, r30
     bb8:	7f 1f       	adc	r23, r31
     bba:	6e 5f       	subi	r22, 0xFE	; 254
     bbc:	7f 4f       	sbci	r23, 0xFF	; 255
     bbe:	7c 8f       	std	Y+28, r23	; 0x1c
     bc0:	6b 8f       	std	Y+27, r22	; 0x1b
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	ea 85       	ldd	r30, Y+10	; 0x0a
     bc6:	7a 89       	ldd	r23, Y+18	; 0x12
     bc8:	e7 17       	cp	r30, r23
     bca:	09 f4       	brne	.+2      	; 0xbce <__mulsf3+0x13c>
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	6a 8f       	std	Y+26, r22	; 0x1a
     bd0:	6b 8d       	ldd	r22, Y+27	; 0x1b
     bd2:	7c 8d       	ldd	r23, Y+28	; 0x1c
     bd4:	10 c0       	rjmp	.+32     	; 0xbf6 <__mulsf3+0x164>
     bd6:	fc 01       	movw	r30, r24
     bd8:	e1 70       	andi	r30, 0x01	; 1
     bda:	f0 70       	andi	r31, 0x00	; 0
     bdc:	30 97       	sbiw	r30, 0x00	; 0
     bde:	29 f0       	breq	.+10     	; 0xbea <__mulsf3+0x158>
     be0:	56 95       	lsr	r21
     be2:	47 95       	ror	r20
     be4:	37 95       	ror	r19
     be6:	27 95       	ror	r18
     be8:	50 68       	ori	r21, 0x80	; 128
     bea:	b6 95       	lsr	r27
     bec:	a7 95       	ror	r26
     bee:	97 95       	ror	r25
     bf0:	87 95       	ror	r24
     bf2:	6f 5f       	subi	r22, 0xFF	; 255
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	b7 fd       	sbrc	r27, 7
     bf8:	ee cf       	rjmp	.-36     	; 0xbd6 <__mulsf3+0x144>
     bfa:	0c c0       	rjmp	.+24     	; 0xc14 <__mulsf3+0x182>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	aa 1f       	adc	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	57 fd       	sbrc	r21, 7
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	22 0f       	add	r18, r18
     c0a:	33 1f       	adc	r19, r19
     c0c:	44 1f       	adc	r20, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	61 50       	subi	r22, 0x01	; 1
     c12:	70 40       	sbci	r23, 0x00	; 0
     c14:	80 30       	cpi	r24, 0x00	; 0
     c16:	e0 e0       	ldi	r30, 0x00	; 0
     c18:	9e 07       	cpc	r25, r30
     c1a:	e0 e0       	ldi	r30, 0x00	; 0
     c1c:	ae 07       	cpc	r26, r30
     c1e:	e0 e4       	ldi	r30, 0x40	; 64
     c20:	be 07       	cpc	r27, r30
     c22:	60 f3       	brcs	.-40     	; 0xbfc <__mulsf3+0x16a>
     c24:	6b 8f       	std	Y+27, r22	; 0x1b
     c26:	7c 8f       	std	Y+28, r23	; 0x1c
     c28:	6f e7       	ldi	r22, 0x7F	; 127
     c2a:	e6 2e       	mov	r14, r22
     c2c:	f1 2c       	mov	r15, r1
     c2e:	01 2d       	mov	r16, r1
     c30:	11 2d       	mov	r17, r1
     c32:	e8 22       	and	r14, r24
     c34:	f9 22       	and	r15, r25
     c36:	0a 23       	and	r16, r26
     c38:	1b 23       	and	r17, r27
     c3a:	60 e4       	ldi	r22, 0x40	; 64
     c3c:	e6 16       	cp	r14, r22
     c3e:	f1 04       	cpc	r15, r1
     c40:	01 05       	cpc	r16, r1
     c42:	11 05       	cpc	r17, r1
     c44:	61 f4       	brne	.+24     	; 0xc5e <__mulsf3+0x1cc>
     c46:	87 fd       	sbrc	r24, 7
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <__mulsf3+0x1cc>
     c4a:	21 15       	cp	r18, r1
     c4c:	31 05       	cpc	r19, r1
     c4e:	41 05       	cpc	r20, r1
     c50:	51 05       	cpc	r21, r1
     c52:	29 f0       	breq	.+10     	; 0xc5e <__mulsf3+0x1cc>
     c54:	80 5c       	subi	r24, 0xC0	; 192
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	af 4f       	sbci	r26, 0xFF	; 255
     c5a:	bf 4f       	sbci	r27, 0xFF	; 255
     c5c:	80 78       	andi	r24, 0x80	; 128
     c5e:	8d 8f       	std	Y+29, r24	; 0x1d
     c60:	9e 8f       	std	Y+30, r25	; 0x1e
     c62:	af 8f       	std	Y+31, r26	; 0x1f
     c64:	b8 a3       	std	Y+32, r27	; 0x20
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 8f       	std	Y+25, r24	; 0x19
     c6a:	ce 01       	movw	r24, r28
     c6c:	49 96       	adiw	r24, 0x19	; 25
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <__mulsf3+0x1e2>
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	50 d2       	rcall	.+1184   	; 0x1116 <__pack_f>
     c76:	a0 96       	adiw	r28, 0x20	; 32
     c78:	e2 e1       	ldi	r30, 0x12	; 18
     c7a:	1f c4       	rjmp	.+2110   	; 0x14ba <__epilogue_restores__>

00000c7c <__divsf3>:
     c7c:	a8 e1       	ldi	r26, 0x18	; 24
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e3 e4       	ldi	r30, 0x43	; 67
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	06 c4       	rjmp	.+2060   	; 0x1492 <__prologue_saves__+0x10>
     c86:	69 83       	std	Y+1, r22	; 0x01
     c88:	7a 83       	std	Y+2, r23	; 0x02
     c8a:	8b 83       	std	Y+3, r24	; 0x03
     c8c:	9c 83       	std	Y+4, r25	; 0x04
     c8e:	2d 83       	std	Y+5, r18	; 0x05
     c90:	3e 83       	std	Y+6, r19	; 0x06
     c92:	4f 83       	std	Y+7, r20	; 0x07
     c94:	58 87       	std	Y+8, r21	; 0x08
     c96:	8e 01       	movw	r16, r28
     c98:	07 5f       	subi	r16, 0xF7	; 247
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	b8 01       	movw	r22, r16
     ca2:	06 d3       	rcall	.+1548   	; 0x12b0 <__unpack_f>
     ca4:	81 e1       	ldi	r24, 0x11	; 17
     ca6:	e8 2e       	mov	r14, r24
     ca8:	f1 2c       	mov	r15, r1
     caa:	ec 0e       	add	r14, r28
     cac:	fd 1e       	adc	r15, r29
     cae:	ce 01       	movw	r24, r28
     cb0:	05 96       	adiw	r24, 0x05	; 5
     cb2:	b7 01       	movw	r22, r14
     cb4:	fd d2       	rcall	.+1530   	; 0x12b0 <__unpack_f>
     cb6:	99 85       	ldd	r25, Y+9	; 0x09
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	08 f4       	brcc	.+2      	; 0xcbe <__divsf3+0x42>
     cbc:	83 c0       	rjmp	.+262    	; 0xdc4 <__divsf3+0x148>
     cbe:	89 89       	ldd	r24, Y+17	; 0x11
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <__divsf3+0x4a>
     cc4:	7b c0       	rjmp	.+246    	; 0xdbc <__divsf3+0x140>
     cc6:	2a 85       	ldd	r18, Y+10	; 0x0a
     cc8:	3a 89       	ldd	r19, Y+18	; 0x12
     cca:	23 27       	eor	r18, r19
     ccc:	2a 87       	std	Y+10, r18	; 0x0a
     cce:	94 30       	cpi	r25, 0x04	; 4
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <__divsf3+0x5a>
     cd2:	92 30       	cpi	r25, 0x02	; 2
     cd4:	21 f4       	brne	.+8      	; 0xcde <__divsf3+0x62>
     cd6:	98 17       	cp	r25, r24
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__divsf3+0x60>
     cda:	6c c0       	rjmp	.+216    	; 0xdb4 <__divsf3+0x138>
     cdc:	71 c0       	rjmp	.+226    	; 0xdc0 <__divsf3+0x144>
     cde:	84 30       	cpi	r24, 0x04	; 4
     ce0:	39 f4       	brne	.+14     	; 0xcf0 <__divsf3+0x74>
     ce2:	1d 86       	std	Y+13, r1	; 0x0d
     ce4:	1e 86       	std	Y+14, r1	; 0x0e
     ce6:	1f 86       	std	Y+15, r1	; 0x0f
     ce8:	18 8a       	std	Y+16, r1	; 0x10
     cea:	1c 86       	std	Y+12, r1	; 0x0c
     cec:	1b 86       	std	Y+11, r1	; 0x0b
     cee:	6a c0       	rjmp	.+212    	; 0xdc4 <__divsf3+0x148>
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	19 f4       	brne	.+6      	; 0xcfa <__divsf3+0x7e>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	89 87       	std	Y+9, r24	; 0x09
     cf8:	65 c0       	rjmp	.+202    	; 0xdc4 <__divsf3+0x148>
     cfa:	8b 85       	ldd	r24, Y+11	; 0x0b
     cfc:	9c 85       	ldd	r25, Y+12	; 0x0c
     cfe:	2b 89       	ldd	r18, Y+19	; 0x13
     d00:	3c 89       	ldd	r19, Y+20	; 0x14
     d02:	82 1b       	sub	r24, r18
     d04:	93 0b       	sbc	r25, r19
     d06:	9c 87       	std	Y+12, r25	; 0x0c
     d08:	8b 87       	std	Y+11, r24	; 0x0b
     d0a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d0c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d0e:	4f 85       	ldd	r20, Y+15	; 0x0f
     d10:	58 89       	ldd	r21, Y+16	; 0x10
     d12:	ed 88       	ldd	r14, Y+21	; 0x15
     d14:	fe 88       	ldd	r15, Y+22	; 0x16
     d16:	0f 89       	ldd	r16, Y+23	; 0x17
     d18:	18 8d       	ldd	r17, Y+24	; 0x18
     d1a:	2e 15       	cp	r18, r14
     d1c:	3f 05       	cpc	r19, r15
     d1e:	40 07       	cpc	r20, r16
     d20:	51 07       	cpc	r21, r17
     d22:	38 f4       	brcc	.+14     	; 0xd32 <__divsf3+0xb6>
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9c 87       	std	Y+12, r25	; 0x0c
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	6f e1       	ldi	r22, 0x1F	; 31
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	a1 2c       	mov	r10, r1
     d38:	b1 2c       	mov	r11, r1
     d3a:	c1 2c       	mov	r12, r1
     d3c:	a0 e4       	ldi	r26, 0x40	; 64
     d3e:	da 2e       	mov	r13, r26
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	dc 01       	movw	r26, r24
     d46:	2e 15       	cp	r18, r14
     d48:	3f 05       	cpc	r19, r15
     d4a:	40 07       	cpc	r20, r16
     d4c:	51 07       	cpc	r21, r17
     d4e:	40 f0       	brcs	.+16     	; 0xd60 <__divsf3+0xe4>
     d50:	8a 29       	or	r24, r10
     d52:	9b 29       	or	r25, r11
     d54:	ac 29       	or	r26, r12
     d56:	bd 29       	or	r27, r13
     d58:	2e 19       	sub	r18, r14
     d5a:	3f 09       	sbc	r19, r15
     d5c:	40 0b       	sbc	r20, r16
     d5e:	51 0b       	sbc	r21, r17
     d60:	d6 94       	lsr	r13
     d62:	c7 94       	ror	r12
     d64:	b7 94       	ror	r11
     d66:	a7 94       	ror	r10
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	44 1f       	adc	r20, r20
     d6e:	55 1f       	adc	r21, r21
     d70:	61 50       	subi	r22, 0x01	; 1
     d72:	70 40       	sbci	r23, 0x00	; 0
     d74:	41 f7       	brne	.-48     	; 0xd46 <__divsf3+0xca>
     d76:	6f e7       	ldi	r22, 0x7F	; 127
     d78:	e6 2e       	mov	r14, r22
     d7a:	f1 2c       	mov	r15, r1
     d7c:	01 2d       	mov	r16, r1
     d7e:	11 2d       	mov	r17, r1
     d80:	e8 22       	and	r14, r24
     d82:	f9 22       	and	r15, r25
     d84:	0a 23       	and	r16, r26
     d86:	1b 23       	and	r17, r27
     d88:	60 e4       	ldi	r22, 0x40	; 64
     d8a:	e6 16       	cp	r14, r22
     d8c:	f1 04       	cpc	r15, r1
     d8e:	01 05       	cpc	r16, r1
     d90:	11 05       	cpc	r17, r1
     d92:	61 f4       	brne	.+24     	; 0xdac <__divsf3+0x130>
     d94:	87 fd       	sbrc	r24, 7
     d96:	0a c0       	rjmp	.+20     	; 0xdac <__divsf3+0x130>
     d98:	21 15       	cp	r18, r1
     d9a:	31 05       	cpc	r19, r1
     d9c:	41 05       	cpc	r20, r1
     d9e:	51 05       	cpc	r21, r1
     da0:	29 f0       	breq	.+10     	; 0xdac <__divsf3+0x130>
     da2:	80 5c       	subi	r24, 0xC0	; 192
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	af 4f       	sbci	r26, 0xFF	; 255
     da8:	bf 4f       	sbci	r27, 0xFF	; 255
     daa:	80 78       	andi	r24, 0x80	; 128
     dac:	8d 87       	std	Y+13, r24	; 0x0d
     dae:	9e 87       	std	Y+14, r25	; 0x0e
     db0:	af 87       	std	Y+15, r26	; 0x0f
     db2:	b8 8b       	std	Y+16, r27	; 0x10
     db4:	8e 01       	movw	r16, r28
     db6:	07 5f       	subi	r16, 0xF7	; 247
     db8:	1f 4f       	sbci	r17, 0xFF	; 255
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <__divsf3+0x148>
     dbc:	87 01       	movw	r16, r14
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <__divsf3+0x148>
     dc0:	0f ef       	ldi	r16, 0xFF	; 255
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	c8 01       	movw	r24, r16
     dc6:	a7 d1       	rcall	.+846    	; 0x1116 <__pack_f>
     dc8:	68 96       	adiw	r28, 0x18	; 24
     dca:	ea e0       	ldi	r30, 0x0A	; 10
     dcc:	7e c3       	rjmp	.+1788   	; 0x14ca <__epilogue_restores__+0x10>

00000dce <__gesf2>:
     dce:	a8 e1       	ldi	r26, 0x18	; 24
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ec ee       	ldi	r30, 0xEC	; 236
     dd4:	f6 e0       	ldi	r31, 0x06	; 6
     dd6:	61 c3       	rjmp	.+1730   	; 0x149a <__prologue_saves__+0x18>
     dd8:	69 83       	std	Y+1, r22	; 0x01
     dda:	7a 83       	std	Y+2, r23	; 0x02
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	2d 83       	std	Y+5, r18	; 0x05
     de2:	3e 83       	std	Y+6, r19	; 0x06
     de4:	4f 83       	std	Y+7, r20	; 0x07
     de6:	58 87       	std	Y+8, r21	; 0x08
     de8:	8e 01       	movw	r16, r28
     dea:	07 5f       	subi	r16, 0xF7	; 247
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	b8 01       	movw	r22, r16
     df4:	5d d2       	rcall	.+1210   	; 0x12b0 <__unpack_f>
     df6:	81 e1       	ldi	r24, 0x11	; 17
     df8:	e8 2e       	mov	r14, r24
     dfa:	f1 2c       	mov	r15, r1
     dfc:	ec 0e       	add	r14, r28
     dfe:	fd 1e       	adc	r15, r29
     e00:	ce 01       	movw	r24, r28
     e02:	05 96       	adiw	r24, 0x05	; 5
     e04:	b7 01       	movw	r22, r14
     e06:	54 d2       	rcall	.+1192   	; 0x12b0 <__unpack_f>
     e08:	89 85       	ldd	r24, Y+9	; 0x09
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__gesf2+0x4e>
     e0e:	89 89       	ldd	r24, Y+17	; 0x11
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	20 f0       	brcs	.+8      	; 0xe1c <__gesf2+0x4e>
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	b4 d2       	rcall	.+1384   	; 0x1382 <__fpcmp_parts_f>
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <__gesf2+0x50>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	68 96       	adiw	r28, 0x18	; 24
     e20:	e6 e0       	ldi	r30, 0x06	; 6
     e22:	57 c3       	rjmp	.+1710   	; 0x14d2 <__epilogue_restores__+0x18>

00000e24 <__floatsisf>:
     e24:	a8 e0       	ldi	r26, 0x08	; 8
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e1       	ldi	r30, 0x17	; 23
     e2a:	f7 e0       	ldi	r31, 0x07	; 7
     e2c:	36 c3       	rjmp	.+1644   	; 0x149a <__prologue_saves__+0x18>
     e2e:	7b 01       	movw	r14, r22
     e30:	8c 01       	movw	r16, r24
     e32:	83 e0       	ldi	r24, 0x03	; 3
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	d8 01       	movw	r26, r16
     e38:	c7 01       	movw	r24, r14
     e3a:	88 27       	eor	r24, r24
     e3c:	b7 fd       	sbrc	r27, 7
     e3e:	83 95       	inc	r24
     e40:	99 27       	eor	r25, r25
     e42:	aa 27       	eor	r26, r26
     e44:	bb 27       	eor	r27, r27
     e46:	28 2f       	mov	r18, r24
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	e1 14       	cp	r14, r1
     e4c:	f1 04       	cpc	r15, r1
     e4e:	01 05       	cpc	r16, r1
     e50:	11 05       	cpc	r17, r1
     e52:	19 f4       	brne	.+6      	; 0xe5a <__floatsisf+0x36>
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	36 c0       	rjmp	.+108    	; 0xec6 <__floatsisf+0xa2>
     e5a:	8e e1       	ldi	r24, 0x1E	; 30
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	22 23       	and	r18, r18
     e64:	89 f0       	breq	.+34     	; 0xe88 <__floatsisf+0x64>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	e8 16       	cp	r14, r24
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	f8 06       	cpc	r15, r24
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	08 07       	cpc	r16, r24
     e72:	80 e8       	ldi	r24, 0x80	; 128
     e74:	18 07       	cpc	r17, r24
     e76:	59 f1       	breq	.+86     	; 0xece <__floatsisf+0xaa>
     e78:	10 95       	com	r17
     e7a:	00 95       	com	r16
     e7c:	f0 94       	com	r15
     e7e:	e0 94       	com	r14
     e80:	e1 1c       	adc	r14, r1
     e82:	f1 1c       	adc	r15, r1
     e84:	01 1d       	adc	r16, r1
     e86:	11 1d       	adc	r17, r1
     e88:	ed 82       	std	Y+5, r14	; 0x05
     e8a:	fe 82       	std	Y+6, r15	; 0x06
     e8c:	0f 83       	std	Y+7, r16	; 0x07
     e8e:	18 87       	std	Y+8, r17	; 0x08
     e90:	c8 01       	movw	r24, r16
     e92:	b7 01       	movw	r22, r14
     e94:	e6 d0       	rcall	.+460    	; 0x1062 <__clzsi2>
     e96:	9c 01       	movw	r18, r24
     e98:	21 50       	subi	r18, 0x01	; 1
     e9a:	30 40       	sbci	r19, 0x00	; 0
     e9c:	12 16       	cp	r1, r18
     e9e:	13 06       	cpc	r1, r19
     ea0:	94 f4       	brge	.+36     	; 0xec6 <__floatsisf+0xa2>
     ea2:	02 2e       	mov	r0, r18
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <__floatsisf+0x8a>
     ea6:	ee 0c       	add	r14, r14
     ea8:	ff 1c       	adc	r15, r15
     eaa:	00 1f       	adc	r16, r16
     eac:	11 1f       	adc	r17, r17
     eae:	0a 94       	dec	r0
     eb0:	d2 f7       	brpl	.-12     	; 0xea6 <__floatsisf+0x82>
     eb2:	ed 82       	std	Y+5, r14	; 0x05
     eb4:	fe 82       	std	Y+6, r15	; 0x06
     eb6:	0f 83       	std	Y+7, r16	; 0x07
     eb8:	18 87       	std	Y+8, r17	; 0x08
     eba:	8e e1       	ldi	r24, 0x1E	; 30
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	82 1b       	sub	r24, r18
     ec0:	93 0b       	sbc	r25, r19
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	25 d1       	rcall	.+586    	; 0x1116 <__pack_f>
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <__floatsisf+0xb2>
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	9f ec       	ldi	r25, 0xCF	; 207
     ed6:	28 96       	adiw	r28, 0x08	; 8
     ed8:	e6 e0       	ldi	r30, 0x06	; 6
     eda:	fb c2       	rjmp	.+1526   	; 0x14d2 <__epilogue_restores__+0x18>

00000edc <__fixsfsi>:
     edc:	ac e0       	ldi	r26, 0x0C	; 12
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e3 e7       	ldi	r30, 0x73	; 115
     ee2:	f7 e0       	ldi	r31, 0x07	; 7
     ee4:	de c2       	rjmp	.+1468   	; 0x14a2 <__prologue_saves__+0x20>
     ee6:	69 83       	std	Y+1, r22	; 0x01
     ee8:	7a 83       	std	Y+2, r23	; 0x02
     eea:	8b 83       	std	Y+3, r24	; 0x03
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	be 01       	movw	r22, r28
     ef4:	6b 5f       	subi	r22, 0xFB	; 251
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	db d1       	rcall	.+950    	; 0x12b0 <__unpack_f>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	81 f1       	breq	.+96     	; 0xf60 <__fixsfsi+0x84>
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	70 f1       	brcs	.+92     	; 0xf60 <__fixsfsi+0x84>
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	21 f4       	brne	.+8      	; 0xf10 <__fixsfsi+0x34>
     f08:	8e 81       	ldd	r24, Y+6	; 0x06
     f0a:	88 23       	and	r24, r24
     f0c:	69 f1       	breq	.+90     	; 0xf68 <__fixsfsi+0x8c>
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <__fixsfsi+0x48>
     f10:	2f 81       	ldd	r18, Y+7	; 0x07
     f12:	38 85       	ldd	r19, Y+8	; 0x08
     f14:	37 fd       	sbrc	r19, 7
     f16:	24 c0       	rjmp	.+72     	; 0xf60 <__fixsfsi+0x84>
     f18:	6e 81       	ldd	r22, Y+6	; 0x06
     f1a:	2f 31       	cpi	r18, 0x1F	; 31
     f1c:	31 05       	cpc	r19, r1
     f1e:	3c f0       	brlt	.+14     	; 0xf2e <__fixsfsi+0x52>
     f20:	66 23       	and	r22, r22
     f22:	11 f1       	breq	.+68     	; 0xf68 <__fixsfsi+0x8c>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e8       	ldi	r21, 0x80	; 128
     f2c:	21 c0       	rjmp	.+66     	; 0xf70 <__fixsfsi+0x94>
     f2e:	8e e1       	ldi	r24, 0x1E	; 30
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	82 1b       	sub	r24, r18
     f34:	93 0b       	sbc	r25, r19
     f36:	29 85       	ldd	r18, Y+9	; 0x09
     f38:	3a 85       	ldd	r19, Y+10	; 0x0a
     f3a:	4b 85       	ldd	r20, Y+11	; 0x0b
     f3c:	5c 85       	ldd	r21, Y+12	; 0x0c
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__fixsfsi+0x6c>
     f40:	56 95       	lsr	r21
     f42:	47 95       	ror	r20
     f44:	37 95       	ror	r19
     f46:	27 95       	ror	r18
     f48:	8a 95       	dec	r24
     f4a:	d2 f7       	brpl	.-12     	; 0xf40 <__fixsfsi+0x64>
     f4c:	66 23       	and	r22, r22
     f4e:	81 f0       	breq	.+32     	; 0xf70 <__fixsfsi+0x94>
     f50:	50 95       	com	r21
     f52:	40 95       	com	r20
     f54:	30 95       	com	r19
     f56:	21 95       	neg	r18
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	4f 4f       	sbci	r20, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	08 c0       	rjmp	.+16     	; 0xf70 <__fixsfsi+0x94>
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	a9 01       	movw	r20, r18
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__fixsfsi+0x94>
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f ef       	ldi	r20, 0xFF	; 255
     f6e:	5f e7       	ldi	r21, 0x7F	; 127
     f70:	b9 01       	movw	r22, r18
     f72:	ca 01       	movw	r24, r20
     f74:	2c 96       	adiw	r28, 0x0c	; 12
     f76:	e2 e0       	ldi	r30, 0x02	; 2
     f78:	b0 c2       	rjmp	.+1376   	; 0x14da <__epilogue_restores__+0x20>

00000f7a <__floatunsisf>:
     f7a:	a8 e0       	ldi	r26, 0x08	; 8
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e2 ec       	ldi	r30, 0xC2	; 194
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	89 c2       	rjmp	.+1298   	; 0x1496 <__prologue_saves__+0x14>
     f84:	7b 01       	movw	r14, r22
     f86:	8c 01       	movw	r16, r24
     f88:	1a 82       	std	Y+2, r1	; 0x02
     f8a:	61 15       	cp	r22, r1
     f8c:	71 05       	cpc	r23, r1
     f8e:	81 05       	cpc	r24, r1
     f90:	91 05       	cpc	r25, r1
     f92:	19 f4       	brne	.+6      	; 0xf9a <__floatunsisf+0x20>
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	5e c0       	rjmp	.+188    	; 0x1056 <__floatunsisf+0xdc>
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	8e e1       	ldi	r24, 0x1E	; 30
     fa0:	c8 2e       	mov	r12, r24
     fa2:	d1 2c       	mov	r13, r1
     fa4:	dc 82       	std	Y+4, r13	; 0x04
     fa6:	cb 82       	std	Y+3, r12	; 0x03
     fa8:	ed 82       	std	Y+5, r14	; 0x05
     faa:	fe 82       	std	Y+6, r15	; 0x06
     fac:	0f 83       	std	Y+7, r16	; 0x07
     fae:	18 87       	std	Y+8, r17	; 0x08
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	56 d0       	rcall	.+172    	; 0x1062 <__clzsi2>
     fb6:	fc 01       	movw	r30, r24
     fb8:	31 97       	sbiw	r30, 0x01	; 1
     fba:	f7 ff       	sbrs	r31, 7
     fbc:	3a c0       	rjmp	.+116    	; 0x1032 <__floatunsisf+0xb8>
     fbe:	aa 27       	eor	r26, r26
     fc0:	bb 27       	eor	r27, r27
     fc2:	ae 1b       	sub	r26, r30
     fc4:	bf 0b       	sbc	r27, r31
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0a 2e       	mov	r0, r26
     fd0:	04 c0       	rjmp	.+8      	; 0xfda <__floatunsisf+0x60>
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	44 1f       	adc	r20, r20
     fd8:	55 1f       	adc	r21, r21
     fda:	0a 94       	dec	r0
     fdc:	d2 f7       	brpl	.-12     	; 0xfd2 <__floatunsisf+0x58>
     fde:	21 50       	subi	r18, 0x01	; 1
     fe0:	30 40       	sbci	r19, 0x00	; 0
     fe2:	40 40       	sbci	r20, 0x00	; 0
     fe4:	50 40       	sbci	r21, 0x00	; 0
     fe6:	2e 21       	and	r18, r14
     fe8:	3f 21       	and	r19, r15
     fea:	40 23       	and	r20, r16
     fec:	51 23       	and	r21, r17
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	21 15       	cp	r18, r1
     ff8:	31 05       	cpc	r19, r1
     ffa:	41 05       	cpc	r20, r1
     ffc:	51 05       	cpc	r21, r1
     ffe:	19 f4       	brne	.+6      	; 0x1006 <__floatunsisf+0x8c>
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	cb 01       	movw	r24, r22
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__floatunsisf+0x96>
    1008:	16 95       	lsr	r17
    100a:	07 95       	ror	r16
    100c:	f7 94       	ror	r15
    100e:	e7 94       	ror	r14
    1010:	aa 95       	dec	r26
    1012:	d2 f7       	brpl	.-12     	; 0x1008 <__floatunsisf+0x8e>
    1014:	e6 2a       	or	r14, r22
    1016:	f7 2a       	or	r15, r23
    1018:	08 2b       	or	r16, r24
    101a:	19 2b       	or	r17, r25
    101c:	ed 82       	std	Y+5, r14	; 0x05
    101e:	fe 82       	std	Y+6, r15	; 0x06
    1020:	0f 83       	std	Y+7, r16	; 0x07
    1022:	18 87       	std	Y+8, r17	; 0x08
    1024:	8e e1       	ldi	r24, 0x1E	; 30
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	8e 1b       	sub	r24, r30
    102a:	9f 0b       	sbc	r25, r31
    102c:	9c 83       	std	Y+4, r25	; 0x04
    102e:	8b 83       	std	Y+3, r24	; 0x03
    1030:	12 c0       	rjmp	.+36     	; 0x1056 <__floatunsisf+0xdc>
    1032:	30 97       	sbiw	r30, 0x00	; 0
    1034:	81 f0       	breq	.+32     	; 0x1056 <__floatunsisf+0xdc>
    1036:	0e 2e       	mov	r0, r30
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <__floatunsisf+0xc8>
    103a:	ee 0c       	add	r14, r14
    103c:	ff 1c       	adc	r15, r15
    103e:	00 1f       	adc	r16, r16
    1040:	11 1f       	adc	r17, r17
    1042:	0a 94       	dec	r0
    1044:	d2 f7       	brpl	.-12     	; 0x103a <__floatunsisf+0xc0>
    1046:	ed 82       	std	Y+5, r14	; 0x05
    1048:	fe 82       	std	Y+6, r15	; 0x06
    104a:	0f 83       	std	Y+7, r16	; 0x07
    104c:	18 87       	std	Y+8, r17	; 0x08
    104e:	ce 1a       	sub	r12, r30
    1050:	df 0a       	sbc	r13, r31
    1052:	dc 82       	std	Y+4, r13	; 0x04
    1054:	cb 82       	std	Y+3, r12	; 0x03
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	5d d0       	rcall	.+186    	; 0x1116 <__pack_f>
    105c:	28 96       	adiw	r28, 0x08	; 8
    105e:	e8 e0       	ldi	r30, 0x08	; 8
    1060:	36 c2       	rjmp	.+1132   	; 0x14ce <__epilogue_restores__+0x14>

00001062 <__clzsi2>:
    1062:	af 92       	push	r10
    1064:	bf 92       	push	r11
    1066:	cf 92       	push	r12
    1068:	df 92       	push	r13
    106a:	ef 92       	push	r14
    106c:	ff 92       	push	r15
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	7b 01       	movw	r14, r22
    1074:	8c 01       	movw	r16, r24
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	e8 16       	cp	r14, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	f8 06       	cpc	r15, r24
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 07       	cpc	r16, r24
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	18 07       	cpc	r17, r24
    1086:	58 f4       	brcc	.+22     	; 0x109e <__clzsi2+0x3c>
    1088:	ef ef       	ldi	r30, 0xFF	; 255
    108a:	ee 16       	cp	r14, r30
    108c:	f1 04       	cpc	r15, r1
    108e:	01 05       	cpc	r16, r1
    1090:	11 05       	cpc	r17, r1
    1092:	09 f0       	breq	.+2      	; 0x1096 <__clzsi2+0x34>
    1094:	90 f4       	brcc	.+36     	; 0x10ba <__clzsi2+0x58>
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	dc 01       	movw	r26, r24
    109c:	17 c0       	rjmp	.+46     	; 0x10cc <__clzsi2+0x6a>
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	ef 16       	cp	r14, r31
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ff 06       	cpc	r15, r31
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	0f 07       	cpc	r16, r31
    10aa:	f1 e0       	ldi	r31, 0x01	; 1
    10ac:	1f 07       	cpc	r17, r31
    10ae:	50 f4       	brcc	.+20     	; 0x10c4 <__clzsi2+0x62>
    10b0:	80 e1       	ldi	r24, 0x10	; 16
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <__clzsi2+0x6a>
    10ba:	88 e0       	ldi	r24, 0x08	; 8
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <__clzsi2+0x6a>
    10c4:	88 e1       	ldi	r24, 0x18	; 24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	20 e2       	ldi	r18, 0x20	; 32
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	28 1b       	sub	r18, r24
    10d6:	39 0b       	sbc	r19, r25
    10d8:	4a 0b       	sbc	r20, r26
    10da:	5b 0b       	sbc	r21, r27
    10dc:	57 01       	movw	r10, r14
    10de:	68 01       	movw	r12, r16
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <__clzsi2+0x88>
    10e2:	d6 94       	lsr	r13
    10e4:	c7 94       	ror	r12
    10e6:	b7 94       	ror	r11
    10e8:	a7 94       	ror	r10
    10ea:	8a 95       	dec	r24
    10ec:	d2 f7       	brpl	.-12     	; 0x10e2 <__clzsi2+0x80>
    10ee:	d6 01       	movw	r26, r12
    10f0:	c5 01       	movw	r24, r10
    10f2:	89 5f       	subi	r24, 0xF9	; 249
    10f4:	9e 4f       	sbci	r25, 0xFE	; 254
    10f6:	fc 01       	movw	r30, r24
    10f8:	80 81       	ld	r24, Z
    10fa:	28 1b       	sub	r18, r24
    10fc:	31 09       	sbc	r19, r1
    10fe:	41 09       	sbc	r20, r1
    1100:	51 09       	sbc	r21, r1
    1102:	c9 01       	movw	r24, r18
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	bf 90       	pop	r11
    1112:	af 90       	pop	r10
    1114:	08 95       	ret

00001116 <__pack_f>:
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	fc 01       	movw	r30, r24
    1124:	24 81       	ldd	r18, Z+4	; 0x04
    1126:	35 81       	ldd	r19, Z+5	; 0x05
    1128:	46 81       	ldd	r20, Z+6	; 0x06
    112a:	57 81       	ldd	r21, Z+7	; 0x07
    112c:	61 81       	ldd	r22, Z+1	; 0x01
    112e:	80 81       	ld	r24, Z
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	20 f4       	brcc	.+8      	; 0x113c <__pack_f+0x26>
    1134:	40 61       	ori	r20, 0x10	; 16
    1136:	ef ef       	ldi	r30, 0xFF	; 255
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	a3 c0       	rjmp	.+326    	; 0x1282 <__pack_f+0x16c>
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	09 f4       	brne	.+2      	; 0x1142 <__pack_f+0x2c>
    1140:	9b c0       	rjmp	.+310    	; 0x1278 <__pack_f+0x162>
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	09 f4       	brne	.+2      	; 0x1148 <__pack_f+0x32>
    1146:	92 c0       	rjmp	.+292    	; 0x126c <__pack_f+0x156>
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	41 05       	cpc	r20, r1
    114e:	51 05       	cpc	r21, r1
    1150:	09 f4       	brne	.+2      	; 0x1154 <__pack_f+0x3e>
    1152:	8f c0       	rjmp	.+286    	; 0x1272 <__pack_f+0x15c>
    1154:	02 80       	ldd	r0, Z+2	; 0x02
    1156:	f3 81       	ldd	r31, Z+3	; 0x03
    1158:	e0 2d       	mov	r30, r0
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	e2 38       	cpi	r30, 0x82	; 130
    115e:	f8 07       	cpc	r31, r24
    1160:	0c f0       	brlt	.+2      	; 0x1164 <__pack_f+0x4e>
    1162:	5a c0       	rjmp	.+180    	; 0x1218 <__pack_f+0x102>
    1164:	c2 e8       	ldi	r28, 0x82	; 130
    1166:	df ef       	ldi	r29, 0xFF	; 255
    1168:	ce 1b       	sub	r28, r30
    116a:	df 0b       	sbc	r29, r31
    116c:	ca 31       	cpi	r28, 0x1A	; 26
    116e:	d1 05       	cpc	r29, r1
    1170:	6c f5       	brge	.+90     	; 0x11cc <__pack_f+0xb6>
    1172:	79 01       	movw	r14, r18
    1174:	8a 01       	movw	r16, r20
    1176:	0c 2e       	mov	r0, r28
    1178:	04 c0       	rjmp	.+8      	; 0x1182 <__pack_f+0x6c>
    117a:	16 95       	lsr	r17
    117c:	07 95       	ror	r16
    117e:	f7 94       	ror	r15
    1180:	e7 94       	ror	r14
    1182:	0a 94       	dec	r0
    1184:	d2 f7       	brpl	.-12     	; 0x117a <__pack_f+0x64>
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	0c 2e       	mov	r0, r28
    1190:	04 c0       	rjmp	.+8      	; 0x119a <__pack_f+0x84>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	aa 1f       	adc	r26, r26
    1198:	bb 1f       	adc	r27, r27
    119a:	0a 94       	dec	r0
    119c:	d2 f7       	brpl	.-12     	; 0x1192 <__pack_f+0x7c>
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	a1 09       	sbc	r26, r1
    11a2:	b1 09       	sbc	r27, r1
    11a4:	82 23       	and	r24, r18
    11a6:	93 23       	and	r25, r19
    11a8:	a4 23       	and	r26, r20
    11aa:	b5 23       	and	r27, r21
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	a1 05       	cpc	r26, r1
    11b8:	b1 05       	cpc	r27, r1
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <__pack_f+0xac>
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	2e 29       	or	r18, r14
    11c4:	3f 29       	or	r19, r15
    11c6:	40 2b       	or	r20, r16
    11c8:	51 2b       	or	r21, r17
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <__pack_f+0xbc>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	da 01       	movw	r26, r20
    11d4:	c9 01       	movw	r24, r18
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	90 70       	andi	r25, 0x00	; 0
    11da:	a0 70       	andi	r26, 0x00	; 0
    11dc:	b0 70       	andi	r27, 0x00	; 0
    11de:	80 34       	cpi	r24, 0x40	; 64
    11e0:	91 05       	cpc	r25, r1
    11e2:	a1 05       	cpc	r26, r1
    11e4:	b1 05       	cpc	r27, r1
    11e6:	39 f4       	brne	.+14     	; 0x11f6 <__pack_f+0xe0>
    11e8:	27 ff       	sbrs	r18, 7
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <__pack_f+0xe8>
    11ec:	20 5c       	subi	r18, 0xC0	; 192
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	4f 4f       	sbci	r20, 0xFF	; 255
    11f2:	5f 4f       	sbci	r21, 0xFF	; 255
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__pack_f+0xe8>
    11f6:	21 5c       	subi	r18, 0xC1	; 193
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	4f 4f       	sbci	r20, 0xFF	; 255
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	e1 e0       	ldi	r30, 0x01	; 1
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	20 30       	cpi	r18, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	38 07       	cpc	r19, r24
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	48 07       	cpc	r20, r24
    120c:	80 e4       	ldi	r24, 0x40	; 64
    120e:	58 07       	cpc	r21, r24
    1210:	28 f5       	brcc	.+74     	; 0x125c <__pack_f+0x146>
    1212:	e0 e0       	ldi	r30, 0x00	; 0
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	22 c0       	rjmp	.+68     	; 0x125c <__pack_f+0x146>
    1218:	e0 38       	cpi	r30, 0x80	; 128
    121a:	f1 05       	cpc	r31, r1
    121c:	6c f5       	brge	.+90     	; 0x1278 <__pack_f+0x162>
    121e:	e1 58       	subi	r30, 0x81	; 129
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	da 01       	movw	r26, r20
    1224:	c9 01       	movw	r24, r18
    1226:	8f 77       	andi	r24, 0x7F	; 127
    1228:	90 70       	andi	r25, 0x00	; 0
    122a:	a0 70       	andi	r26, 0x00	; 0
    122c:	b0 70       	andi	r27, 0x00	; 0
    122e:	80 34       	cpi	r24, 0x40	; 64
    1230:	91 05       	cpc	r25, r1
    1232:	a1 05       	cpc	r26, r1
    1234:	b1 05       	cpc	r27, r1
    1236:	39 f4       	brne	.+14     	; 0x1246 <__pack_f+0x130>
    1238:	27 ff       	sbrs	r18, 7
    123a:	09 c0       	rjmp	.+18     	; 0x124e <__pack_f+0x138>
    123c:	20 5c       	subi	r18, 0xC0	; 192
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	4f 4f       	sbci	r20, 0xFF	; 255
    1242:	5f 4f       	sbci	r21, 0xFF	; 255
    1244:	04 c0       	rjmp	.+8      	; 0x124e <__pack_f+0x138>
    1246:	21 5c       	subi	r18, 0xC1	; 193
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	4f 4f       	sbci	r20, 0xFF	; 255
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	57 ff       	sbrs	r21, 7
    1250:	05 c0       	rjmp	.+10     	; 0x125c <__pack_f+0x146>
    1252:	56 95       	lsr	r21
    1254:	47 95       	ror	r20
    1256:	37 95       	ror	r19
    1258:	27 95       	ror	r18
    125a:	31 96       	adiw	r30, 0x01	; 1
    125c:	87 e0       	ldi	r24, 0x07	; 7
    125e:	56 95       	lsr	r21
    1260:	47 95       	ror	r20
    1262:	37 95       	ror	r19
    1264:	27 95       	ror	r18
    1266:	8a 95       	dec	r24
    1268:	d1 f7       	brne	.-12     	; 0x125e <__pack_f+0x148>
    126a:	0b c0       	rjmp	.+22     	; 0x1282 <__pack_f+0x16c>
    126c:	e0 e0       	ldi	r30, 0x00	; 0
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	05 c0       	rjmp	.+10     	; 0x127c <__pack_f+0x166>
    1272:	e0 e0       	ldi	r30, 0x00	; 0
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <__pack_f+0x16c>
    1278:	ef ef       	ldi	r30, 0xFF	; 255
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	a9 01       	movw	r20, r18
    1282:	8e 2f       	mov	r24, r30
    1284:	87 95       	ror	r24
    1286:	88 27       	eor	r24, r24
    1288:	87 95       	ror	r24
    128a:	94 2f       	mov	r25, r20
    128c:	9f 77       	andi	r25, 0x7F	; 127
    128e:	67 95       	ror	r22
    1290:	66 27       	eor	r22, r22
    1292:	67 95       	ror	r22
    1294:	e6 95       	lsr	r30
    1296:	e2 2e       	mov	r14, r18
    1298:	a9 2f       	mov	r26, r25
    129a:	a8 2b       	or	r26, r24
    129c:	fe 2f       	mov	r31, r30
    129e:	f6 2b       	or	r31, r22
    12a0:	62 2f       	mov	r22, r18
    12a2:	73 2f       	mov	r23, r19
    12a4:	8a 2f       	mov	r24, r26
    12a6:	9f 2f       	mov	r25, r31
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	e6 e0       	ldi	r30, 0x06	; 6
    12ae:	11 c1       	rjmp	.+546    	; 0x14d2 <__epilogue_restores__+0x18>

000012b0 <__unpack_f>:
    12b0:	dc 01       	movw	r26, r24
    12b2:	fb 01       	movw	r30, r22
    12b4:	2c 91       	ld	r18, X
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	3c 91       	ld	r19, X
    12ba:	11 97       	sbiw	r26, 0x01	; 1
    12bc:	12 96       	adiw	r26, 0x02	; 2
    12be:	8c 91       	ld	r24, X
    12c0:	12 97       	sbiw	r26, 0x02	; 2
    12c2:	48 2f       	mov	r20, r24
    12c4:	4f 77       	andi	r20, 0x7F	; 127
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	98 2f       	mov	r25, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	99 1f       	adc	r25, r25
    12d0:	13 96       	adiw	r26, 0x03	; 3
    12d2:	6c 91       	ld	r22, X
    12d4:	13 97       	sbiw	r26, 0x03	; 3
    12d6:	86 2f       	mov	r24, r22
    12d8:	88 0f       	add	r24, r24
    12da:	89 2b       	or	r24, r25
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	66 1f       	adc	r22, r22
    12e0:	66 27       	eor	r22, r22
    12e2:	66 1f       	adc	r22, r22
    12e4:	61 83       	std	Z+1, r22	; 0x01
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	39 f5       	brne	.+78     	; 0x1338 <__unpack_f+0x88>
    12ea:	21 15       	cp	r18, r1
    12ec:	31 05       	cpc	r19, r1
    12ee:	41 05       	cpc	r20, r1
    12f0:	51 05       	cpc	r21, r1
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <__unpack_f+0x48>
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	29 c0       	rjmp	.+82     	; 0x134a <__unpack_f+0x9a>
    12f8:	82 e8       	ldi	r24, 0x82	; 130
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	93 83       	std	Z+3, r25	; 0x03
    12fe:	82 83       	std	Z+2, r24	; 0x02
    1300:	67 e0       	ldi	r22, 0x07	; 7
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	44 1f       	adc	r20, r20
    1308:	55 1f       	adc	r21, r21
    130a:	6a 95       	dec	r22
    130c:	d1 f7       	brne	.-12     	; 0x1302 <__unpack_f+0x52>
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	80 83       	st	Z, r24
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <__unpack_f+0x76>
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	44 1f       	adc	r20, r20
    131a:	55 1f       	adc	r21, r21
    131c:	82 81       	ldd	r24, Z+2	; 0x02
    131e:	93 81       	ldd	r25, Z+3	; 0x03
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	93 83       	std	Z+3, r25	; 0x03
    1324:	82 83       	std	Z+2, r24	; 0x02
    1326:	20 30       	cpi	r18, 0x00	; 0
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	38 07       	cpc	r19, r24
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	48 07       	cpc	r20, r24
    1330:	80 e4       	ldi	r24, 0x40	; 64
    1332:	58 07       	cpc	r21, r24
    1334:	78 f3       	brcs	.-34     	; 0x1314 <__unpack_f+0x64>
    1336:	20 c0       	rjmp	.+64     	; 0x1378 <__unpack_f+0xc8>
    1338:	8f 3f       	cpi	r24, 0xFF	; 255
    133a:	91 05       	cpc	r25, r1
    133c:	79 f4       	brne	.+30     	; 0x135c <__unpack_f+0xac>
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	41 05       	cpc	r20, r1
    1344:	51 05       	cpc	r21, r1
    1346:	19 f4       	brne	.+6      	; 0x134e <__unpack_f+0x9e>
    1348:	84 e0       	ldi	r24, 0x04	; 4
    134a:	80 83       	st	Z, r24
    134c:	08 95       	ret
    134e:	44 ff       	sbrs	r20, 4
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <__unpack_f+0xa8>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	80 83       	st	Z, r24
    1356:	10 c0       	rjmp	.+32     	; 0x1378 <__unpack_f+0xc8>
    1358:	10 82       	st	Z, r1
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <__unpack_f+0xc8>
    135c:	8f 57       	subi	r24, 0x7F	; 127
    135e:	90 40       	sbci	r25, 0x00	; 0
    1360:	93 83       	std	Z+3, r25	; 0x03
    1362:	82 83       	std	Z+2, r24	; 0x02
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	80 83       	st	Z, r24
    1368:	87 e0       	ldi	r24, 0x07	; 7
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	44 1f       	adc	r20, r20
    1370:	55 1f       	adc	r21, r21
    1372:	8a 95       	dec	r24
    1374:	d1 f7       	brne	.-12     	; 0x136a <__unpack_f+0xba>
    1376:	50 64       	ori	r21, 0x40	; 64
    1378:	24 83       	std	Z+4, r18	; 0x04
    137a:	35 83       	std	Z+5, r19	; 0x05
    137c:	46 83       	std	Z+6, r20	; 0x06
    137e:	57 83       	std	Z+7, r21	; 0x07
    1380:	08 95       	ret

00001382 <__fpcmp_parts_f>:
    1382:	fc 01       	movw	r30, r24
    1384:	db 01       	movw	r26, r22
    1386:	90 81       	ld	r25, Z
    1388:	92 30       	cpi	r25, 0x02	; 2
    138a:	08 f4       	brcc	.+2      	; 0x138e <__fpcmp_parts_f+0xc>
    138c:	49 c0       	rjmp	.+146    	; 0x1420 <__fpcmp_parts_f+0x9e>
    138e:	8c 91       	ld	r24, X
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	08 f4       	brcc	.+2      	; 0x1396 <__fpcmp_parts_f+0x14>
    1394:	45 c0       	rjmp	.+138    	; 0x1420 <__fpcmp_parts_f+0x9e>
    1396:	94 30       	cpi	r25, 0x04	; 4
    1398:	51 f4       	brne	.+20     	; 0x13ae <__fpcmp_parts_f+0x2c>
    139a:	61 81       	ldd	r22, Z+1	; 0x01
    139c:	84 30       	cpi	r24, 0x04	; 4
    139e:	b1 f5       	brne	.+108    	; 0x140c <__fpcmp_parts_f+0x8a>
    13a0:	11 96       	adiw	r26, 0x01	; 1
    13a2:	2c 91       	ld	r18, X
    13a4:	11 97       	sbiw	r26, 0x01	; 1
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	26 1b       	sub	r18, r22
    13aa:	31 09       	sbc	r19, r1
    13ac:	41 c0       	rjmp	.+130    	; 0x1430 <__fpcmp_parts_f+0xae>
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	21 f0       	breq	.+8      	; 0x13ba <__fpcmp_parts_f+0x38>
    13b2:	92 30       	cpi	r25, 0x02	; 2
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <__fpcmp_parts_f+0x44>
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	b1 f1       	breq	.+108    	; 0x1426 <__fpcmp_parts_f+0xa4>
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	8c 91       	ld	r24, X
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	88 23       	and	r24, r24
    13c2:	a1 f1       	breq	.+104    	; 0x142c <__fpcmp_parts_f+0xaa>
    13c4:	2d c0       	rjmp	.+90     	; 0x1420 <__fpcmp_parts_f+0x9e>
    13c6:	61 81       	ldd	r22, Z+1	; 0x01
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	01 f1       	breq	.+64     	; 0x140c <__fpcmp_parts_f+0x8a>
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	8c 91       	ld	r24, X
    13d0:	11 97       	sbiw	r26, 0x01	; 1
    13d2:	68 17       	cp	r22, r24
    13d4:	d9 f4       	brne	.+54     	; 0x140c <__fpcmp_parts_f+0x8a>
    13d6:	22 81       	ldd	r18, Z+2	; 0x02
    13d8:	33 81       	ldd	r19, Z+3	; 0x03
    13da:	12 96       	adiw	r26, 0x02	; 2
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	13 97       	sbiw	r26, 0x03	; 3
    13e2:	82 17       	cp	r24, r18
    13e4:	93 07       	cpc	r25, r19
    13e6:	94 f0       	brlt	.+36     	; 0x140c <__fpcmp_parts_f+0x8a>
    13e8:	28 17       	cp	r18, r24
    13ea:	39 07       	cpc	r19, r25
    13ec:	bc f0       	brlt	.+46     	; 0x141c <__fpcmp_parts_f+0x9a>
    13ee:	24 81       	ldd	r18, Z+4	; 0x04
    13f0:	35 81       	ldd	r19, Z+5	; 0x05
    13f2:	46 81       	ldd	r20, Z+6	; 0x06
    13f4:	57 81       	ldd	r21, Z+7	; 0x07
    13f6:	14 96       	adiw	r26, 0x04	; 4
    13f8:	8d 91       	ld	r24, X+
    13fa:	9d 91       	ld	r25, X+
    13fc:	0d 90       	ld	r0, X+
    13fe:	bc 91       	ld	r27, X
    1400:	a0 2d       	mov	r26, r0
    1402:	82 17       	cp	r24, r18
    1404:	93 07       	cpc	r25, r19
    1406:	a4 07       	cpc	r26, r20
    1408:	b5 07       	cpc	r27, r21
    140a:	18 f4       	brcc	.+6      	; 0x1412 <__fpcmp_parts_f+0x90>
    140c:	66 23       	and	r22, r22
    140e:	41 f0       	breq	.+16     	; 0x1420 <__fpcmp_parts_f+0x9e>
    1410:	0d c0       	rjmp	.+26     	; 0x142c <__fpcmp_parts_f+0xaa>
    1412:	28 17       	cp	r18, r24
    1414:	39 07       	cpc	r19, r25
    1416:	4a 07       	cpc	r20, r26
    1418:	5b 07       	cpc	r21, r27
    141a:	28 f4       	brcc	.+10     	; 0x1426 <__fpcmp_parts_f+0xa4>
    141c:	66 23       	and	r22, r22
    141e:	31 f0       	breq	.+12     	; 0x142c <__fpcmp_parts_f+0xaa>
    1420:	21 e0       	ldi	r18, 0x01	; 1
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	05 c0       	rjmp	.+10     	; 0x1430 <__fpcmp_parts_f+0xae>
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <__fpcmp_parts_f+0xae>
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	3f ef       	ldi	r19, 0xFF	; 255
    1430:	c9 01       	movw	r24, r18
    1432:	08 95       	ret

00001434 <__divmodhi4>:
    1434:	97 fb       	bst	r25, 7
    1436:	09 2e       	mov	r0, r25
    1438:	07 26       	eor	r0, r23
    143a:	0a d0       	rcall	.+20     	; 0x1450 <__divmodhi4_neg1>
    143c:	77 fd       	sbrc	r23, 7
    143e:	04 d0       	rcall	.+8      	; 0x1448 <__divmodhi4_neg2>
    1440:	0c d0       	rcall	.+24     	; 0x145a <__udivmodhi4>
    1442:	06 d0       	rcall	.+12     	; 0x1450 <__divmodhi4_neg1>
    1444:	00 20       	and	r0, r0
    1446:	1a f4       	brpl	.+6      	; 0x144e <__divmodhi4_exit>

00001448 <__divmodhi4_neg2>:
    1448:	70 95       	com	r23
    144a:	61 95       	neg	r22
    144c:	7f 4f       	sbci	r23, 0xFF	; 255

0000144e <__divmodhi4_exit>:
    144e:	08 95       	ret

00001450 <__divmodhi4_neg1>:
    1450:	f6 f7       	brtc	.-4      	; 0x144e <__divmodhi4_exit>
    1452:	90 95       	com	r25
    1454:	81 95       	neg	r24
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	08 95       	ret

0000145a <__udivmodhi4>:
    145a:	aa 1b       	sub	r26, r26
    145c:	bb 1b       	sub	r27, r27
    145e:	51 e1       	ldi	r21, 0x11	; 17
    1460:	07 c0       	rjmp	.+14     	; 0x1470 <__udivmodhi4_ep>

00001462 <__udivmodhi4_loop>:
    1462:	aa 1f       	adc	r26, r26
    1464:	bb 1f       	adc	r27, r27
    1466:	a6 17       	cp	r26, r22
    1468:	b7 07       	cpc	r27, r23
    146a:	10 f0       	brcs	.+4      	; 0x1470 <__udivmodhi4_ep>
    146c:	a6 1b       	sub	r26, r22
    146e:	b7 0b       	sbc	r27, r23

00001470 <__udivmodhi4_ep>:
    1470:	88 1f       	adc	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	5a 95       	dec	r21
    1476:	a9 f7       	brne	.-22     	; 0x1462 <__udivmodhi4_loop>
    1478:	80 95       	com	r24
    147a:	90 95       	com	r25
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	08 95       	ret

00001482 <__prologue_saves__>:
    1482:	2f 92       	push	r2
    1484:	3f 92       	push	r3
    1486:	4f 92       	push	r4
    1488:	5f 92       	push	r5
    148a:	6f 92       	push	r6
    148c:	7f 92       	push	r7
    148e:	8f 92       	push	r8
    1490:	9f 92       	push	r9
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	ca 1b       	sub	r28, r26
    14ac:	db 0b       	sbc	r29, r27
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	09 94       	ijmp

000014ba <__epilogue_restores__>:
    14ba:	2a 88       	ldd	r2, Y+18	; 0x12
    14bc:	39 88       	ldd	r3, Y+17	; 0x11
    14be:	48 88       	ldd	r4, Y+16	; 0x10
    14c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    14cc:	b9 84       	ldd	r11, Y+9	; 0x09
    14ce:	c8 84       	ldd	r12, Y+8	; 0x08
    14d0:	df 80       	ldd	r13, Y+7	; 0x07
    14d2:	ee 80       	ldd	r14, Y+6	; 0x06
    14d4:	fd 80       	ldd	r15, Y+5	; 0x05
    14d6:	0c 81       	ldd	r16, Y+4	; 0x04
    14d8:	1b 81       	ldd	r17, Y+3	; 0x03
    14da:	aa 81       	ldd	r26, Y+2	; 0x02
    14dc:	b9 81       	ldd	r27, Y+1	; 0x01
    14de:	ce 0f       	add	r28, r30
    14e0:	d1 1d       	adc	r29, r1
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	ed 01       	movw	r28, r26
    14ee:	08 95       	ret

000014f0 <_exit>:
    14f0:	f8 94       	cli

000014f2 <__stop_program>:
    14f2:	ff cf       	rjmp	.-2      	; 0x14f2 <__stop_program>


Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00001c16  00001c8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000260  00000000  00000000  000025eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000405  00000000  00000000  0000284b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e3d  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184a  00000000  00000000  00005a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024fb  00000000  00000000  000072d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000097d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e6  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e21  00000000  00000000  0000a13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000007d8  00000000  00000000  0000af5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  0000b733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
       2:	64 c0       	rjmp	.+200    	; 0xcc <__bad_interrupt>
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	62 c0       	rjmp	.+196    	; 0xcc <__bad_interrupt>
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	60 c0       	rjmp	.+192    	; 0xcc <__bad_interrupt>
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	5e c0       	rjmp	.+188    	; 0xcc <__bad_interrupt>
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	9a c0       	rjmp	.+308    	; 0x148 <__vector_9>
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	5a c0       	rjmp	.+180    	; 0xcc <__bad_interrupt>
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	58 c0       	rjmp	.+176    	; 0xcc <__bad_interrupt>
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	56 c0       	rjmp	.+172    	; 0xcc <__bad_interrupt>
      20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
      22:	54 c0       	rjmp	.+168    	; 0xcc <__bad_interrupt>
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	ff c1       	rjmp	.+1022   	; 0x426 <char_to_code+0xd0>
      28:	03 c2       	rjmp	.+1030   	; 0x430 <char_to_code+0xda>
      2a:	02 c2       	rjmp	.+1028   	; 0x430 <char_to_code+0xda>
      2c:	01 c2       	rjmp	.+1026   	; 0x430 <char_to_code+0xda>
      2e:	00 c2       	rjmp	.+1024   	; 0x430 <char_to_code+0xda>
      30:	ff c1       	rjmp	.+1022   	; 0x430 <char_to_code+0xda>
      32:	fe c1       	rjmp	.+1020   	; 0x430 <char_to_code+0xda>
      34:	fd c1       	rjmp	.+1018   	; 0x430 <char_to_code+0xda>
      36:	fc c1       	rjmp	.+1016   	; 0x430 <char_to_code+0xda>
      38:	fb c1       	rjmp	.+1014   	; 0x430 <char_to_code+0xda>
      3a:	fa c1       	rjmp	.+1012   	; 0x430 <char_to_code+0xda>
      3c:	f9 c1       	rjmp	.+1010   	; 0x430 <char_to_code+0xda>
      3e:	f8 c1       	rjmp	.+1008   	; 0x430 <char_to_code+0xda>
      40:	a7 c1       	rjmp	.+846    	; 0x390 <char_to_code+0x3a>
      42:	f6 c1       	rjmp	.+1004   	; 0x430 <char_to_code+0xda>
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <char_to_code+0xda>
      46:	ae c1       	rjmp	.+860    	; 0x3a4 <char_to_code+0x4e>
      48:	b2 c1       	rjmp	.+868    	; 0x3ae <char_to_code+0x58>
      4a:	b6 c1       	rjmp	.+876    	; 0x3b8 <char_to_code+0x62>
      4c:	ba c1       	rjmp	.+884    	; 0x3c2 <char_to_code+0x6c>
      4e:	be c1       	rjmp	.+892    	; 0x3cc <char_to_code+0x76>
      50:	c2 c1       	rjmp	.+900    	; 0x3d6 <char_to_code+0x80>
      52:	c6 c1       	rjmp	.+908    	; 0x3e0 <char_to_code+0x8a>
      54:	ca c1       	rjmp	.+916    	; 0x3ea <char_to_code+0x94>
      56:	ce c1       	rjmp	.+924    	; 0x3f4 <char_to_code+0x9e>
      58:	d2 c1       	rjmp	.+932    	; 0x3fe <char_to_code+0xa8>
      5a:	ea c1       	rjmp	.+980    	; 0x430 <char_to_code+0xda>
      5c:	e9 c1       	rjmp	.+978    	; 0x430 <char_to_code+0xda>
      5e:	e8 c1       	rjmp	.+976    	; 0x430 <char_to_code+0xda>
      60:	e7 c1       	rjmp	.+974    	; 0x430 <char_to_code+0xda>
      62:	e6 c1       	rjmp	.+972    	; 0x430 <char_to_code+0xda>
      64:	e5 c1       	rjmp	.+970    	; 0x430 <char_to_code+0xda>
      66:	e4 c1       	rjmp	.+968    	; 0x430 <char_to_code+0xda>
      68:	e3 c1       	rjmp	.+966    	; 0x430 <char_to_code+0xda>
      6a:	e2 c1       	rjmp	.+964    	; 0x430 <char_to_code+0xda>
      6c:	cd c1       	rjmp	.+922    	; 0x408 <char_to_code+0xb2>
      6e:	e0 c1       	rjmp	.+960    	; 0x430 <char_to_code+0xda>
      70:	df c1       	rjmp	.+958    	; 0x430 <char_to_code+0xda>
      72:	de c1       	rjmp	.+956    	; 0x430 <char_to_code+0xda>
      74:	dd c1       	rjmp	.+954    	; 0x430 <char_to_code+0xda>
      76:	cd c1       	rjmp	.+922    	; 0x412 <char_to_code+0xbc>
      78:	db c1       	rjmp	.+950    	; 0x430 <char_to_code+0xda>
      7a:	da c1       	rjmp	.+948    	; 0x430 <char_to_code+0xda>
      7c:	d9 c1       	rjmp	.+946    	; 0x430 <char_to_code+0xda>
      7e:	ce c1       	rjmp	.+924    	; 0x41c <char_to_code+0xc6>
      80:	d7 c1       	rjmp	.+942    	; 0x430 <char_to_code+0xda>
      82:	d6 c1       	rjmp	.+940    	; 0x430 <char_to_code+0xda>
      84:	d5 c1       	rjmp	.+938    	; 0x430 <char_to_code+0xda>
      86:	d4 c1       	rjmp	.+936    	; 0x430 <char_to_code+0xda>
      88:	d3 c1       	rjmp	.+934    	; 0x430 <char_to_code+0xda>
      8a:	d2 c1       	rjmp	.+932    	; 0x430 <char_to_code+0xda>
      8c:	d1 c1       	rjmp	.+930    	; 0x430 <char_to_code+0xda>
      8e:	d0 c1       	rjmp	.+928    	; 0x430 <char_to_code+0xda>
      90:	cf c1       	rjmp	.+926    	; 0x430 <char_to_code+0xda>
      92:	ce c1       	rjmp	.+924    	; 0x430 <char_to_code+0xda>
      94:	cd c1       	rjmp	.+922    	; 0x430 <char_to_code+0xda>
      96:	cc c1       	rjmp	.+920    	; 0x430 <char_to_code+0xda>
      98:	cb c1       	rjmp	.+918    	; 0x430 <char_to_code+0xda>
      9a:	ca c1       	rjmp	.+916    	; 0x430 <char_to_code+0xda>
      9c:	c9 c1       	rjmp	.+914    	; 0x430 <char_to_code+0xda>
      9e:	c8 c1       	rjmp	.+912    	; 0x430 <char_to_code+0xda>
      a0:	c7 c1       	rjmp	.+910    	; 0x430 <char_to_code+0xda>
      a2:	c6 c1       	rjmp	.+908    	; 0x430 <char_to_code+0xda>
      a4:	7a c1       	rjmp	.+756    	; 0x39a <char_to_code+0x44>

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e6 e1       	ldi	r30, 0x16	; 22
      ba:	fc e1       	ldi	r31, 0x1C	; 28
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a8 38       	cpi	r26, 0x88	; 136
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>
      c8:	bd d0       	rcall	.+378    	; 0x244 <main>
      ca:	a3 cd       	rjmp	.-1210   	; 0xfffffc12 <__eeprom_end+0xff7efc12>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <set_up_ports>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>

//Настройка портов
void set_up_ports(void) {
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
      d6:	87 e3       	ldi	r24, 0x37	; 55
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	27 e3       	ldi	r18, 0x37	; 55
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	2f 63       	ori	r18, 0x3F	; 63
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
      e8:	81 e3       	ldi	r24, 0x31	; 49
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	21 e3       	ldi	r18, 0x31	; 49
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	28 60       	ori	r18, 0x08	; 8
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
      fa:	84 e3       	ldi	r24, 0x34	; 52
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	24 e3       	ldi	r18, 0x34	; 52
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	2f 60       	ori	r18, 0x0F	; 15
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18

  // Перевод PD5,6,7 на чтение для последующей обработки кнопок
  DDRD &= ~((1 << PD5)| (1 << PD6) | (1 << PD7)); 
     10c:	81 e3       	ldi	r24, 0x31	; 49
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	21 e3       	ldi	r18, 0x31	; 49
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	2f 71       	andi	r18, 0x1F	; 31
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     11e:	82 e3       	ldi	r24, 0x32	; 50
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	22 e3       	ldi	r18, 0x32	; 50
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	f9 01       	movw	r30, r18
     128:	20 81       	ld	r18, Z
     12a:	20 6e       	ori	r18, 0xE0	; 224
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18

  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
     130:	84 e3       	ldi	r24, 0x34	; 52
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	24 e3       	ldi	r18, 0x34	; 52
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 63       	ori	r18, 0x30	; 48
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
} 
     142:	cf 91       	pop	r28
     144:	df 91       	pop	r29
     146:	08 95       	ret

00000148 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
     148:	1f 92       	push	r1
     14a:	0f 92       	push	r0
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	0f 92       	push	r0
     150:	11 24       	eor	r1, r1
     152:	2f 93       	push	r18
     154:	3f 93       	push	r19
     156:	4f 93       	push	r20
     158:	5f 93       	push	r21
     15a:	6f 93       	push	r22
     15c:	7f 93       	push	r23
     15e:	8f 93       	push	r24
     160:	9f 93       	push	r25
     162:	af 93       	push	r26
     164:	bf 93       	push	r27
     166:	ef 93       	push	r30
     168:	ff 93       	push	r31
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
	printDisplay(display);
     172:	8f e6       	ldi	r24, 0x6F	; 111
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	47 d2       	rcall	.+1166   	; 0x606 <printDisplay>
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	ff 91       	pop	r31
     17e:	ef 91       	pop	r30
     180:	bf 91       	pop	r27
     182:	af 91       	pop	r26
     184:	9f 91       	pop	r25
     186:	8f 91       	pop	r24
     188:	7f 91       	pop	r23
     18a:	6f 91       	pop	r22
     18c:	5f 91       	pop	r21
     18e:	4f 91       	pop	r20
     190:	3f 91       	pop	r19
     192:	2f 91       	pop	r18
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <handle_buttons>:

void handle_buttons(void) {
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	0f 92       	push	r0
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
  unsigned char button_number = number_key_pressed();
     1a8:	4f d2       	rcall	.+1182   	; 0x648 <number_key_pressed>
     1aa:	89 83       	std	Y+1, r24	; 0x01

  switch (button_number) {
     1ac:	89 81       	ldd	r24, Y+1	; 0x01
     1ae:	88 2f       	mov	r24, r24
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	91 05       	cpc	r25, r1
     1b6:	71 f0       	breq	.+28     	; 0x1d4 <handle_buttons+0x36>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	a1 f0       	breq	.+40     	; 0x1e6 <handle_buttons+0x48>
     1be:	00 97       	sbiw	r24, 0x00	; 0
     1c0:	e1 f4       	brne	.+56     	; 0x1fa <handle_buttons+0x5c>
    case 0:
    strcpy(display, "0000");
     1c2:	8f e6       	ldi	r24, 0x6F	; 111
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	20 e6       	ldi	r18, 0x60	; 96
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	b9 01       	movw	r22, r18
     1cc:	45 e0       	ldi	r20, 0x05	; 5
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	17 dd       	rcall	.-1490   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
    break;
     1d2:	14 c0       	rjmp	.+40     	; 0x1fc <handle_buttons+0x5e>

    case 1:
    strcpy(display, "1111");
     1d4:	8f e6       	ldi	r24, 0x6F	; 111
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	25 e6       	ldi	r18, 0x65	; 101
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	b9 01       	movw	r22, r18
     1de:	45 e0       	ldi	r20, 0x05	; 5
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e dd       	rcall	.-1508   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
    break;
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <handle_buttons+0x5e>

    case 2:
    strcpy(display, "2222");
     1e6:	8f e6       	ldi	r24, 0x6F	; 111
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2a e6       	ldi	r18, 0x6A	; 106
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	b9 01       	movw	r22, r18
     1f0:	45 e0       	ldi	r20, 0x05	; 5
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	05 dd       	rcall	.-1526   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
    break;
     1f6:	00 00       	nop
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <handle_buttons+0x5e>

    default:
    break;
     1fa:	00 00       	nop
  };
}
     1fc:	0f 90       	pop	r0
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <timer_init>:

//Инициализация таймера
void timer_init() {
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
     20c:	89 e5       	ldi	r24, 0x59	; 89
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	29 e5       	ldi	r18, 0x59	; 89
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	21 60       	ori	r18, 0x01	; 1
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	TCCR0 = (1 << CS01);
     21e:	83 e5       	ldi	r24, 0x53	; 83
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	22 e0       	ldi	r18, 0x02	; 2
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
}
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <init>:

void init() {
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
  cli();
     236:	f8 94       	cli

  set_up_ports();
     238:	4a df       	rcall	.-364    	; 0xce <set_up_ports>
  timer_init();
     23a:	e4 df       	rcall	.-56     	; 0x204 <timer_init>

  sei();
     23c:	78 94       	sei
}
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <main>:

int main(void) {
     244:	0f 93       	push	r16
     246:	1f 93       	push	r17
     248:	df 93       	push	r29
     24a:	cf 93       	push	r28
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	2e 97       	sbiw	r28, 0x0e	; 14
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
  init();
     25c:	e8 df       	rcall	.-48     	; 0x22e <init>
  
	while(1) {
    handle_buttons();
     25e:	9f df       	rcall	.-194    	; 0x19e <handle_buttons>
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	a0 e8       	ldi	r26, 0x80	; 128
     266:	bf e3       	ldi	r27, 0x3F	; 63
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	9a 83       	std	Y+2, r25	; 0x02
     26c:	ab 83       	std	Y+3, r26	; 0x03
     26e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     270:	69 81       	ldd	r22, Y+1	; 0x01
     272:	7a 81       	ldd	r23, Y+2	; 0x02
     274:	8b 81       	ldd	r24, Y+3	; 0x03
     276:	9c 81       	ldd	r25, Y+4	; 0x04
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	4a e7       	ldi	r20, 0x7A	; 122
     27e:	54 e4       	ldi	r21, 0x44	; 68
     280:	3a d7       	rcall	.+3700   	; 0x10f6 <__mulsf3>
     282:	dc 01       	movw	r26, r24
     284:	cb 01       	movw	r24, r22
     286:	8d 83       	std	Y+5, r24	; 0x05
     288:	9e 83       	std	Y+6, r25	; 0x06
     28a:	af 83       	std	Y+7, r26	; 0x07
     28c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	6d 81       	ldd	r22, Y+5	; 0x05
     292:	7e 81       	ldd	r23, Y+6	; 0x06
     294:	8f 81       	ldd	r24, Y+7	; 0x07
     296:	98 85       	ldd	r25, Y+8	; 0x08
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e8       	ldi	r20, 0x80	; 128
     29e:	5f e3       	ldi	r21, 0x3F	; 63
     2a0:	1e d9       	rcall	.-3524   	; 0xfffff4de <__eeprom_end+0xff7ef4de>
     2a2:	88 23       	and	r24, r24
     2a4:	0c f0       	brlt	.+2      	; 0x2a8 <main+0x64>
     2a6:	10 e0       	ldi	r17, 0x00	; 0
     2a8:	11 23       	and	r17, r17
     2aa:	29 f0       	breq	.+10     	; 0x2b6 <main+0x72>
		__ticks = 1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9a 87       	std	Y+10, r25	; 0x0a
     2b2:	89 87       	std	Y+9, r24	; 0x09
     2b4:	42 c0       	rjmp	.+132    	; 0x33a <main+0xf6>
	else if (__tmp > 65535)
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	6d 81       	ldd	r22, Y+5	; 0x05
     2ba:	7e 81       	ldd	r23, Y+6	; 0x06
     2bc:	8f 81       	ldd	r24, Y+7	; 0x07
     2be:	98 85       	ldd	r25, Y+8	; 0x08
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	3f ef       	ldi	r19, 0xFF	; 255
     2c4:	4f e7       	ldi	r20, 0x7F	; 127
     2c6:	57 e4       	ldi	r21, 0x47	; 71
     2c8:	b4 d8       	rcall	.-3736   	; 0xfffff432 <__eeprom_end+0xff7ef432>
     2ca:	18 16       	cp	r1, r24
     2cc:	0c f0       	brlt	.+2      	; 0x2d0 <main+0x8c>
     2ce:	10 e0       	ldi	r17, 0x00	; 0
     2d0:	11 23       	and	r17, r17
     2d2:	51 f1       	breq	.+84     	; 0x328 <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2d4:	69 81       	ldd	r22, Y+1	; 0x01
     2d6:	7a 81       	ldd	r23, Y+2	; 0x02
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e2       	ldi	r20, 0x20	; 32
     2e2:	51 e4       	ldi	r21, 0x41	; 65
     2e4:	08 d7       	rcall	.+3600   	; 0x10f6 <__mulsf3>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	41 d5       	rcall	.+2690   	; 0xd72 <__fixunssfsi>
     2f0:	dc 01       	movw	r26, r24
     2f2:	cb 01       	movw	r24, r22
     2f4:	9a 87       	std	Y+10, r25	; 0x0a
     2f6:	89 87       	std	Y+9, r24	; 0x09
     2f8:	12 c0       	rjmp	.+36     	; 0x31e <main+0xda>
     2fa:	84 e6       	ldi	r24, 0x64	; 100
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	9c 87       	std	Y+12, r25	; 0x0c
     300:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     302:	8b 85       	ldd	r24, Y+11	; 0x0b
     304:	9c 85       	ldd	r25, Y+12	; 0x0c
     306:	8c 01       	movw	r16, r24
     308:	c8 01       	movw	r24, r16
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <main+0xc6>
     30e:	8c 01       	movw	r16, r24
     310:	1c 87       	std	Y+12, r17	; 0x0c
     312:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     314:	89 85       	ldd	r24, Y+9	; 0x09
     316:	9a 85       	ldd	r25, Y+10	; 0x0a
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	9a 87       	std	Y+10, r25	; 0x0a
     31c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31e:	89 85       	ldd	r24, Y+9	; 0x09
     320:	9a 85       	ldd	r25, Y+10	; 0x0a
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	51 f7       	brne	.-44     	; 0x2fa <main+0xb6>
		_delay_ms(1);
	}
     326:	9b cf       	rjmp	.-202    	; 0x25e <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     328:	6d 81       	ldd	r22, Y+5	; 0x05
     32a:	7e 81       	ldd	r23, Y+6	; 0x06
     32c:	8f 81       	ldd	r24, Y+7	; 0x07
     32e:	98 85       	ldd	r25, Y+8	; 0x08
     330:	20 d5       	rcall	.+2624   	; 0xd72 <__fixunssfsi>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	9a 87       	std	Y+10, r25	; 0x0a
     338:	89 87       	std	Y+9, r24	; 0x09
     33a:	89 85       	ldd	r24, Y+9	; 0x09
     33c:	9a 85       	ldd	r25, Y+10	; 0x0a
     33e:	9e 87       	std	Y+14, r25	; 0x0e
     340:	8d 87       	std	Y+13, r24	; 0x0d
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	9e 85       	ldd	r25, Y+14	; 0x0e
     346:	8c 01       	movw	r16, r24
     348:	c8 01       	movw	r24, r16
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x106>
     34e:	8c 01       	movw	r16, r24
     350:	1e 87       	std	Y+14, r17	; 0x0e
     352:	0d 87       	std	Y+13, r16	; 0x0d
     354:	84 cf       	rjmp	.-248    	; 0x25e <main+0x1a>

00000356 <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	00 d0       	rcall	.+0      	; 0x35c <char_to_code+0x6>
     35c:	0f 92       	push	r0
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int code;
    switch (symbol) {
     364:	8b 81       	ldd	r24, Y+3	; 0x03
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	aa 27       	eor	r26, r26
     36c:	97 fd       	sbrc	r25, 7
     36e:	a0 95       	com	r26
     370:	ba 2f       	mov	r27, r26
     372:	40 e2       	ldi	r20, 0x20	; 32
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	2f e3       	ldi	r18, 0x3F	; 63
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	84 1b       	sub	r24, r20
     37c:	95 0b       	sbc	r25, r21
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	08 f4       	brcc	.+2      	; 0x386 <char_to_code+0x30>
     384:	55 c0       	rjmp	.+170    	; 0x430 <char_to_code+0xda>
     386:	8d 5e       	subi	r24, 0xED	; 237
     388:	9f 4f       	sbci	r25, 0xFF	; 255
     38a:	8f 93       	push	r24
     38c:	9f 93       	push	r25
     38e:	08 95       	ret
        case '-':
            code = 0b10111111;
     390:	8f eb       	ldi	r24, 0xBF	; 191
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	9a 83       	std	Y+2, r25	; 0x02
     396:	89 83       	std	Y+1, r24	; 0x01
            break;
     398:	4f c0       	rjmp	.+158    	; 0x438 <char_to_code+0xe2>
        case '_':
            code = 0b11110111;
     39a:	87 ef       	ldi	r24, 0xF7	; 247
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	9a 83       	std	Y+2, r25	; 0x02
     3a0:	89 83       	std	Y+1, r24	; 0x01
            break;
     3a2:	4a c0       	rjmp	.+148    	; 0x438 <char_to_code+0xe2>
        case '0':
            code = 0b11000000;
     3a4:	80 ec       	ldi	r24, 0xC0	; 192
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9a 83       	std	Y+2, r25	; 0x02
     3aa:	89 83       	std	Y+1, r24	; 0x01
            break;
     3ac:	45 c0       	rjmp	.+138    	; 0x438 <char_to_code+0xe2>
        case '1':
            code = 0b11111001;
     3ae:	89 ef       	ldi	r24, 0xF9	; 249
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	89 83       	std	Y+1, r24	; 0x01
            break;
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <char_to_code+0xe2>
        case '2':
            code = 0b10100100;
     3b8:	84 ea       	ldi	r24, 0xA4	; 164
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	89 83       	std	Y+1, r24	; 0x01
            break;
     3c0:	3b c0       	rjmp	.+118    	; 0x438 <char_to_code+0xe2>
        case '3':
            code = 0b10110000;
     3c2:	80 eb       	ldi	r24, 0xB0	; 176
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	9a 83       	std	Y+2, r25	; 0x02
     3c8:	89 83       	std	Y+1, r24	; 0x01
            break;
     3ca:	36 c0       	rjmp	.+108    	; 0x438 <char_to_code+0xe2>
        case '4':
            code = 0b10011001;
     3cc:	89 e9       	ldi	r24, 0x99	; 153
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	9a 83       	std	Y+2, r25	; 0x02
     3d2:	89 83       	std	Y+1, r24	; 0x01
            break;
     3d4:	31 c0       	rjmp	.+98     	; 0x438 <char_to_code+0xe2>
        case '5':
            code = 0b10010010;
     3d6:	82 e9       	ldi	r24, 0x92	; 146
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	9a 83       	std	Y+2, r25	; 0x02
     3dc:	89 83       	std	Y+1, r24	; 0x01
            break;
     3de:	2c c0       	rjmp	.+88     	; 0x438 <char_to_code+0xe2>
        case '6':
            code = 0b10000010;
     3e0:	82 e8       	ldi	r24, 0x82	; 130
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	9a 83       	std	Y+2, r25	; 0x02
     3e6:	89 83       	std	Y+1, r24	; 0x01
            break;
     3e8:	27 c0       	rjmp	.+78     	; 0x438 <char_to_code+0xe2>
        case '7':
            code = 0b11111000;
     3ea:	88 ef       	ldi	r24, 0xF8	; 248
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
            break;
     3f2:	22 c0       	rjmp	.+68     	; 0x438 <char_to_code+0xe2>
        case '8':
            code = 0b10000000;
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
            break;
     3fc:	1d c0       	rjmp	.+58     	; 0x438 <char_to_code+0xe2>
        case '9':
            code = 0b10010000;
     3fe:	80 e9       	ldi	r24, 0x90	; 144
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
            break;
     406:	18 c0       	rjmp	.+48     	; 0x438 <char_to_code+0xe2>
        case 'C':
            code = 0b11000110;
     408:	86 ec       	ldi	r24, 0xC6	; 198
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
            break;
     410:	13 c0       	rjmp	.+38     	; 0x438 <char_to_code+0xe2>
        case 'H':
            code = 0b10001001;
     412:	89 e8       	ldi	r24, 0x89	; 137
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9a 83       	std	Y+2, r25	; 0x02
     418:	89 83       	std	Y+1, r24	; 0x01
            break;
     41a:	0e c0       	rjmp	.+28     	; 0x438 <char_to_code+0xe2>
        case 'L':
            code = 0b11000111;
     41c:	87 ec       	ldi	r24, 0xC7	; 199
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	9a 83       	std	Y+2, r25	; 0x02
     422:	89 83       	std	Y+1, r24	; 0x01
            break;
     424:	09 c0       	rjmp	.+18     	; 0x438 <char_to_code+0xe2>
        case ' ':
            code = 0b11111111;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	9a 83       	std	Y+2, r25	; 0x02
     42c:	89 83       	std	Y+1, r24	; 0x01
            break;
     42e:	04 c0       	rjmp	.+8      	; 0x438 <char_to_code+0xe2>
        default:
            code = 0xff;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9a 83       	std	Y+2, r25	; 0x02
     436:	89 83       	std	Y+1, r24	; 0x01
    };
    return code;
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	63 97       	sbiw	r28, 0x13	; 19
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	9a 8b       	std	Y+18, r25	; 0x12
     462:	89 8b       	std	Y+17, r24	; 0x11
     464:	6b 8b       	std	Y+19, r22	; 0x13
    unsigned int displayDigit = char_to_code(digit);
     466:	8b 89       	ldd	r24, Y+19	; 0x13
     468:	76 df       	rcall	.-276    	; 0x356 <char_to_code>
     46a:	9a 83       	std	Y+2, r25	; 0x02
     46c:	89 83       	std	Y+1, r24	; 0x01
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     46e:	88 e3       	ldi	r24, 0x38	; 56
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	28 e3       	ldi	r18, 0x38	; 56
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	f9 01       	movw	r30, r18
     478:	20 81       	ld	r18, Z
     47a:	2f 63       	ori	r18, 0x3F	; 63
     47c:	fc 01       	movw	r30, r24
     47e:	20 83       	st	Z, r18
    PORTD |= (1<<PD3);// clr data pin
     480:	82 e3       	ldi	r24, 0x32	; 50
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	22 e3       	ldi	r18, 0x32	; 50
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	f9 01       	movw	r30, r18
     48a:	20 81       	ld	r18, Z
     48c:	28 60       	ori	r18, 0x08	; 8
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     492:	85 e3       	ldi	r24, 0x35	; 53
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	25 e3       	ldi	r18, 0x35	; 53
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	20 7f       	andi	r18, 0xF0	; 240
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
    PORTC |= (1 << number); // set addr
     4a4:	85 e3       	ldi	r24, 0x35	; 53
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	25 e3       	ldi	r18, 0x35	; 53
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	f9 01       	movw	r30, r18
     4ae:	20 81       	ld	r18, Z
     4b0:	62 2f       	mov	r22, r18
     4b2:	49 89       	ldd	r20, Y+17	; 0x11
     4b4:	5a 89       	ldd	r21, Y+18	; 0x12
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__stack+0x61>
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	4a 95       	dec	r20
     4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__stack+0x5d>
     4c4:	26 2b       	or	r18, r22
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
    
    PORTB = displayDigit; // set data1
     4ca:	88 e3       	ldi	r24, 0x38	; 56
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	29 81       	ldd	r18, Y+1	; 0x01
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     4d4:	82 e3       	ldi	r24, 0x32	; 50
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	22 e3       	ldi	r18, 0x32	; 50
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	40 81       	ld	r20, Z
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	36 95       	lsr	r19
     4e6:	27 95       	ror	r18
     4e8:	36 95       	lsr	r19
     4ea:	27 95       	ror	r18
     4ec:	36 95       	lsr	r19
     4ee:	27 95       	ror	r18
     4f0:	20 95       	com	r18
     4f2:	28 70       	andi	r18, 0x08	; 8
     4f4:	20 95       	com	r18
     4f6:	24 23       	and	r18, r20
     4f8:	fc 01       	movw	r30, r24
     4fa:	20 83       	st	Z, r18
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e8       	ldi	r26, 0x80	; 128
     502:	bf e3       	ldi	r27, 0x3F	; 63
     504:	8b 83       	std	Y+3, r24	; 0x03
     506:	9c 83       	std	Y+4, r25	; 0x04
     508:	ad 83       	std	Y+5, r26	; 0x05
     50a:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     50c:	6b 81       	ldd	r22, Y+3	; 0x03
     50e:	7c 81       	ldd	r23, Y+4	; 0x04
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	9e 81       	ldd	r25, Y+6	; 0x06
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4a e7       	ldi	r20, 0x7A	; 122
     51a:	54 e4       	ldi	r21, 0x44	; 68
     51c:	ec d5       	rcall	.+3032   	; 0x10f6 <__mulsf3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	8f 83       	std	Y+7, r24	; 0x07
     524:	98 87       	std	Y+8, r25	; 0x08
     526:	a9 87       	std	Y+9, r26	; 0x09
     528:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     52a:	11 e0       	ldi	r17, 0x01	; 1
     52c:	6f 81       	ldd	r22, Y+7	; 0x07
     52e:	78 85       	ldd	r23, Y+8	; 0x08
     530:	89 85       	ldd	r24, Y+9	; 0x09
     532:	9a 85       	ldd	r25, Y+10	; 0x0a
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	40 e8       	ldi	r20, 0x80	; 128
     53a:	5f e3       	ldi	r21, 0x3F	; 63
     53c:	d0 d7       	rcall	.+4000   	; 0x14de <__ltsf2>
     53e:	88 23       	and	r24, r24
     540:	0c f0       	brlt	.+2      	; 0x544 <__stack+0xe5>
     542:	10 e0       	ldi	r17, 0x00	; 0
     544:	11 23       	and	r17, r17
     546:	29 f0       	breq	.+10     	; 0x552 <__stack+0xf3>
		__ticks = 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9c 87       	std	Y+12, r25	; 0x0c
     54e:	8b 87       	std	Y+11, r24	; 0x0b
     550:	42 c0       	rjmp	.+132    	; 0x5d6 <__stack+0x177>
	else if (__tmp > 65535)
     552:	11 e0       	ldi	r17, 0x01	; 1
     554:	6f 81       	ldd	r22, Y+7	; 0x07
     556:	78 85       	ldd	r23, Y+8	; 0x08
     558:	89 85       	ldd	r24, Y+9	; 0x09
     55a:	9a 85       	ldd	r25, Y+10	; 0x0a
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	3f ef       	ldi	r19, 0xFF	; 255
     560:	4f e7       	ldi	r20, 0x7F	; 127
     562:	57 e4       	ldi	r21, 0x47	; 71
     564:	66 d7       	rcall	.+3788   	; 0x1432 <__gtsf2>
     566:	18 16       	cp	r1, r24
     568:	0c f0       	brlt	.+2      	; 0x56c <__stack+0x10d>
     56a:	10 e0       	ldi	r17, 0x00	; 0
     56c:	11 23       	and	r17, r17
     56e:	51 f1       	breq	.+84     	; 0x5c4 <__stack+0x165>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     570:	6b 81       	ldd	r22, Y+3	; 0x03
     572:	7c 81       	ldd	r23, Y+4	; 0x04
     574:	8d 81       	ldd	r24, Y+5	; 0x05
     576:	9e 81       	ldd	r25, Y+6	; 0x06
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e2       	ldi	r20, 0x20	; 32
     57e:	51 e4       	ldi	r21, 0x41	; 65
     580:	ba d5       	rcall	.+2932   	; 0x10f6 <__mulsf3>
     582:	dc 01       	movw	r26, r24
     584:	cb 01       	movw	r24, r22
     586:	bc 01       	movw	r22, r24
     588:	cd 01       	movw	r24, r26
     58a:	f3 d3       	rcall	.+2022   	; 0xd72 <__fixunssfsi>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	9c 87       	std	Y+12, r25	; 0x0c
     592:	8b 87       	std	Y+11, r24	; 0x0b
     594:	12 c0       	rjmp	.+36     	; 0x5ba <__stack+0x15b>
     596:	84 e6       	ldi	r24, 0x64	; 100
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9e 87       	std	Y+14, r25	; 0x0e
     59c:	8d 87       	std	Y+13, r24	; 0x0d
     59e:	8d 85       	ldd	r24, Y+13	; 0x0d
     5a0:	9e 85       	ldd	r25, Y+14	; 0x0e
     5a2:	8c 01       	movw	r16, r24
     5a4:	c8 01       	movw	r24, r16
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__stack+0x147>
     5aa:	8c 01       	movw	r16, r24
     5ac:	1e 87       	std	Y+14, r17	; 0x0e
     5ae:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	9c 87       	std	Y+12, r25	; 0x0c
     5b8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ba:	8b 85       	ldd	r24, Y+11	; 0x0b
     5bc:	9c 85       	ldd	r25, Y+12	; 0x0c
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	51 f7       	brne	.-44     	; 0x596 <__stack+0x137>
     5c2:	16 c0       	rjmp	.+44     	; 0x5f0 <__stack+0x191>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5c4:	6f 81       	ldd	r22, Y+7	; 0x07
     5c6:	78 85       	ldd	r23, Y+8	; 0x08
     5c8:	89 85       	ldd	r24, Y+9	; 0x09
     5ca:	9a 85       	ldd	r25, Y+10	; 0x0a
     5cc:	d2 d3       	rcall	.+1956   	; 0xd72 <__fixunssfsi>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	9c 87       	std	Y+12, r25	; 0x0c
     5d4:	8b 87       	std	Y+11, r24	; 0x0b
     5d6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5da:	98 8b       	std	Y+16, r25	; 0x10
     5dc:	8f 87       	std	Y+15, r24	; 0x0f
     5de:	8f 85       	ldd	r24, Y+15	; 0x0f
     5e0:	98 89       	ldd	r25, Y+16	; 0x10
     5e2:	8c 01       	movw	r16, r24
     5e4:	f8 01       	movw	r30, r16
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__stack+0x187>
     5ea:	8f 01       	movw	r16, r30
     5ec:	18 8b       	std	Y+16, r17	; 0x10
     5ee:	0f 87       	std	Y+15, r16	; 0x0f
    _delay_ms(1);
}
     5f0:	63 96       	adiw	r28, 0x13	; 19
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <printDisplay>:

void printDisplay() {
     606:	df 93       	push	r29
     608:	cf 93       	push	r28
     60a:	00 d0       	rcall	.+0      	; 0x60c <printDisplay+0x6>
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
    for (short int i = 0; i < 4; ++i) {
     610:	1a 82       	std	Y+2, r1	; 0x02
     612:	19 82       	std	Y+1, r1	; 0x01
     614:	0f c0       	rjmp	.+30     	; 0x634 <printDisplay+0x2e>
        send_digit_to_display(i, display[i]);
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	9a 81       	ldd	r25, Y+2	; 0x02
     61a:	29 81       	ldd	r18, Y+1	; 0x01
     61c:	3a 81       	ldd	r19, Y+2	; 0x02
     61e:	21 59       	subi	r18, 0x91	; 145
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	62 2f       	mov	r22, r18
     628:	0f df       	rcall	.-482    	; 0x448 <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	9a 83       	std	Y+2, r25	; 0x02
     632:	89 83       	std	Y+1, r24	; 0x01
     634:	89 81       	ldd	r24, Y+1	; 0x01
     636:	9a 81       	ldd	r25, Y+2	; 0x02
     638:	84 30       	cpi	r24, 0x04	; 4
     63a:	91 05       	cpc	r25, r1
     63c:	64 f3       	brlt	.-40     	; 0x616 <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	cf 91       	pop	r28
     644:	df 91       	pop	r29
     646:	08 95       	ret

00000648 <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
     648:	df 93       	push	r29
     64a:	cf 93       	push	r28
     64c:	00 d0       	rcall	.+0      	; 0x64e <number_key_pressed+0x6>
     64e:	0f 92       	push	r0
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
  unsigned char isButton2 = ((PIND >> (8 - 1)) & 1);
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	88 1f       	adc	r24, r24
     65e:	88 27       	eor	r24, r24
     660:	88 1f       	adc	r24, r24
     662:	89 83       	std	Y+1, r24	; 0x01
  unsigned char isButton1 = ((PIND >> (7 - 1)) & 1);
     664:	80 e3       	ldi	r24, 0x30	; 48
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	82 95       	swap	r24
     66e:	86 95       	lsr	r24
     670:	86 95       	lsr	r24
     672:	83 70       	andi	r24, 0x03	; 3
     674:	81 70       	andi	r24, 0x01	; 1
     676:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char isButton0 = ((PIND >> (6 - 1)) & 1);
     678:	80 e3       	ldi	r24, 0x30	; 48
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	82 95       	swap	r24
     682:	86 95       	lsr	r24
     684:	87 70       	andi	r24, 0x07	; 7
     686:	81 70       	andi	r24, 0x01	; 1
     688:	8b 83       	std	Y+3, r24	; 0x03

  if (!isButton0) {
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	88 23       	and	r24, r24
     68e:	11 f4       	brne	.+4      	; 0x694 <number_key_pressed+0x4c>
    return 0;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0b c0       	rjmp	.+22     	; 0x6aa <number_key_pressed+0x62>
  }

  if (!isButton1) {
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	88 23       	and	r24, r24
     698:	11 f4       	brne	.+4      	; 0x69e <number_key_pressed+0x56>
    return 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	06 c0       	rjmp	.+12     	; 0x6aa <number_key_pressed+0x62>
  }

  if (!isButton2) {
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	88 23       	and	r24, r24
     6a2:	11 f4       	brne	.+4      	; 0x6a8 <number_key_pressed+0x60>
    return 2;
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <number_key_pressed+0x62>
  }
  return 42;
     6a8:	8a e2       	ldi	r24, 0x2A	; 42
}
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	cf 91       	pop	r28
     6b2:	df 91       	pop	r29
     6b4:	08 95       	ret

000006b6 <i2c_start>:
#include <avr/io.h>
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
     6b6:	df 93       	push	r29
     6b8:	cf 93       	push	r28
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     6be:	86 e5       	ldi	r24, 0x56	; 86
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	24 ea       	ldi	r18, 0xA4	; 164
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     6c8:	00 00       	nop
     6ca:	86 e5       	ldi	r24, 0x56	; 86
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
     6d2:	88 23       	and	r24, r24
     6d4:	d4 f7       	brge	.-12     	; 0x6ca <i2c_start+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
     6d6:	81 e2       	ldi	r24, 0x21	; 33
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	fc 01       	movw	r30, r24
     6dc:	80 81       	ld	r24, Z
     6de:	88 2f       	mov	r24, r24
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	88 7f       	andi	r24, 0xF8	; 248
     6e4:	90 70       	andi	r25, 0x00	; 0
     6e6:	88 30       	cpi	r24, 0x08	; 8
     6e8:	91 05       	cpc	r25, r1
     6ea:	11 f4       	brne	.+4      	; 0x6f0 <i2c_start+0x3a>
    return (0);
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <i2c_start+0x3c>
  else
    return (1);
     6f0:	81 e0       	ldi	r24, 0x01	; 1
}
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	08 95       	ret

000006f8 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     700:	86 e5       	ldi	r24, 0x56	; 86
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	24 ea       	ldi	r18, 0xA4	; 164
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
  while (!(TWCR & (1 << TWINT)))
     70a:	00 00       	nop
     70c:	86 e5       	ldi	r24, 0x56	; 86
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	88 23       	and	r24, r24
     716:	d4 f7       	brge	.-12     	; 0x70c <i2c_repeatStart+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
     718:	81 e2       	ldi	r24, 0x21	; 33
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	88 2f       	mov	r24, r24
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	88 7f       	andi	r24, 0xF8	; 248
     726:	90 70       	andi	r25, 0x00	; 0
     728:	80 31       	cpi	r24, 0x10	; 16
     72a:	91 05       	cpc	r25, r1
     72c:	11 f4       	brne	.+4      	; 0x732 <i2c_repeatStart+0x3a>
    return (0);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	01 c0       	rjmp	.+2      	; 0x734 <i2c_repeatStart+0x3c>
  else
    return (1);
     732:	81 e0       	ldi	r24, 0x01	; 1
}
     734:	cf 91       	pop	r28
     736:	df 91       	pop	r29
     738:	08 95       	ret

0000073a <i2c_sendAddress>:
//**************************************************
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	00 d0       	rcall	.+0      	; 0x740 <i2c_sendAddress+0x6>
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	88 2f       	mov	r24, r24
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	81 70       	andi	r24, 0x01	; 1
     74e:	90 70       	andi	r25, 0x00	; 0
     750:	00 97       	sbiw	r24, 0x00	; 0
     752:	19 f4       	brne	.+6      	; 0x75a <i2c_sendAddress+0x20>
    STATUS = MT_SLA_ACK;
     754:	88 e1       	ldi	r24, 0x18	; 24
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	02 c0       	rjmp	.+4      	; 0x75e <i2c_sendAddress+0x24>
  else
    STATUS = MR_SLA_ACK;
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	89 83       	std	Y+1, r24	; 0x01

  TWDR = address;
     75e:	83 e2       	ldi	r24, 0x23	; 35
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	2a 81       	ldd	r18, Y+2	; 0x02
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     768:	86 e5       	ldi	r24, 0x56	; 86
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	24 e8       	ldi	r18, 0x84	; 132
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
     772:	00 00       	nop
     774:	86 e5       	ldi	r24, 0x56	; 86
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
     77c:	88 23       	and	r24, r24
     77e:	d4 f7       	brge	.-12     	; 0x774 <i2c_sendAddress+0x3a>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
     780:	81 e2       	ldi	r24, 0x21	; 33
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	88 2f       	mov	r24, r24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9c 01       	movw	r18, r24
     78e:	28 7f       	andi	r18, 0xF8	; 248
     790:	30 70       	andi	r19, 0x00	; 0
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	88 2f       	mov	r24, r24
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	28 17       	cp	r18, r24
     79a:	39 07       	cpc	r19, r25
     79c:	11 f4       	brne	.+4      	; 0x7a2 <i2c_sendAddress+0x68>
    return (0);
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <i2c_sendAddress+0x6a>
  else
    return (1);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
}
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	cf 91       	pop	r28
     7aa:	df 91       	pop	r29
     7ac:	08 95       	ret

000007ae <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	0f 92       	push	r0
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
     7ba:	83 e2       	ldi	r24, 0x23	; 35
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	29 81       	ldd	r18, Y+1	; 0x01
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     7c4:	86 e5       	ldi	r24, 0x56	; 86
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	24 e8       	ldi	r18, 0x84	; 132
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
     7ce:	00 00       	nop
     7d0:	86 e5       	ldi	r24, 0x56	; 86
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	88 23       	and	r24, r24
     7da:	d4 f7       	brge	.-12     	; 0x7d0 <i2c_sendData+0x22>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
     7dc:	81 e2       	ldi	r24, 0x21	; 33
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	80 81       	ld	r24, Z
     7e4:	88 2f       	mov	r24, r24
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	88 7f       	andi	r24, 0xF8	; 248
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	88 32       	cpi	r24, 0x28	; 40
     7ee:	91 05       	cpc	r25, r1
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <i2c_sendData+0x48>
    return (1);
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <i2c_sendData+0x4a>
  else
    return (0);
     7f6:	80 e0       	ldi	r24, 0x00	; 0
}
     7f8:	0f 90       	pop	r0
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	08 95       	ret

00000800 <i2c_receiveData_ACK>:

//*****************************************************
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
     800:	df 93       	push	r29
     802:	cf 93       	push	r28
     804:	0f 92       	push	r0
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     80a:	86 e5       	ldi	r24, 0x56	; 86
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	24 ec       	ldi	r18, 0xC4	; 196
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     814:	00 00       	nop
     816:	86 e5       	ldi	r24, 0x56	; 86
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	fc 01       	movw	r30, r24
     81c:	80 81       	ld	r24, Z
     81e:	88 23       	and	r24, r24
     820:	d4 f7       	brge	.-12     	; 0x816 <i2c_receiveData_ACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
     822:	81 e2       	ldi	r24, 0x21	; 33
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	80 81       	ld	r24, Z
     82a:	88 2f       	mov	r24, r24
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	88 7f       	andi	r24, 0xF8	; 248
     830:	90 70       	andi	r25, 0x00	; 0
     832:	80 35       	cpi	r24, 0x50	; 80
     834:	91 05       	cpc	r25, r1
     836:	11 f0       	breq	.+4      	; 0x83c <i2c_receiveData_ACK+0x3c>
    return (ERROR_CODE);
     838:	8e e7       	ldi	r24, 0x7E	; 126
     83a:	06 c0       	rjmp	.+12     	; 0x848 <i2c_receiveData_ACK+0x48>

  data = TWDR;
     83c:	83 e2       	ldi	r24, 0x23	; 35
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     846:	89 81       	ldd	r24, Y+1	; 0x01
}
     848:	0f 90       	pop	r0
     84a:	cf 91       	pop	r28
     84c:	df 91       	pop	r29
     84e:	08 95       	ret

00000850 <i2c_receiveData_NACK>:

//******************************************************************
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	0f 92       	push	r0
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
     85a:	86 e5       	ldi	r24, 0x56	; 86
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	24 e8       	ldi	r18, 0x84	; 132
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     864:	00 00       	nop
     866:	86 e5       	ldi	r24, 0x56	; 86
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	80 81       	ld	r24, Z
     86e:	88 23       	and	r24, r24
     870:	d4 f7       	brge	.-12     	; 0x866 <i2c_receiveData_NACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
     872:	81 e2       	ldi	r24, 0x21	; 33
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	88 7f       	andi	r24, 0xF8	; 248
     880:	90 70       	andi	r25, 0x00	; 0
     882:	88 35       	cpi	r24, 0x58	; 88
     884:	91 05       	cpc	r25, r1
     886:	11 f0       	breq	.+4      	; 0x88c <i2c_receiveData_NACK+0x3c>
    return (ERROR_CODE);
     888:	8e e7       	ldi	r24, 0x7E	; 126
     88a:	06 c0       	rjmp	.+12     	; 0x898 <i2c_receiveData_NACK+0x48>

  data = TWDR;
     88c:	83 e2       	ldi	r24, 0x23	; 35
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     896:	89 81       	ldd	r24, Y+1	; 0x01
}
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	08 95       	ret

000008a0 <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
     8a0:	df 93       	push	r29
     8a2:	cf 93       	push	r28
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
     8a8:	86 e5       	ldi	r24, 0x56	; 86
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	24 e9       	ldi	r18, 0x94	; 148
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
}
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	08 95       	ret

000008b8 <ds1621_init>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_init()
{
     8b8:	df 93       	push	r29
     8ba:	cf 93       	push	r28
     8bc:	0f 92       	push	r0
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     8c2:	f9 de       	rcall	.-526    	; 0x6b6 <i2c_start>
     8c4:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	51 f4       	brne	.+20     	; 0x8e0 <ds1621_init+0x28>
   {
     strcpy(display, "5555");
     8cc:	8f e6       	ldi	r24, 0x6F	; 111
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	2a e7       	ldi	r18, 0x7A	; 122
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	b9 01       	movw	r22, r18
     8d6:	45 e0       	ldi	r20, 0x05	; 5
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	92 d9       	rcall	.-3292   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
   	 i2c_stop();
     8dc:	e1 df       	rcall	.-62     	; 0x8a0 <i2c_stop>
  	 return;
     8de:	31 c0       	rjmp	.+98     	; 0x942 <ds1621_init+0x8a>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     8e0:	80 e9       	ldi	r24, 0x90	; 144
     8e2:	2b df       	rcall	.-426    	; 0x73a <i2c_sendAddress>
     8e4:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	51 f4       	brne	.+20     	; 0x900 <ds1621_init+0x48>
   {
     strcpy(display, "5555");
     8ec:	8f e6       	ldi	r24, 0x6F	; 111
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	2a e7       	ldi	r18, 0x7A	; 122
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	b9 01       	movw	r22, r18
     8f6:	45 e0       	ldi	r20, 0x05	; 5
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	82 d9       	rcall	.-3324   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
  	 i2c_stop();
     8fc:	d1 df       	rcall	.-94     	; 0x8a0 <i2c_stop>
  	 return;
     8fe:	21 c0       	rjmp	.+66     	; 0x942 <ds1621_init+0x8a>
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
     900:	8c ea       	ldi	r24, 0xAC	; 172
     902:	55 df       	rcall	.-342    	; 0x7ae <i2c_sendData>
     904:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	51 f4       	brne	.+20     	; 0x920 <ds1621_init+0x68>
   {
     strcpy(display, "5555");
     90c:	8f e6       	ldi	r24, 0x6F	; 111
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	2a e7       	ldi	r18, 0x7A	; 122
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	b9 01       	movw	r22, r18
     916:	45 e0       	ldi	r20, 0x05	; 5
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	72 d9       	rcall	.-3356   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
  	 i2c_stop();
     91c:	c1 df       	rcall	.-126    	; 0x8a0 <i2c_stop>
  	 return;
     91e:	11 c0       	rjmp	.+34     	; 0x942 <ds1621_init+0x8a>
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	45 df       	rcall	.-374    	; 0x7ae <i2c_sendData>
     924:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	51 f4       	brne	.+20     	; 0x940 <ds1621_init+0x88>
   {
     strcpy(display, "5555");
     92c:	8f e6       	ldi	r24, 0x6F	; 111
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2a e7       	ldi	r18, 0x7A	; 122
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	b9 01       	movw	r22, r18
     936:	45 e0       	ldi	r20, 0x05	; 5
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	62 d9       	rcall	.-3388   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
  	 i2c_stop();
     93c:	b1 df       	rcall	.-158    	; 0x8a0 <i2c_stop>
	 return;
     93e:	01 c0       	rjmp	.+2      	; 0x942 <ds1621_init+0x8a>
   } 

   i2c_stop();
     940:	af df       	rcall	.-162    	; 0x8a0 <i2c_stop>
}
     942:	0f 90       	pop	r0
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <ds1621_sendCommand+0x6>
     950:	cd b7       	in	r28, 0x3d	; 61
     952:	de b7       	in	r29, 0x3e	; 62
     954:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     956:	af de       	rcall	.-674    	; 0x6b6 <i2c_start>
     958:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	51 f4       	brne	.+20     	; 0x974 <ds1621_sendCommand+0x2a>
   {
     strcpy(display, "5555");
     960:	8f e6       	ldi	r24, 0x6F	; 111
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	2a e7       	ldi	r18, 0x7A	; 122
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	b9 01       	movw	r22, r18
     96a:	45 e0       	ldi	r20, 0x05	; 5
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	48 d9       	rcall	.-3440   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
   	 i2c_stop();
     970:	97 df       	rcall	.-210    	; 0x8a0 <i2c_stop>
	 return;
     972:	21 c0       	rjmp	.+66     	; 0x9b6 <ds1621_sendCommand+0x6c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     974:	80 e9       	ldi	r24, 0x90	; 144
     976:	e1 de       	rcall	.-574    	; 0x73a <i2c_sendAddress>
     978:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	81 30       	cpi	r24, 0x01	; 1
     97e:	51 f4       	brne	.+20     	; 0x994 <ds1621_sendCommand+0x4a>
   {
     strcpy(display, "5555");
     980:	8f e6       	ldi	r24, 0x6F	; 111
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	2a e7       	ldi	r18, 0x7A	; 122
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	b9 01       	movw	r22, r18
     98a:	45 e0       	ldi	r20, 0x05	; 5
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	38 d9       	rcall	.-3472   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
	 i2c_stop();
     990:	87 df       	rcall	.-242    	; 0x8a0 <i2c_stop>
	 return;
     992:	11 c0       	rjmp	.+34     	; 0x9b6 <ds1621_sendCommand+0x6c>
   } 
   
   errorStatus = i2c_sendData(command);
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	0b df       	rcall	.-490    	; 0x7ae <i2c_sendData>
     998:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	51 f4       	brne	.+20     	; 0x9b4 <ds1621_sendCommand+0x6a>
   {
     strcpy(display, "5555");
     9a0:	8f e6       	ldi	r24, 0x6F	; 111
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	2a e7       	ldi	r18, 0x7A	; 122
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	b9 01       	movw	r22, r18
     9aa:	45 e0       	ldi	r20, 0x05	; 5
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	28 d9       	rcall	.-3504   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
	 i2c_stop();
     9b0:	77 df       	rcall	.-274    	; 0x8a0 <i2c_stop>
	 return;
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <ds1621_sendCommand+0x6c>
   } 

   i2c_stop();
     9b4:	75 df       	rcall	.-278    	; 0x8a0 <i2c_stop>
}
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <ds1621_readValue+0x6>
     9c6:	0f 92       	push	r0
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	8b 83       	std	Y+3, r24	; 0x03
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     9ce:	73 de       	rcall	.-794    	; 0x6b6 <i2c_start>
     9d0:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	59 f4       	brne	.+22     	; 0x9ee <ds1621_readValue+0x2e>
   {
     strcpy(display, "5555");
     9d8:	8f e6       	ldi	r24, 0x6F	; 111
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	2a e7       	ldi	r18, 0x7A	; 122
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	b9 01       	movw	r22, r18
     9e2:	45 e0       	ldi	r20, 0x05	; 5
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	0c d9       	rcall	.-3560   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
   	 i2c_stop();
     9e8:	5b df       	rcall	.-330    	; 0x8a0 <i2c_stop>
	 return (0);
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	47 c0       	rjmp	.+142    	; 0xa7c <ds1621_readValue+0xbc>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	a4 de       	rcall	.-696    	; 0x73a <i2c_sendAddress>
     9f2:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	59 f4       	brne	.+22     	; 0xa10 <ds1621_readValue+0x50>
   {
     strcpy(display, "5555");
     9fa:	8f e6       	ldi	r24, 0x6F	; 111
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	2a e7       	ldi	r18, 0x7A	; 122
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	b9 01       	movw	r22, r18
     a04:	45 e0       	ldi	r20, 0x05	; 5
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	fb d8       	rcall	.-3594   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
	 i2c_stop();
     a0a:	4a df       	rcall	.-364    	; 0x8a0 <i2c_stop>
	 return (0);
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	36 c0       	rjmp	.+108    	; 0xa7c <ds1621_readValue+0xbc>
   } 
   
   errorStatus = i2c_sendData(value);
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	cd de       	rcall	.-614    	; 0x7ae <i2c_sendData>
     a14:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	59 f4       	brne	.+22     	; 0xa32 <ds1621_readValue+0x72>
   {
     strcpy(display, "5555");
     a1c:	8f e6       	ldi	r24, 0x6F	; 111
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	2a e7       	ldi	r18, 0x7A	; 122
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	b9 01       	movw	r22, r18
     a26:	45 e0       	ldi	r20, 0x05	; 5
     a28:	50 e0       	ldi	r21, 0x00	; 0
     a2a:	ea d8       	rcall	.-3628   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
	 i2c_stop();
     a2c:	39 df       	rcall	.-398    	; 0x8a0 <i2c_stop>
	 return (0);
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	25 c0       	rjmp	.+74     	; 0xa7c <ds1621_readValue+0xbc>
   } 

    errorStatus = i2c_repeatStart();
     a32:	62 de       	rcall	.-828    	; 0x6f8 <i2c_repeatStart>
     a34:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	59 f4       	brne	.+22     	; 0xa52 <ds1621_readValue+0x92>
   {
     strcpy(display, "5555");
     a3c:	8f e6       	ldi	r24, 0x6F	; 111
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	2a e7       	ldi	r18, 0x7A	; 122
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	b9 01       	movw	r22, r18
     a46:	45 e0       	ldi	r20, 0x05	; 5
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	da d8       	rcall	.-3660   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
   	 i2c_stop();
     a4c:	29 df       	rcall	.-430    	; 0x8a0 <i2c_stop>
	 return (0);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	15 c0       	rjmp	.+42     	; 0xa7c <ds1621_readValue+0xbc>
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
     a52:	81 e9       	ldi	r24, 0x91	; 145
     a54:	72 de       	rcall	.-796    	; 0x73a <i2c_sendAddress>
     a56:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	81 30       	cpi	r24, 0x01	; 1
     a5c:	59 f4       	brne	.+22     	; 0xa74 <ds1621_readValue+0xb4>
   {
     strcpy(display, "5555");
     a5e:	8f e6       	ldi	r24, 0x6F	; 111
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	2a e7       	ldi	r18, 0x7A	; 122
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	b9 01       	movw	r22, r18
     a68:	45 e0       	ldi	r20, 0x05	; 5
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	c9 d8       	rcall	.-3694   	; 0xfffffc00 <__eeprom_end+0xff7efc00>
	 i2c_stop();
     a6e:	18 df       	rcall	.-464    	; 0x8a0 <i2c_stop>
	 return (0);
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	04 c0       	rjmp	.+8      	; 0xa7c <ds1621_readValue+0xbc>
   } 
 
   data = i2c_receiveData_NACK(); 
     a74:	ed de       	rcall	.-550    	; 0x850 <i2c_receiveData_NACK>
     a76:	8a 83       	std	Y+2, r24	; 0x02
   
   i2c_stop();
     a78:	13 df       	rcall	.-474    	; 0x8a0 <i2c_stop>
   
   return (data);
     a7a:	8a 81       	ldd	r24, Y+2	; 0x02
}	  
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	cf 91       	pop	r28
     a84:	df 91       	pop	r29
     a86:	08 95       	ret

00000a88 <getTemperature>:

//******************************************************************
//Function to read 
//******************************************************************    
unsigned char* getTemperature(void)
{
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	df 93       	push	r29
     a9a:	cf 93       	push	r28
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	67 97       	sbiw	r28, 0x17	; 23
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
  char temperature, counter, slope;
  int temp;
  float actualTemp;
  
  ds1621_sendCommand ( START_CONVERT );
     aac:	8e ee       	ldi	r24, 0xEE	; 238
     aae:	4d df       	rcall	.-358    	; 0x94a <ds1621_sendCommand>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	aa e7       	ldi	r26, 0x7A	; 122
     ab6:	b4 e4       	ldi	r27, 0x44	; 68
     ab8:	8a 87       	std	Y+10, r24	; 0x0a
     aba:	9b 87       	std	Y+11, r25	; 0x0b
     abc:	ac 87       	std	Y+12, r26	; 0x0c
     abe:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ac0:	6a 85       	ldd	r22, Y+10	; 0x0a
     ac2:	7b 85       	ldd	r23, Y+11	; 0x0b
     ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	4a e7       	ldi	r20, 0x7A	; 122
     ace:	54 e4       	ldi	r21, 0x44	; 68
     ad0:	12 d3       	rcall	.+1572   	; 0x10f6 <__mulsf3>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	8e 87       	std	Y+14, r24	; 0x0e
     ad8:	9f 87       	std	Y+15, r25	; 0x0f
     ada:	a8 8b       	std	Y+16, r26	; 0x10
     adc:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     ade:	11 e0       	ldi	r17, 0x01	; 1
     ae0:	6e 85       	ldd	r22, Y+14	; 0x0e
     ae2:	7f 85       	ldd	r23, Y+15	; 0x0f
     ae4:	88 89       	ldd	r24, Y+16	; 0x10
     ae6:	99 89       	ldd	r25, Y+17	; 0x11
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	40 e8       	ldi	r20, 0x80	; 128
     aee:	5f e3       	ldi	r21, 0x3F	; 63
     af0:	f6 d4       	rcall	.+2540   	; 0x14de <__ltsf2>
     af2:	88 23       	and	r24, r24
     af4:	0c f0       	brlt	.+2      	; 0xaf8 <getTemperature+0x70>
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	11 23       	and	r17, r17
     afa:	29 f0       	breq	.+10     	; 0xb06 <getTemperature+0x7e>
		__ticks = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	9b 8b       	std	Y+19, r25	; 0x13
     b02:	8a 8b       	std	Y+18, r24	; 0x12
     b04:	42 c0       	rjmp	.+132    	; 0xb8a <getTemperature+0x102>
	else if (__tmp > 65535)
     b06:	11 e0       	ldi	r17, 0x01	; 1
     b08:	6e 85       	ldd	r22, Y+14	; 0x0e
     b0a:	7f 85       	ldd	r23, Y+15	; 0x0f
     b0c:	88 89       	ldd	r24, Y+16	; 0x10
     b0e:	99 89       	ldd	r25, Y+17	; 0x11
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	4f e7       	ldi	r20, 0x7F	; 127
     b16:	57 e4       	ldi	r21, 0x47	; 71
     b18:	8c d4       	rcall	.+2328   	; 0x1432 <__gtsf2>
     b1a:	18 16       	cp	r1, r24
     b1c:	0c f0       	brlt	.+2      	; 0xb20 <getTemperature+0x98>
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	11 23       	and	r17, r17
     b22:	51 f1       	breq	.+84     	; 0xb78 <getTemperature+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b24:	6a 85       	ldd	r22, Y+10	; 0x0a
     b26:	7b 85       	ldd	r23, Y+11	; 0x0b
     b28:	8c 85       	ldd	r24, Y+12	; 0x0c
     b2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e2       	ldi	r20, 0x20	; 32
     b32:	51 e4       	ldi	r21, 0x41	; 65
     b34:	e0 d2       	rcall	.+1472   	; 0x10f6 <__mulsf3>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	bc 01       	movw	r22, r24
     b3c:	cd 01       	movw	r24, r26
     b3e:	19 d1       	rcall	.+562    	; 0xd72 <__fixunssfsi>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	9b 8b       	std	Y+19, r25	; 0x13
     b46:	8a 8b       	std	Y+18, r24	; 0x12
     b48:	12 c0       	rjmp	.+36     	; 0xb6e <getTemperature+0xe6>
     b4a:	84 e6       	ldi	r24, 0x64	; 100
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	9d 8b       	std	Y+21, r25	; 0x15
     b50:	8c 8b       	std	Y+20, r24	; 0x14
     b52:	8c 89       	ldd	r24, Y+20	; 0x14
     b54:	9d 89       	ldd	r25, Y+21	; 0x15
     b56:	8c 01       	movw	r16, r24
     b58:	c8 01       	movw	r24, r16
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <getTemperature+0xd2>
     b5e:	8c 01       	movw	r16, r24
     b60:	1d 8b       	std	Y+21, r17	; 0x15
     b62:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b64:	8a 89       	ldd	r24, Y+18	; 0x12
     b66:	9b 89       	ldd	r25, Y+19	; 0x13
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9b 8b       	std	Y+19, r25	; 0x13
     b6c:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b6e:	8a 89       	ldd	r24, Y+18	; 0x12
     b70:	9b 89       	ldd	r25, Y+19	; 0x13
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	51 f7       	brne	.-44     	; 0xb4a <getTemperature+0xc2>
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <getTemperature+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b78:	6e 85       	ldd	r22, Y+14	; 0x0e
     b7a:	7f 85       	ldd	r23, Y+15	; 0x0f
     b7c:	88 89       	ldd	r24, Y+16	; 0x10
     b7e:	99 89       	ldd	r25, Y+17	; 0x11
     b80:	f8 d0       	rcall	.+496    	; 0xd72 <__fixunssfsi>
     b82:	dc 01       	movw	r26, r24
     b84:	cb 01       	movw	r24, r22
     b86:	9b 8b       	std	Y+19, r25	; 0x13
     b88:	8a 8b       	std	Y+18, r24	; 0x12
     b8a:	8a 89       	ldd	r24, Y+18	; 0x12
     b8c:	9b 89       	ldd	r25, Y+19	; 0x13
     b8e:	9f 8b       	std	Y+23, r25	; 0x17
     b90:	8e 8b       	std	Y+22, r24	; 0x16
     b92:	8e 89       	ldd	r24, Y+22	; 0x16
     b94:	9f 89       	ldd	r25, Y+23	; 0x17
     b96:	8c 01       	movw	r16, r24
     b98:	c8 01       	movw	r24, r16
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <getTemperature+0x112>
     b9e:	8c 01       	movw	r16, r24
     ba0:	1f 8b       	std	Y+23, r17	; 0x17
     ba2:	0e 8b       	std	Y+22, r16	; 0x16
  
  _delay_ms(1000);
  
  temperature = ds1621_readValue ( READ_TEMP );
     ba4:	8a ea       	ldi	r24, 0xAA	; 170
     ba6:	0c df       	rcall	.-488    	; 0x9c0 <ds1621_readValue>
     ba8:	8b 83       	std	Y+3, r24	; 0x03
  counter = ds1621_readValue ( READ_COUNTER );
     baa:	88 ea       	ldi	r24, 0xA8	; 168
     bac:	09 df       	rcall	.-494    	; 0x9c0 <ds1621_readValue>
     bae:	8c 83       	std	Y+4, r24	; 0x04
  slope = ds1621_readValue ( READ_SLOPE );   
     bb0:	89 ea       	ldi	r24, 0xA9	; 169
     bb2:	06 df       	rcall	.-500    	; 0x9c0 <ds1621_readValue>
     bb4:	8d 83       	std	Y+5, r24	; 0x05
  
  actualTemp = (float)temperature - 0.25 + ((float)(slope - counter) / (float)slope);
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	62 d5       	rcall	.+2756   	; 0x168a <__floatunsisf>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	bc 01       	movw	r22, r24
     bcc:	cd 01       	movw	r24, r26
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5e e3       	ldi	r21, 0x3E	; 62
     bd6:	64 d2       	rcall	.+1224   	; 0x10a0 <__subsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	7c 01       	movw	r14, r24
     bde:	8d 01       	movw	r16, r26
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	88 2f       	mov	r24, r24
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	a9 01       	movw	r20, r18
     bee:	48 1b       	sub	r20, r24
     bf0:	59 0b       	sbc	r21, r25
     bf2:	ca 01       	movw	r24, r20
     bf4:	aa 27       	eor	r26, r26
     bf6:	97 fd       	sbrc	r25, 7
     bf8:	a0 95       	com	r26
     bfa:	ba 2f       	mov	r27, r26
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	99 d4       	rcall	.+2354   	; 0x1534 <__floatsisf>
     c02:	5b 01       	movw	r10, r22
     c04:	6c 01       	movw	r12, r24
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	88 2f       	mov	r24, r24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	3a d5       	rcall	.+2676   	; 0x168a <__floatunsisf>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	c6 01       	movw	r24, r12
     c1c:	b5 01       	movw	r22, r10
     c1e:	60 d3       	rcall	.+1728   	; 0x12e0 <__divsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9c 01       	movw	r18, r24
     c26:	ad 01       	movw	r20, r26
     c28:	c8 01       	movw	r24, r16
     c2a:	b7 01       	movw	r22, r14
     c2c:	12 d2       	rcall	.+1060   	; 0x1052 <__addsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8e 83       	std	Y+6, r24	; 0x06
     c34:	9f 83       	std	Y+7, r25	; 0x07
     c36:	a8 87       	std	Y+8, r26	; 0x08
     c38:	b9 87       	std	Y+9, r27	; 0x09
  
 	temp=(int)(actualTemp * 10.0);   //to include decimal point for display
     c3a:	6e 81       	ldd	r22, Y+6	; 0x06
     c3c:	7f 81       	ldd	r23, Y+7	; 0x07
     c3e:	88 85       	ldd	r24, Y+8	; 0x08
     c40:	99 85       	ldd	r25, Y+9	; 0x09
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e2       	ldi	r20, 0x20	; 32
     c48:	51 e4       	ldi	r21, 0x41	; 65
     c4a:	55 d2       	rcall	.+1194   	; 0x10f6 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	cb d4       	rcall	.+2454   	; 0x15ec <__fixsfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9a 83       	std	Y+2, r25	; 0x02
     c5c:	89 83       	std	Y+1, r24	; 0x01
	
	if((actualTemp*10.0 - temp) >= 0.5) temp=temp+1;
     c5e:	6e 81       	ldd	r22, Y+6	; 0x06
     c60:	7f 81       	ldd	r23, Y+7	; 0x07
     c62:	88 85       	ldd	r24, Y+8	; 0x08
     c64:	99 85       	ldd	r25, Y+9	; 0x09
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	43 d2       	rcall	.+1158   	; 0x10f6 <__mulsf3>
     c70:	dc 01       	movw	r26, r24
     c72:	cb 01       	movw	r24, r22
     c74:	7c 01       	movw	r14, r24
     c76:	8d 01       	movw	r16, r26
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	aa 27       	eor	r26, r26
     c7e:	97 fd       	sbrc	r25, 7
     c80:	a0 95       	com	r26
     c82:	ba 2f       	mov	r27, r26
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	55 d4       	rcall	.+2218   	; 0x1534 <__floatsisf>
     c8a:	9b 01       	movw	r18, r22
     c8c:	ac 01       	movw	r20, r24
     c8e:	c8 01       	movw	r24, r16
     c90:	b7 01       	movw	r22, r14
     c92:	06 d2       	rcall	.+1036   	; 0x10a0 <__subsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	11 e0       	ldi	r17, 0x01	; 1
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	f0 d3       	rcall	.+2016   	; 0x1488 <__gesf2>
     ca8:	88 23       	and	r24, r24
     caa:	0c f4       	brge	.+2      	; 0xcae <getTemperature+0x226>
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	11 23       	and	r17, r17
     cb0:	29 f0       	breq	.+10     	; 0xcbc <getTemperature+0x234>
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	9a 81       	ldd	r25, Y+2	; 0x02
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	9a 83       	std	Y+2, r25	; 0x02
     cba:	89 83       	std	Y+1, r24	; 0x01
	
//    tempDisplay[8]=0xdf;			//Symbol of degree

	if(temp < 0)
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	99 23       	and	r25, r25
     cc2:	5c f4       	brge	.+22     	; 0xcda <getTemperature+0x252>
	{
	  tempDisplay[0] = '-';
     cc4:	8d e2       	ldi	r24, 0x2D	; 45
     cc6:	80 93 74 00 	sts	0x0074, r24
	  temp *= -1;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	90 95       	com	r25
     cd0:	81 95       	neg	r24
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	9a 83       	std	Y+2, r25	; 0x02
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <getTemperature+0x258>
	}
	else
	{
	  tempDisplay[0] = '+';
     cda:	8b e2       	ldi	r24, 0x2B	; 43
     cdc:	80 93 74 00 	sts	0x0074, r24
	}     
	
	tempDisplay[4] = ((unsigned char)(temp%10)) | 0x30;
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	b9 01       	movw	r22, r18
     cea:	2c d7       	rcall	.+3672   	; 0x1b44 <__divmodhi4>
     cec:	80 63       	ori	r24, 0x30	; 48
     cee:	80 93 78 00 	sts	0x0078, r24
	temp=temp/10;
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	9a 81       	ldd	r25, Y+2	; 0x02
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	b9 01       	movw	r22, r18
     cfc:	23 d7       	rcall	.+3654   	; 0x1b44 <__divmodhi4>
     cfe:	9b 01       	movw	r18, r22
     d00:	3a 83       	std	Y+2, r19	; 0x02
     d02:	29 83       	std	Y+1, r18	; 0x01
	
	tempDisplay[2] = ((unsigned char)(temp%10)) | 0x30;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	9a 81       	ldd	r25, Y+2	; 0x02
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	b9 01       	movw	r22, r18
     d0e:	1a d7       	rcall	.+3636   	; 0x1b44 <__divmodhi4>
     d10:	80 63       	ori	r24, 0x30	; 48
     d12:	80 93 76 00 	sts	0x0076, r24
	temp=temp/10;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	2a e0       	ldi	r18, 0x0A	; 10
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	b9 01       	movw	r22, r18
     d20:	11 d7       	rcall	.+3618   	; 0x1b44 <__divmodhi4>
     d22:	9b 01       	movw	r18, r22
     d24:	3a 83       	std	Y+2, r19	; 0x02
     d26:	29 83       	std	Y+1, r18	; 0x01
	
	tempDisplay[1] = ((unsigned char)(temp%10)) | 0x30;
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	b9 01       	movw	r22, r18
     d32:	08 d7       	rcall	.+3600   	; 0x1b44 <__divmodhi4>
     d34:	80 63       	ori	r24, 0x30	; 48
     d36:	80 93 75 00 	sts	0x0075, r24
	temp=temp/10;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	b9 01       	movw	r22, r18
     d44:	ff d6       	rcall	.+3582   	; 0x1b44 <__divmodhi4>
     d46:	9b 01       	movw	r18, r22
     d48:	3a 83       	std	Y+2, r19	; 0x02
     d4a:	29 83       	std	Y+1, r18	; 0x01
	
	return tempDisplay;
     d4c:	84 e7       	ldi	r24, 0x74	; 116
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	67 96       	adiw	r28, 0x17	; 23
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	af 90       	pop	r10
     d70:	08 95       	ret

00000d72 <__fixunssfsi>:
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	7b 01       	movw	r14, r22
     d7c:	8c 01       	movw	r16, r24
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	5f e4       	ldi	r21, 0x4F	; 79
     d86:	80 d3       	rcall	.+1792   	; 0x1488 <__gesf2>
     d88:	87 fd       	sbrc	r24, 7
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <__fixunssfsi+0x38>
     d8c:	c8 01       	movw	r24, r16
     d8e:	b7 01       	movw	r22, r14
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	5f e4       	ldi	r21, 0x4F	; 79
     d98:	83 d1       	rcall	.+774    	; 0x10a0 <__subsf3>
     d9a:	28 d4       	rcall	.+2128   	; 0x15ec <__fixsfsi>
     d9c:	9b 01       	movw	r18, r22
     d9e:	ac 01       	movw	r20, r24
     da0:	20 50       	subi	r18, 0x00	; 0
     da2:	30 40       	sbci	r19, 0x00	; 0
     da4:	40 40       	sbci	r20, 0x00	; 0
     da6:	50 48       	sbci	r21, 0x80	; 128
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <__fixunssfsi+0x42>
     daa:	c8 01       	movw	r24, r16
     dac:	b7 01       	movw	r22, r14
     dae:	1e d4       	rcall	.+2108   	; 0x15ec <__fixsfsi>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	b9 01       	movw	r22, r18
     db6:	ca 01       	movw	r24, r20
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <_fpadd_parts>:
     dc2:	a0 e0       	ldi	r26, 0x00	; 0
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 ee       	ldi	r30, 0xE6	; 230
     dc8:	f6 e0       	ldi	r31, 0x06	; 6
     dca:	e7 c6       	rjmp	.+3534   	; 0x1b9a <__prologue_saves__+0x8>
     dcc:	fc 01       	movw	r30, r24
     dce:	ea 01       	movw	r28, r20
     dd0:	80 81       	ld	r24, Z
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <_fpadd_parts+0x16>
     dd6:	38 c1       	rjmp	.+624    	; 0x1048 <_fpadd_parts+0x286>
     dd8:	db 01       	movw	r26, r22
     dda:	9c 91       	ld	r25, X
     ddc:	92 30       	cpi	r25, 0x02	; 2
     dde:	08 f4       	brcc	.+2      	; 0xde2 <_fpadd_parts+0x20>
     de0:	30 c1       	rjmp	.+608    	; 0x1042 <_fpadd_parts+0x280>
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	59 f4       	brne	.+22     	; 0xdfc <_fpadd_parts+0x3a>
     de6:	94 30       	cpi	r25, 0x04	; 4
     de8:	09 f0       	breq	.+2      	; 0xdec <_fpadd_parts+0x2a>
     dea:	2e c1       	rjmp	.+604    	; 0x1048 <_fpadd_parts+0x286>
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	11 96       	adiw	r26, 0x01	; 1
     df0:	8c 91       	ld	r24, X
     df2:	11 97       	sbiw	r26, 0x01	; 1
     df4:	98 17       	cp	r25, r24
     df6:	09 f0       	breq	.+2      	; 0xdfa <_fpadd_parts+0x38>
     df8:	21 c1       	rjmp	.+578    	; 0x103c <_fpadd_parts+0x27a>
     dfa:	26 c1       	rjmp	.+588    	; 0x1048 <_fpadd_parts+0x286>
     dfc:	94 30       	cpi	r25, 0x04	; 4
     dfe:	09 f4       	brne	.+2      	; 0xe02 <_fpadd_parts+0x40>
     e00:	20 c1       	rjmp	.+576    	; 0x1042 <_fpadd_parts+0x280>
     e02:	92 30       	cpi	r25, 0x02	; 2
     e04:	b1 f4       	brne	.+44     	; 0xe32 <_fpadd_parts+0x70>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	09 f0       	breq	.+2      	; 0xe0c <_fpadd_parts+0x4a>
     e0a:	1e c1       	rjmp	.+572    	; 0x1048 <_fpadd_parts+0x286>
     e0c:	ca 01       	movw	r24, r20
     e0e:	af 01       	movw	r20, r30
     e10:	28 e0       	ldi	r18, 0x08	; 8
     e12:	da 01       	movw	r26, r20
     e14:	0d 90       	ld	r0, X+
     e16:	ad 01       	movw	r20, r26
     e18:	dc 01       	movw	r26, r24
     e1a:	0d 92       	st	X+, r0
     e1c:	cd 01       	movw	r24, r26
     e1e:	21 50       	subi	r18, 0x01	; 1
     e20:	c1 f7       	brne	.-16     	; 0xe12 <_fpadd_parts+0x50>
     e22:	db 01       	movw	r26, r22
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	8c 91       	ld	r24, X
     e28:	11 97       	sbiw	r26, 0x01	; 1
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	89 23       	and	r24, r25
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	0a c1       	rjmp	.+532    	; 0x1046 <_fpadd_parts+0x284>
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	09 f4       	brne	.+2      	; 0xe38 <_fpadd_parts+0x76>
     e36:	05 c1       	rjmp	.+522    	; 0x1042 <_fpadd_parts+0x280>
     e38:	c2 80       	ldd	r12, Z+2	; 0x02
     e3a:	d3 80       	ldd	r13, Z+3	; 0x03
     e3c:	db 01       	movw	r26, r22
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	6d 90       	ld	r6, X+
     e42:	7c 90       	ld	r7, X
     e44:	13 97       	sbiw	r26, 0x03	; 3
     e46:	24 81       	ldd	r18, Z+4	; 0x04
     e48:	35 81       	ldd	r19, Z+5	; 0x05
     e4a:	46 81       	ldd	r20, Z+6	; 0x06
     e4c:	57 81       	ldd	r21, Z+7	; 0x07
     e4e:	14 96       	adiw	r26, 0x04	; 4
     e50:	ed 90       	ld	r14, X+
     e52:	fd 90       	ld	r15, X+
     e54:	0d 91       	ld	r16, X+
     e56:	1c 91       	ld	r17, X
     e58:	17 97       	sbiw	r26, 0x07	; 7
     e5a:	c6 01       	movw	r24, r12
     e5c:	86 19       	sub	r24, r6
     e5e:	97 09       	sbc	r25, r7
     e60:	5c 01       	movw	r10, r24
     e62:	97 ff       	sbrs	r25, 7
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <_fpadd_parts+0xac>
     e66:	aa 24       	eor	r10, r10
     e68:	bb 24       	eor	r11, r11
     e6a:	a8 1a       	sub	r10, r24
     e6c:	b9 0a       	sbc	r11, r25
     e6e:	b0 e2       	ldi	r27, 0x20	; 32
     e70:	ab 16       	cp	r10, r27
     e72:	b1 04       	cpc	r11, r1
     e74:	0c f0       	brlt	.+2      	; 0xe78 <_fpadd_parts+0xb6>
     e76:	61 c0       	rjmp	.+194    	; 0xf3a <_fpadd_parts+0x178>
     e78:	18 16       	cp	r1, r24
     e7a:	19 06       	cpc	r1, r25
     e7c:	6c f5       	brge	.+90     	; 0xed8 <_fpadd_parts+0x116>
     e7e:	37 01       	movw	r6, r14
     e80:	48 01       	movw	r8, r16
     e82:	0a 2c       	mov	r0, r10
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <_fpadd_parts+0xcc>
     e86:	96 94       	lsr	r9
     e88:	87 94       	ror	r8
     e8a:	77 94       	ror	r7
     e8c:	67 94       	ror	r6
     e8e:	0a 94       	dec	r0
     e90:	d2 f7       	brpl	.-12     	; 0xe86 <_fpadd_parts+0xc4>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	0a 2c       	mov	r0, r10
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <_fpadd_parts+0xe4>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	aa 1f       	adc	r26, r26
     ea4:	bb 1f       	adc	r27, r27
     ea6:	0a 94       	dec	r0
     ea8:	d2 f7       	brpl	.-12     	; 0xe9e <_fpadd_parts+0xdc>
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	a1 09       	sbc	r26, r1
     eae:	b1 09       	sbc	r27, r1
     eb0:	8e 21       	and	r24, r14
     eb2:	9f 21       	and	r25, r15
     eb4:	a0 23       	and	r26, r16
     eb6:	b1 23       	and	r27, r17
     eb8:	ee 24       	eor	r14, r14
     eba:	ff 24       	eor	r15, r15
     ebc:	87 01       	movw	r16, r14
     ebe:	e3 94       	inc	r14
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	a1 05       	cpc	r26, r1
     ec4:	b1 05       	cpc	r27, r1
     ec6:	19 f4       	brne	.+6      	; 0xece <_fpadd_parts+0x10c>
     ec8:	ee 24       	eor	r14, r14
     eca:	ff 24       	eor	r15, r15
     ecc:	87 01       	movw	r16, r14
     ece:	e6 28       	or	r14, r6
     ed0:	f7 28       	or	r15, r7
     ed2:	08 29       	or	r16, r8
     ed4:	19 29       	or	r17, r9
     ed6:	3c c0       	rjmp	.+120    	; 0xf50 <_fpadd_parts+0x18e>
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	d1 f1       	breq	.+116    	; 0xf50 <_fpadd_parts+0x18e>
     edc:	ca 0c       	add	r12, r10
     ede:	db 1c       	adc	r13, r11
     ee0:	39 01       	movw	r6, r18
     ee2:	4a 01       	movw	r8, r20
     ee4:	0a 2c       	mov	r0, r10
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <_fpadd_parts+0x12e>
     ee8:	96 94       	lsr	r9
     eea:	87 94       	ror	r8
     eec:	77 94       	ror	r7
     eee:	67 94       	ror	r6
     ef0:	0a 94       	dec	r0
     ef2:	d2 f7       	brpl	.-12     	; 0xee8 <_fpadd_parts+0x126>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	0a 2c       	mov	r0, r10
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <_fpadd_parts+0x146>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	aa 1f       	adc	r26, r26
     f06:	bb 1f       	adc	r27, r27
     f08:	0a 94       	dec	r0
     f0a:	d2 f7       	brpl	.-12     	; 0xf00 <_fpadd_parts+0x13e>
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	a1 09       	sbc	r26, r1
     f10:	b1 09       	sbc	r27, r1
     f12:	82 23       	and	r24, r18
     f14:	93 23       	and	r25, r19
     f16:	a4 23       	and	r26, r20
     f18:	b5 23       	and	r27, r21
     f1a:	21 e0       	ldi	r18, 0x01	; 1
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	a1 05       	cpc	r26, r1
     f26:	b1 05       	cpc	r27, r1
     f28:	19 f4       	brne	.+6      	; 0xf30 <_fpadd_parts+0x16e>
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	a9 01       	movw	r20, r18
     f30:	26 29       	or	r18, r6
     f32:	37 29       	or	r19, r7
     f34:	48 29       	or	r20, r8
     f36:	59 29       	or	r21, r9
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <_fpadd_parts+0x18e>
     f3a:	6c 14       	cp	r6, r12
     f3c:	7d 04       	cpc	r7, r13
     f3e:	24 f4       	brge	.+8      	; 0xf48 <_fpadd_parts+0x186>
     f40:	ee 24       	eor	r14, r14
     f42:	ff 24       	eor	r15, r15
     f44:	87 01       	movw	r16, r14
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <_fpadd_parts+0x18e>
     f48:	63 01       	movw	r12, r6
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	81 81       	ldd	r24, Z+1	; 0x01
     f52:	fb 01       	movw	r30, r22
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	89 17       	cp	r24, r25
     f58:	09 f4       	brne	.+2      	; 0xf5c <_fpadd_parts+0x19a>
     f5a:	45 c0       	rjmp	.+138    	; 0xfe6 <_fpadd_parts+0x224>
     f5c:	88 23       	and	r24, r24
     f5e:	49 f0       	breq	.+18     	; 0xf72 <_fpadd_parts+0x1b0>
     f60:	d8 01       	movw	r26, r16
     f62:	c7 01       	movw	r24, r14
     f64:	82 1b       	sub	r24, r18
     f66:	93 0b       	sbc	r25, r19
     f68:	a4 0b       	sbc	r26, r20
     f6a:	b5 0b       	sbc	r27, r21
     f6c:	9c 01       	movw	r18, r24
     f6e:	ad 01       	movw	r20, r26
     f70:	04 c0       	rjmp	.+8      	; 0xf7a <_fpadd_parts+0x1b8>
     f72:	2e 19       	sub	r18, r14
     f74:	3f 09       	sbc	r19, r15
     f76:	40 0b       	sbc	r20, r16
     f78:	51 0b       	sbc	r21, r17
     f7a:	57 fd       	sbrc	r21, 7
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <_fpadd_parts+0x1c4>
     f7e:	19 82       	std	Y+1, r1	; 0x01
     f80:	db 82       	std	Y+3, r13	; 0x03
     f82:	ca 82       	std	Y+2, r12	; 0x02
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <_fpadd_parts+0x1da>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	db 82       	std	Y+3, r13	; 0x03
     f8c:	ca 82       	std	Y+2, r12	; 0x02
     f8e:	50 95       	com	r21
     f90:	40 95       	com	r20
     f92:	30 95       	com	r19
     f94:	21 95       	neg	r18
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	2c 83       	std	Y+4, r18	; 0x04
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	4e 83       	std	Y+6, r20	; 0x06
     fa2:	5f 83       	std	Y+7, r21	; 0x07
     fa4:	0d c0       	rjmp	.+26     	; 0xfc0 <_fpadd_parts+0x1fe>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	aa 1f       	adc	r26, r26
     fac:	bb 1f       	adc	r27, r27
     fae:	8c 83       	std	Y+4, r24	; 0x04
     fb0:	9d 83       	std	Y+5, r25	; 0x05
     fb2:	ae 83       	std	Y+6, r26	; 0x06
     fb4:	bf 83       	std	Y+7, r27	; 0x07
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	9b 83       	std	Y+3, r25	; 0x03
     fbe:	8a 83       	std	Y+2, r24	; 0x02
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	ae 81       	ldd	r26, Y+6	; 0x06
     fc6:	bf 81       	ldd	r27, Y+7	; 0x07
     fc8:	9c 01       	movw	r18, r24
     fca:	ad 01       	movw	r20, r26
     fcc:	21 50       	subi	r18, 0x01	; 1
     fce:	30 40       	sbci	r19, 0x00	; 0
     fd0:	40 40       	sbci	r20, 0x00	; 0
     fd2:	50 40       	sbci	r21, 0x00	; 0
     fd4:	2f 3f       	cpi	r18, 0xFF	; 255
     fd6:	ef ef       	ldi	r30, 0xFF	; 255
     fd8:	3e 07       	cpc	r19, r30
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	4e 07       	cpc	r20, r30
     fde:	ef e3       	ldi	r30, 0x3F	; 63
     fe0:	5e 07       	cpc	r21, r30
     fe2:	08 f3       	brcs	.-62     	; 0xfa6 <_fpadd_parts+0x1e4>
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <_fpadd_parts+0x23a>
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	db 82       	std	Y+3, r13	; 0x03
     fea:	ca 82       	std	Y+2, r12	; 0x02
     fec:	2e 0d       	add	r18, r14
     fee:	3f 1d       	adc	r19, r15
     ff0:	40 1f       	adc	r20, r16
     ff2:	51 1f       	adc	r21, r17
     ff4:	2c 83       	std	Y+4, r18	; 0x04
     ff6:	3d 83       	std	Y+5, r19	; 0x05
     ff8:	4e 83       	std	Y+6, r20	; 0x06
     ffa:	5f 83       	std	Y+7, r21	; 0x07
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	88 83       	st	Y, r24
    1000:	2c 81       	ldd	r18, Y+4	; 0x04
    1002:	3d 81       	ldd	r19, Y+5	; 0x05
    1004:	4e 81       	ldd	r20, Y+6	; 0x06
    1006:	5f 81       	ldd	r21, Y+7	; 0x07
    1008:	57 ff       	sbrs	r21, 7
    100a:	1d c0       	rjmp	.+58     	; 0x1046 <_fpadd_parts+0x284>
    100c:	da 01       	movw	r26, r20
    100e:	c9 01       	movw	r24, r18
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	a0 70       	andi	r26, 0x00	; 0
    1016:	b0 70       	andi	r27, 0x00	; 0
    1018:	56 95       	lsr	r21
    101a:	47 95       	ror	r20
    101c:	37 95       	ror	r19
    101e:	27 95       	ror	r18
    1020:	82 2b       	or	r24, r18
    1022:	93 2b       	or	r25, r19
    1024:	a4 2b       	or	r26, r20
    1026:	b5 2b       	or	r27, r21
    1028:	8c 83       	std	Y+4, r24	; 0x04
    102a:	9d 83       	std	Y+5, r25	; 0x05
    102c:	ae 83       	std	Y+6, r26	; 0x06
    102e:	bf 83       	std	Y+7, r27	; 0x07
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	9b 83       	std	Y+3, r25	; 0x03
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <_fpadd_parts+0x284>
    103c:	ef e7       	ldi	r30, 0x7F	; 127
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <_fpadd_parts+0x286>
    1042:	fb 01       	movw	r30, r22
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <_fpadd_parts+0x286>
    1046:	fe 01       	movw	r30, r28
    1048:	cf 01       	movw	r24, r30
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	ee e0       	ldi	r30, 0x0E	; 14
    1050:	c0 c5       	rjmp	.+2944   	; 0x1bd2 <__epilogue_restores__+0x8>

00001052 <__addsf3>:
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ee e2       	ldi	r30, 0x2E	; 46
    1058:	f8 e0       	ldi	r31, 0x08	; 8
    105a:	a7 c5       	rjmp	.+2894   	; 0x1baa <__prologue_saves__+0x18>
    105c:	69 83       	std	Y+1, r22	; 0x01
    105e:	7a 83       	std	Y+2, r23	; 0x02
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	2d 83       	std	Y+5, r18	; 0x05
    1066:	3e 83       	std	Y+6, r19	; 0x06
    1068:	4f 83       	std	Y+7, r20	; 0x07
    106a:	58 87       	std	Y+8, r21	; 0x08
    106c:	89 e0       	ldi	r24, 0x09	; 9
    106e:	e8 2e       	mov	r14, r24
    1070:	f1 2c       	mov	r15, r1
    1072:	ec 0e       	add	r14, r28
    1074:	fd 1e       	adc	r15, r29
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	b7 01       	movw	r22, r14
    107c:	a1 d4       	rcall	.+2370   	; 0x19c0 <__unpack_f>
    107e:	8e 01       	movw	r16, r28
    1080:	0f 5e       	subi	r16, 0xEF	; 239
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	ce 01       	movw	r24, r28
    1086:	05 96       	adiw	r24, 0x05	; 5
    1088:	b8 01       	movw	r22, r16
    108a:	9a d4       	rcall	.+2356   	; 0x19c0 <__unpack_f>
    108c:	c7 01       	movw	r24, r14
    108e:	b8 01       	movw	r22, r16
    1090:	ae 01       	movw	r20, r28
    1092:	47 5e       	subi	r20, 0xE7	; 231
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	95 de       	rcall	.-726    	; 0xdc2 <_fpadd_parts>
    1098:	c6 d3       	rcall	.+1932   	; 0x1826 <__pack_f>
    109a:	a0 96       	adiw	r28, 0x20	; 32
    109c:	e6 e0       	ldi	r30, 0x06	; 6
    109e:	a1 c5       	rjmp	.+2882   	; 0x1be2 <__epilogue_restores__+0x18>

000010a0 <__subsf3>:
    10a0:	a0 e2       	ldi	r26, 0x20	; 32
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e5       	ldi	r30, 0x55	; 85
    10a6:	f8 e0       	ldi	r31, 0x08	; 8
    10a8:	80 c5       	rjmp	.+2816   	; 0x1baa <__prologue_saves__+0x18>
    10aa:	69 83       	std	Y+1, r22	; 0x01
    10ac:	7a 83       	std	Y+2, r23	; 0x02
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	2d 83       	std	Y+5, r18	; 0x05
    10b4:	3e 83       	std	Y+6, r19	; 0x06
    10b6:	4f 83       	std	Y+7, r20	; 0x07
    10b8:	58 87       	std	Y+8, r21	; 0x08
    10ba:	8e 01       	movw	r16, r28
    10bc:	07 5f       	subi	r16, 0xF7	; 247
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	b8 01       	movw	r22, r16
    10c6:	7c d4       	rcall	.+2296   	; 0x19c0 <__unpack_f>
    10c8:	91 e1       	ldi	r25, 0x11	; 17
    10ca:	e9 2e       	mov	r14, r25
    10cc:	f1 2c       	mov	r15, r1
    10ce:	ec 0e       	add	r14, r28
    10d0:	fd 1e       	adc	r15, r29
    10d2:	ce 01       	movw	r24, r28
    10d4:	05 96       	adiw	r24, 0x05	; 5
    10d6:	b7 01       	movw	r22, r14
    10d8:	73 d4       	rcall	.+2278   	; 0x19c0 <__unpack_f>
    10da:	8a 89       	ldd	r24, Y+18	; 0x12
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	89 27       	eor	r24, r25
    10e0:	8a 8b       	std	Y+18, r24	; 0x12
    10e2:	c8 01       	movw	r24, r16
    10e4:	b7 01       	movw	r22, r14
    10e6:	ae 01       	movw	r20, r28
    10e8:	47 5e       	subi	r20, 0xE7	; 231
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	6a de       	rcall	.-812    	; 0xdc2 <_fpadd_parts>
    10ee:	9b d3       	rcall	.+1846   	; 0x1826 <__pack_f>
    10f0:	a0 96       	adiw	r28, 0x20	; 32
    10f2:	e6 e0       	ldi	r30, 0x06	; 6
    10f4:	76 c5       	rjmp	.+2796   	; 0x1be2 <__epilogue_restores__+0x18>

000010f6 <__mulsf3>:
    10f6:	a0 e2       	ldi	r26, 0x20	; 32
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e0 e8       	ldi	r30, 0x80	; 128
    10fc:	f8 e0       	ldi	r31, 0x08	; 8
    10fe:	49 c5       	rjmp	.+2706   	; 0x1b92 <__prologue_saves__>
    1100:	69 83       	std	Y+1, r22	; 0x01
    1102:	7a 83       	std	Y+2, r23	; 0x02
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	9c 83       	std	Y+4, r25	; 0x04
    1108:	2d 83       	std	Y+5, r18	; 0x05
    110a:	3e 83       	std	Y+6, r19	; 0x06
    110c:	4f 83       	std	Y+7, r20	; 0x07
    110e:	58 87       	std	Y+8, r21	; 0x08
    1110:	ce 01       	movw	r24, r28
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	be 01       	movw	r22, r28
    1116:	67 5f       	subi	r22, 0xF7	; 247
    1118:	7f 4f       	sbci	r23, 0xFF	; 255
    111a:	52 d4       	rcall	.+2212   	; 0x19c0 <__unpack_f>
    111c:	ce 01       	movw	r24, r28
    111e:	05 96       	adiw	r24, 0x05	; 5
    1120:	be 01       	movw	r22, r28
    1122:	6f 5e       	subi	r22, 0xEF	; 239
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	4c d4       	rcall	.+2200   	; 0x19c0 <__unpack_f>
    1128:	99 85       	ldd	r25, Y+9	; 0x09
    112a:	92 30       	cpi	r25, 0x02	; 2
    112c:	78 f0       	brcs	.+30     	; 0x114c <__mulsf3+0x56>
    112e:	89 89       	ldd	r24, Y+17	; 0x11
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	c0 f0       	brcs	.+48     	; 0x1164 <__mulsf3+0x6e>
    1134:	94 30       	cpi	r25, 0x04	; 4
    1136:	19 f4       	brne	.+6      	; 0x113e <__mulsf3+0x48>
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	41 f4       	brne	.+16     	; 0x114c <__mulsf3+0x56>
    113c:	cb c0       	rjmp	.+406    	; 0x12d4 <__mulsf3+0x1de>
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	19 f4       	brne	.+6      	; 0x1148 <__mulsf3+0x52>
    1142:	92 30       	cpi	r25, 0x02	; 2
    1144:	79 f4       	brne	.+30     	; 0x1164 <__mulsf3+0x6e>
    1146:	c6 c0       	rjmp	.+396    	; 0x12d4 <__mulsf3+0x1de>
    1148:	92 30       	cpi	r25, 0x02	; 2
    114a:	51 f4       	brne	.+20     	; 0x1160 <__mulsf3+0x6a>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1150:	9a 89       	ldd	r25, Y+18	; 0x12
    1152:	29 17       	cp	r18, r25
    1154:	09 f4       	brne	.+2      	; 0x1158 <__mulsf3+0x62>
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	8a 87       	std	Y+10, r24	; 0x0a
    115a:	ce 01       	movw	r24, r28
    115c:	09 96       	adiw	r24, 0x09	; 9
    115e:	bc c0       	rjmp	.+376    	; 0x12d8 <__mulsf3+0x1e2>
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	51 f4       	brne	.+20     	; 0x1178 <__mulsf3+0x82>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	2a 85       	ldd	r18, Y+10	; 0x0a
    1168:	9a 89       	ldd	r25, Y+18	; 0x12
    116a:	29 17       	cp	r18, r25
    116c:	09 f4       	brne	.+2      	; 0x1170 <__mulsf3+0x7a>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	8a 8b       	std	Y+18, r24	; 0x12
    1172:	ce 01       	movw	r24, r28
    1174:	41 96       	adiw	r24, 0x11	; 17
    1176:	b0 c0       	rjmp	.+352    	; 0x12d8 <__mulsf3+0x1e2>
    1178:	6d 84       	ldd	r6, Y+13	; 0x0d
    117a:	7e 84       	ldd	r7, Y+14	; 0x0e
    117c:	8f 84       	ldd	r8, Y+15	; 0x0f
    117e:	98 88       	ldd	r9, Y+16	; 0x10
    1180:	ed 88       	ldd	r14, Y+21	; 0x15
    1182:	fe 88       	ldd	r15, Y+22	; 0x16
    1184:	0f 89       	ldd	r16, Y+23	; 0x17
    1186:	18 8d       	ldd	r17, Y+24	; 0x18
    1188:	e0 e2       	ldi	r30, 0x20	; 32
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	dc 01       	movw	r26, r24
    1192:	aa 24       	eor	r10, r10
    1194:	bb 24       	eor	r11, r11
    1196:	65 01       	movw	r12, r10
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	b3 01       	movw	r22, r6
    11a0:	61 70       	andi	r22, 0x01	; 1
    11a2:	70 70       	andi	r23, 0x00	; 0
    11a4:	61 15       	cp	r22, r1
    11a6:	71 05       	cpc	r23, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <__mulsf3+0xe8>
    11aa:	2e 0d       	add	r18, r14
    11ac:	3f 1d       	adc	r19, r15
    11ae:	40 1f       	adc	r20, r16
    11b0:	51 1f       	adc	r21, r17
    11b2:	15 01       	movw	r2, r10
    11b4:	26 01       	movw	r4, r12
    11b6:	28 0e       	add	r2, r24
    11b8:	39 1e       	adc	r3, r25
    11ba:	4a 1e       	adc	r4, r26
    11bc:	5b 1e       	adc	r5, r27
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	2e 15       	cp	r18, r14
    11c8:	3f 05       	cpc	r19, r15
    11ca:	40 07       	cpc	r20, r16
    11cc:	51 07       	cpc	r21, r17
    11ce:	18 f0       	brcs	.+6      	; 0x11d6 <__mulsf3+0xe0>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	dc 01       	movw	r26, r24
    11d6:	82 0d       	add	r24, r2
    11d8:	93 1d       	adc	r25, r3
    11da:	a4 1d       	adc	r26, r4
    11dc:	b5 1d       	adc	r27, r5
    11de:	aa 0c       	add	r10, r10
    11e0:	bb 1c       	adc	r11, r11
    11e2:	cc 1c       	adc	r12, r12
    11e4:	dd 1c       	adc	r13, r13
    11e6:	17 ff       	sbrs	r17, 7
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <__mulsf3+0x106>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	26 2e       	mov	r2, r22
    11ee:	31 2c       	mov	r3, r1
    11f0:	41 2c       	mov	r4, r1
    11f2:	51 2c       	mov	r5, r1
    11f4:	a2 28       	or	r10, r2
    11f6:	b3 28       	or	r11, r3
    11f8:	c4 28       	or	r12, r4
    11fa:	d5 28       	or	r13, r5
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	49 f0       	breq	.+18     	; 0x1212 <__mulsf3+0x11c>
    1200:	ee 0c       	add	r14, r14
    1202:	ff 1c       	adc	r15, r15
    1204:	00 1f       	adc	r16, r16
    1206:	11 1f       	adc	r17, r17
    1208:	96 94       	lsr	r9
    120a:	87 94       	ror	r8
    120c:	77 94       	ror	r7
    120e:	67 94       	ror	r6
    1210:	c6 cf       	rjmp	.-116    	; 0x119e <__mulsf3+0xa8>
    1212:	6b 89       	ldd	r22, Y+19	; 0x13
    1214:	7c 89       	ldd	r23, Y+20	; 0x14
    1216:	eb 85       	ldd	r30, Y+11	; 0x0b
    1218:	fc 85       	ldd	r31, Y+12	; 0x0c
    121a:	6e 0f       	add	r22, r30
    121c:	7f 1f       	adc	r23, r31
    121e:	6e 5f       	subi	r22, 0xFE	; 254
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	7c 8f       	std	Y+28, r23	; 0x1c
    1224:	6b 8f       	std	Y+27, r22	; 0x1b
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	ea 85       	ldd	r30, Y+10	; 0x0a
    122a:	7a 89       	ldd	r23, Y+18	; 0x12
    122c:	e7 17       	cp	r30, r23
    122e:	09 f4       	brne	.+2      	; 0x1232 <__mulsf3+0x13c>
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	6a 8f       	std	Y+26, r22	; 0x1a
    1234:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1236:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1238:	10 c0       	rjmp	.+32     	; 0x125a <__mulsf3+0x164>
    123a:	fc 01       	movw	r30, r24
    123c:	e1 70       	andi	r30, 0x01	; 1
    123e:	f0 70       	andi	r31, 0x00	; 0
    1240:	30 97       	sbiw	r30, 0x00	; 0
    1242:	29 f0       	breq	.+10     	; 0x124e <__mulsf3+0x158>
    1244:	56 95       	lsr	r21
    1246:	47 95       	ror	r20
    1248:	37 95       	ror	r19
    124a:	27 95       	ror	r18
    124c:	50 68       	ori	r21, 0x80	; 128
    124e:	b6 95       	lsr	r27
    1250:	a7 95       	ror	r26
    1252:	97 95       	ror	r25
    1254:	87 95       	ror	r24
    1256:	6f 5f       	subi	r22, 0xFF	; 255
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	b7 fd       	sbrc	r27, 7
    125c:	ee cf       	rjmp	.-36     	; 0x123a <__mulsf3+0x144>
    125e:	0c c0       	rjmp	.+24     	; 0x1278 <__mulsf3+0x182>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	aa 1f       	adc	r26, r26
    1266:	bb 1f       	adc	r27, r27
    1268:	57 fd       	sbrc	r21, 7
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	44 1f       	adc	r20, r20
    1272:	55 1f       	adc	r21, r21
    1274:	61 50       	subi	r22, 0x01	; 1
    1276:	70 40       	sbci	r23, 0x00	; 0
    1278:	80 30       	cpi	r24, 0x00	; 0
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	9e 07       	cpc	r25, r30
    127e:	e0 e0       	ldi	r30, 0x00	; 0
    1280:	ae 07       	cpc	r26, r30
    1282:	e0 e4       	ldi	r30, 0x40	; 64
    1284:	be 07       	cpc	r27, r30
    1286:	60 f3       	brcs	.-40     	; 0x1260 <__mulsf3+0x16a>
    1288:	6b 8f       	std	Y+27, r22	; 0x1b
    128a:	7c 8f       	std	Y+28, r23	; 0x1c
    128c:	6f e7       	ldi	r22, 0x7F	; 127
    128e:	e6 2e       	mov	r14, r22
    1290:	f1 2c       	mov	r15, r1
    1292:	01 2d       	mov	r16, r1
    1294:	11 2d       	mov	r17, r1
    1296:	e8 22       	and	r14, r24
    1298:	f9 22       	and	r15, r25
    129a:	0a 23       	and	r16, r26
    129c:	1b 23       	and	r17, r27
    129e:	60 e4       	ldi	r22, 0x40	; 64
    12a0:	e6 16       	cp	r14, r22
    12a2:	f1 04       	cpc	r15, r1
    12a4:	01 05       	cpc	r16, r1
    12a6:	11 05       	cpc	r17, r1
    12a8:	61 f4       	brne	.+24     	; 0x12c2 <__mulsf3+0x1cc>
    12aa:	87 fd       	sbrc	r24, 7
    12ac:	0a c0       	rjmp	.+20     	; 0x12c2 <__mulsf3+0x1cc>
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	41 05       	cpc	r20, r1
    12b4:	51 05       	cpc	r21, r1
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <__mulsf3+0x1cc>
    12b8:	80 5c       	subi	r24, 0xC0	; 192
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	af 4f       	sbci	r26, 0xFF	; 255
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	80 78       	andi	r24, 0x80	; 128
    12c2:	8d 8f       	std	Y+29, r24	; 0x1d
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	af 8f       	std	Y+31, r26	; 0x1f
    12c8:	b8 a3       	std	Y+32, r27	; 0x20
    12ca:	83 e0       	ldi	r24, 0x03	; 3
    12cc:	89 8f       	std	Y+25, r24	; 0x19
    12ce:	ce 01       	movw	r24, r28
    12d0:	49 96       	adiw	r24, 0x19	; 25
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <__mulsf3+0x1e2>
    12d4:	8f e7       	ldi	r24, 0x7F	; 127
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a6 d2       	rcall	.+1356   	; 0x1826 <__pack_f>
    12da:	a0 96       	adiw	r28, 0x20	; 32
    12dc:	e2 e1       	ldi	r30, 0x12	; 18
    12de:	75 c4       	rjmp	.+2282   	; 0x1bca <__epilogue_restores__>

000012e0 <__divsf3>:
    12e0:	a8 e1       	ldi	r26, 0x18	; 24
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e7       	ldi	r30, 0x75	; 117
    12e6:	f9 e0       	ldi	r31, 0x09	; 9
    12e8:	5c c4       	rjmp	.+2232   	; 0x1ba2 <__prologue_saves__+0x10>
    12ea:	69 83       	std	Y+1, r22	; 0x01
    12ec:	7a 83       	std	Y+2, r23	; 0x02
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	2d 83       	std	Y+5, r18	; 0x05
    12f4:	3e 83       	std	Y+6, r19	; 0x06
    12f6:	4f 83       	std	Y+7, r20	; 0x07
    12f8:	58 87       	std	Y+8, r21	; 0x08
    12fa:	8e 01       	movw	r16, r28
    12fc:	07 5f       	subi	r16, 0xF7	; 247
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	b8 01       	movw	r22, r16
    1306:	5c d3       	rcall	.+1720   	; 0x19c0 <__unpack_f>
    1308:	81 e1       	ldi	r24, 0x11	; 17
    130a:	e8 2e       	mov	r14, r24
    130c:	f1 2c       	mov	r15, r1
    130e:	ec 0e       	add	r14, r28
    1310:	fd 1e       	adc	r15, r29
    1312:	ce 01       	movw	r24, r28
    1314:	05 96       	adiw	r24, 0x05	; 5
    1316:	b7 01       	movw	r22, r14
    1318:	53 d3       	rcall	.+1702   	; 0x19c0 <__unpack_f>
    131a:	99 85       	ldd	r25, Y+9	; 0x09
    131c:	92 30       	cpi	r25, 0x02	; 2
    131e:	08 f4       	brcc	.+2      	; 0x1322 <__divsf3+0x42>
    1320:	83 c0       	rjmp	.+262    	; 0x1428 <__divsf3+0x148>
    1322:	89 89       	ldd	r24, Y+17	; 0x11
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	08 f4       	brcc	.+2      	; 0x132a <__divsf3+0x4a>
    1328:	7b c0       	rjmp	.+246    	; 0x1420 <__divsf3+0x140>
    132a:	2a 85       	ldd	r18, Y+10	; 0x0a
    132c:	3a 89       	ldd	r19, Y+18	; 0x12
    132e:	23 27       	eor	r18, r19
    1330:	2a 87       	std	Y+10, r18	; 0x0a
    1332:	94 30       	cpi	r25, 0x04	; 4
    1334:	11 f0       	breq	.+4      	; 0x133a <__divsf3+0x5a>
    1336:	92 30       	cpi	r25, 0x02	; 2
    1338:	21 f4       	brne	.+8      	; 0x1342 <__divsf3+0x62>
    133a:	98 17       	cp	r25, r24
    133c:	09 f0       	breq	.+2      	; 0x1340 <__divsf3+0x60>
    133e:	6c c0       	rjmp	.+216    	; 0x1418 <__divsf3+0x138>
    1340:	71 c0       	rjmp	.+226    	; 0x1424 <__divsf3+0x144>
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	39 f4       	brne	.+14     	; 0x1354 <__divsf3+0x74>
    1346:	1d 86       	std	Y+13, r1	; 0x0d
    1348:	1e 86       	std	Y+14, r1	; 0x0e
    134a:	1f 86       	std	Y+15, r1	; 0x0f
    134c:	18 8a       	std	Y+16, r1	; 0x10
    134e:	1c 86       	std	Y+12, r1	; 0x0c
    1350:	1b 86       	std	Y+11, r1	; 0x0b
    1352:	6a c0       	rjmp	.+212    	; 0x1428 <__divsf3+0x148>
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	19 f4       	brne	.+6      	; 0x135e <__divsf3+0x7e>
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	89 87       	std	Y+9, r24	; 0x09
    135c:	65 c0       	rjmp	.+202    	; 0x1428 <__divsf3+0x148>
    135e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1360:	9c 85       	ldd	r25, Y+12	; 0x0c
    1362:	2b 89       	ldd	r18, Y+19	; 0x13
    1364:	3c 89       	ldd	r19, Y+20	; 0x14
    1366:	82 1b       	sub	r24, r18
    1368:	93 0b       	sbc	r25, r19
    136a:	9c 87       	std	Y+12, r25	; 0x0c
    136c:	8b 87       	std	Y+11, r24	; 0x0b
    136e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1370:	3e 85       	ldd	r19, Y+14	; 0x0e
    1372:	4f 85       	ldd	r20, Y+15	; 0x0f
    1374:	58 89       	ldd	r21, Y+16	; 0x10
    1376:	ed 88       	ldd	r14, Y+21	; 0x15
    1378:	fe 88       	ldd	r15, Y+22	; 0x16
    137a:	0f 89       	ldd	r16, Y+23	; 0x17
    137c:	18 8d       	ldd	r17, Y+24	; 0x18
    137e:	2e 15       	cp	r18, r14
    1380:	3f 05       	cpc	r19, r15
    1382:	40 07       	cpc	r20, r16
    1384:	51 07       	cpc	r21, r17
    1386:	38 f4       	brcc	.+14     	; 0x1396 <__divsf3+0xb6>
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	44 1f       	adc	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	9c 87       	std	Y+12, r25	; 0x0c
    1394:	8b 87       	std	Y+11, r24	; 0x0b
    1396:	6f e1       	ldi	r22, 0x1F	; 31
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	a1 2c       	mov	r10, r1
    139c:	b1 2c       	mov	r11, r1
    139e:	c1 2c       	mov	r12, r1
    13a0:	a0 e4       	ldi	r26, 0x40	; 64
    13a2:	da 2e       	mov	r13, r26
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	dc 01       	movw	r26, r24
    13aa:	2e 15       	cp	r18, r14
    13ac:	3f 05       	cpc	r19, r15
    13ae:	40 07       	cpc	r20, r16
    13b0:	51 07       	cpc	r21, r17
    13b2:	40 f0       	brcs	.+16     	; 0x13c4 <__divsf3+0xe4>
    13b4:	8a 29       	or	r24, r10
    13b6:	9b 29       	or	r25, r11
    13b8:	ac 29       	or	r26, r12
    13ba:	bd 29       	or	r27, r13
    13bc:	2e 19       	sub	r18, r14
    13be:	3f 09       	sbc	r19, r15
    13c0:	40 0b       	sbc	r20, r16
    13c2:	51 0b       	sbc	r21, r17
    13c4:	d6 94       	lsr	r13
    13c6:	c7 94       	ror	r12
    13c8:	b7 94       	ror	r11
    13ca:	a7 94       	ror	r10
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	44 1f       	adc	r20, r20
    13d2:	55 1f       	adc	r21, r21
    13d4:	61 50       	subi	r22, 0x01	; 1
    13d6:	70 40       	sbci	r23, 0x00	; 0
    13d8:	41 f7       	brne	.-48     	; 0x13aa <__divsf3+0xca>
    13da:	6f e7       	ldi	r22, 0x7F	; 127
    13dc:	e6 2e       	mov	r14, r22
    13de:	f1 2c       	mov	r15, r1
    13e0:	01 2d       	mov	r16, r1
    13e2:	11 2d       	mov	r17, r1
    13e4:	e8 22       	and	r14, r24
    13e6:	f9 22       	and	r15, r25
    13e8:	0a 23       	and	r16, r26
    13ea:	1b 23       	and	r17, r27
    13ec:	60 e4       	ldi	r22, 0x40	; 64
    13ee:	e6 16       	cp	r14, r22
    13f0:	f1 04       	cpc	r15, r1
    13f2:	01 05       	cpc	r16, r1
    13f4:	11 05       	cpc	r17, r1
    13f6:	61 f4       	brne	.+24     	; 0x1410 <__divsf3+0x130>
    13f8:	87 fd       	sbrc	r24, 7
    13fa:	0a c0       	rjmp	.+20     	; 0x1410 <__divsf3+0x130>
    13fc:	21 15       	cp	r18, r1
    13fe:	31 05       	cpc	r19, r1
    1400:	41 05       	cpc	r20, r1
    1402:	51 05       	cpc	r21, r1
    1404:	29 f0       	breq	.+10     	; 0x1410 <__divsf3+0x130>
    1406:	80 5c       	subi	r24, 0xC0	; 192
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	af 4f       	sbci	r26, 0xFF	; 255
    140c:	bf 4f       	sbci	r27, 0xFF	; 255
    140e:	80 78       	andi	r24, 0x80	; 128
    1410:	8d 87       	std	Y+13, r24	; 0x0d
    1412:	9e 87       	std	Y+14, r25	; 0x0e
    1414:	af 87       	std	Y+15, r26	; 0x0f
    1416:	b8 8b       	std	Y+16, r27	; 0x10
    1418:	8e 01       	movw	r16, r28
    141a:	07 5f       	subi	r16, 0xF7	; 247
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__divsf3+0x148>
    1420:	87 01       	movw	r16, r14
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <__divsf3+0x148>
    1424:	0f e7       	ldi	r16, 0x7F	; 127
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	c8 01       	movw	r24, r16
    142a:	fd d1       	rcall	.+1018   	; 0x1826 <__pack_f>
    142c:	68 96       	adiw	r28, 0x18	; 24
    142e:	ea e0       	ldi	r30, 0x0A	; 10
    1430:	d4 c3       	rjmp	.+1960   	; 0x1bda <__epilogue_restores__+0x10>

00001432 <__gtsf2>:
    1432:	a8 e1       	ldi	r26, 0x18	; 24
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ee e1       	ldi	r30, 0x1E	; 30
    1438:	fa e0       	ldi	r31, 0x0A	; 10
    143a:	b7 c3       	rjmp	.+1902   	; 0x1baa <__prologue_saves__+0x18>
    143c:	69 83       	std	Y+1, r22	; 0x01
    143e:	7a 83       	std	Y+2, r23	; 0x02
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	2d 83       	std	Y+5, r18	; 0x05
    1446:	3e 83       	std	Y+6, r19	; 0x06
    1448:	4f 83       	std	Y+7, r20	; 0x07
    144a:	58 87       	std	Y+8, r21	; 0x08
    144c:	8e 01       	movw	r16, r28
    144e:	07 5f       	subi	r16, 0xF7	; 247
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	ce 01       	movw	r24, r28
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	b8 01       	movw	r22, r16
    1458:	b3 d2       	rcall	.+1382   	; 0x19c0 <__unpack_f>
    145a:	81 e1       	ldi	r24, 0x11	; 17
    145c:	e8 2e       	mov	r14, r24
    145e:	f1 2c       	mov	r15, r1
    1460:	ec 0e       	add	r14, r28
    1462:	fd 1e       	adc	r15, r29
    1464:	ce 01       	movw	r24, r28
    1466:	05 96       	adiw	r24, 0x05	; 5
    1468:	b7 01       	movw	r22, r14
    146a:	aa d2       	rcall	.+1364   	; 0x19c0 <__unpack_f>
    146c:	89 85       	ldd	r24, Y+9	; 0x09
    146e:	82 30       	cpi	r24, 0x02	; 2
    1470:	38 f0       	brcs	.+14     	; 0x1480 <__gtsf2+0x4e>
    1472:	89 89       	ldd	r24, Y+17	; 0x11
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	20 f0       	brcs	.+8      	; 0x1480 <__gtsf2+0x4e>
    1478:	c8 01       	movw	r24, r16
    147a:	b7 01       	movw	r22, r14
    147c:	0a d3       	rcall	.+1556   	; 0x1a92 <__fpcmp_parts_f>
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <__gtsf2+0x50>
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	68 96       	adiw	r28, 0x18	; 24
    1484:	e6 e0       	ldi	r30, 0x06	; 6
    1486:	ad c3       	rjmp	.+1882   	; 0x1be2 <__epilogue_restores__+0x18>

00001488 <__gesf2>:
    1488:	a8 e1       	ldi	r26, 0x18	; 24
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e9 e4       	ldi	r30, 0x49	; 73
    148e:	fa e0       	ldi	r31, 0x0A	; 10
    1490:	8c c3       	rjmp	.+1816   	; 0x1baa <__prologue_saves__+0x18>
    1492:	69 83       	std	Y+1, r22	; 0x01
    1494:	7a 83       	std	Y+2, r23	; 0x02
    1496:	8b 83       	std	Y+3, r24	; 0x03
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	2d 83       	std	Y+5, r18	; 0x05
    149c:	3e 83       	std	Y+6, r19	; 0x06
    149e:	4f 83       	std	Y+7, r20	; 0x07
    14a0:	58 87       	std	Y+8, r21	; 0x08
    14a2:	8e 01       	movw	r16, r28
    14a4:	07 5f       	subi	r16, 0xF7	; 247
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	ce 01       	movw	r24, r28
    14aa:	01 96       	adiw	r24, 0x01	; 1
    14ac:	b8 01       	movw	r22, r16
    14ae:	88 d2       	rcall	.+1296   	; 0x19c0 <__unpack_f>
    14b0:	81 e1       	ldi	r24, 0x11	; 17
    14b2:	e8 2e       	mov	r14, r24
    14b4:	f1 2c       	mov	r15, r1
    14b6:	ec 0e       	add	r14, r28
    14b8:	fd 1e       	adc	r15, r29
    14ba:	ce 01       	movw	r24, r28
    14bc:	05 96       	adiw	r24, 0x05	; 5
    14be:	b7 01       	movw	r22, r14
    14c0:	7f d2       	rcall	.+1278   	; 0x19c0 <__unpack_f>
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	38 f0       	brcs	.+14     	; 0x14d6 <__gesf2+0x4e>
    14c8:	89 89       	ldd	r24, Y+17	; 0x11
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__gesf2+0x4e>
    14ce:	c8 01       	movw	r24, r16
    14d0:	b7 01       	movw	r22, r14
    14d2:	df d2       	rcall	.+1470   	; 0x1a92 <__fpcmp_parts_f>
    14d4:	01 c0       	rjmp	.+2      	; 0x14d8 <__gesf2+0x50>
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	68 96       	adiw	r28, 0x18	; 24
    14da:	e6 e0       	ldi	r30, 0x06	; 6
    14dc:	82 c3       	rjmp	.+1796   	; 0x1be2 <__epilogue_restores__+0x18>

000014de <__ltsf2>:
    14de:	a8 e1       	ldi	r26, 0x18	; 24
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e7       	ldi	r30, 0x74	; 116
    14e4:	fa e0       	ldi	r31, 0x0A	; 10
    14e6:	61 c3       	rjmp	.+1730   	; 0x1baa <__prologue_saves__+0x18>
    14e8:	69 83       	std	Y+1, r22	; 0x01
    14ea:	7a 83       	std	Y+2, r23	; 0x02
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	2d 83       	std	Y+5, r18	; 0x05
    14f2:	3e 83       	std	Y+6, r19	; 0x06
    14f4:	4f 83       	std	Y+7, r20	; 0x07
    14f6:	58 87       	std	Y+8, r21	; 0x08
    14f8:	8e 01       	movw	r16, r28
    14fa:	07 5f       	subi	r16, 0xF7	; 247
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	ce 01       	movw	r24, r28
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	b8 01       	movw	r22, r16
    1504:	5d d2       	rcall	.+1210   	; 0x19c0 <__unpack_f>
    1506:	81 e1       	ldi	r24, 0x11	; 17
    1508:	e8 2e       	mov	r14, r24
    150a:	f1 2c       	mov	r15, r1
    150c:	ec 0e       	add	r14, r28
    150e:	fd 1e       	adc	r15, r29
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b7 01       	movw	r22, r14
    1516:	54 d2       	rcall	.+1192   	; 0x19c0 <__unpack_f>
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	38 f0       	brcs	.+14     	; 0x152c <__ltsf2+0x4e>
    151e:	89 89       	ldd	r24, Y+17	; 0x11
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	20 f0       	brcs	.+8      	; 0x152c <__ltsf2+0x4e>
    1524:	c8 01       	movw	r24, r16
    1526:	b7 01       	movw	r22, r14
    1528:	b4 d2       	rcall	.+1384   	; 0x1a92 <__fpcmp_parts_f>
    152a:	01 c0       	rjmp	.+2      	; 0x152e <__ltsf2+0x50>
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	68 96       	adiw	r28, 0x18	; 24
    1530:	e6 e0       	ldi	r30, 0x06	; 6
    1532:	57 c3       	rjmp	.+1710   	; 0x1be2 <__epilogue_restores__+0x18>

00001534 <__floatsisf>:
    1534:	a8 e0       	ldi	r26, 0x08	; 8
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ef e9       	ldi	r30, 0x9F	; 159
    153a:	fa e0       	ldi	r31, 0x0A	; 10
    153c:	36 c3       	rjmp	.+1644   	; 0x1baa <__prologue_saves__+0x18>
    153e:	7b 01       	movw	r14, r22
    1540:	8c 01       	movw	r16, r24
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	d8 01       	movw	r26, r16
    1548:	c7 01       	movw	r24, r14
    154a:	88 27       	eor	r24, r24
    154c:	b7 fd       	sbrc	r27, 7
    154e:	83 95       	inc	r24
    1550:	99 27       	eor	r25, r25
    1552:	aa 27       	eor	r26, r26
    1554:	bb 27       	eor	r27, r27
    1556:	28 2f       	mov	r18, r24
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	e1 14       	cp	r14, r1
    155c:	f1 04       	cpc	r15, r1
    155e:	01 05       	cpc	r16, r1
    1560:	11 05       	cpc	r17, r1
    1562:	19 f4       	brne	.+6      	; 0x156a <__floatsisf+0x36>
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	36 c0       	rjmp	.+108    	; 0x15d6 <__floatsisf+0xa2>
    156a:	8e e1       	ldi	r24, 0x1E	; 30
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	22 23       	and	r18, r18
    1574:	89 f0       	breq	.+34     	; 0x1598 <__floatsisf+0x64>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	e8 16       	cp	r14, r24
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	f8 06       	cpc	r15, r24
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	08 07       	cpc	r16, r24
    1582:	80 e8       	ldi	r24, 0x80	; 128
    1584:	18 07       	cpc	r17, r24
    1586:	59 f1       	breq	.+86     	; 0x15de <__floatsisf+0xaa>
    1588:	10 95       	com	r17
    158a:	00 95       	com	r16
    158c:	f0 94       	com	r15
    158e:	e0 94       	com	r14
    1590:	e1 1c       	adc	r14, r1
    1592:	f1 1c       	adc	r15, r1
    1594:	01 1d       	adc	r16, r1
    1596:	11 1d       	adc	r17, r1
    1598:	ed 82       	std	Y+5, r14	; 0x05
    159a:	fe 82       	std	Y+6, r15	; 0x06
    159c:	0f 83       	std	Y+7, r16	; 0x07
    159e:	18 87       	std	Y+8, r17	; 0x08
    15a0:	c8 01       	movw	r24, r16
    15a2:	b7 01       	movw	r22, r14
    15a4:	e6 d0       	rcall	.+460    	; 0x1772 <__clzsi2>
    15a6:	9c 01       	movw	r18, r24
    15a8:	21 50       	subi	r18, 0x01	; 1
    15aa:	30 40       	sbci	r19, 0x00	; 0
    15ac:	12 16       	cp	r1, r18
    15ae:	13 06       	cpc	r1, r19
    15b0:	94 f4       	brge	.+36     	; 0x15d6 <__floatsisf+0xa2>
    15b2:	02 2e       	mov	r0, r18
    15b4:	04 c0       	rjmp	.+8      	; 0x15be <__floatsisf+0x8a>
    15b6:	ee 0c       	add	r14, r14
    15b8:	ff 1c       	adc	r15, r15
    15ba:	00 1f       	adc	r16, r16
    15bc:	11 1f       	adc	r17, r17
    15be:	0a 94       	dec	r0
    15c0:	d2 f7       	brpl	.-12     	; 0x15b6 <__floatsisf+0x82>
    15c2:	ed 82       	std	Y+5, r14	; 0x05
    15c4:	fe 82       	std	Y+6, r15	; 0x06
    15c6:	0f 83       	std	Y+7, r16	; 0x07
    15c8:	18 87       	std	Y+8, r17	; 0x08
    15ca:	8e e1       	ldi	r24, 0x1E	; 30
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	82 1b       	sub	r24, r18
    15d0:	93 0b       	sbc	r25, r19
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	25 d1       	rcall	.+586    	; 0x1826 <__pack_f>
    15dc:	04 c0       	rjmp	.+8      	; 0x15e6 <__floatsisf+0xb2>
    15de:	60 e0       	ldi	r22, 0x00	; 0
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	9f ec       	ldi	r25, 0xCF	; 207
    15e6:	28 96       	adiw	r28, 0x08	; 8
    15e8:	e6 e0       	ldi	r30, 0x06	; 6
    15ea:	fb c2       	rjmp	.+1526   	; 0x1be2 <__epilogue_restores__+0x18>

000015ec <__fixsfsi>:
    15ec:	ac e0       	ldi	r26, 0x0C	; 12
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	eb ef       	ldi	r30, 0xFB	; 251
    15f2:	fa e0       	ldi	r31, 0x0A	; 10
    15f4:	de c2       	rjmp	.+1468   	; 0x1bb2 <__prologue_saves__+0x20>
    15f6:	69 83       	std	Y+1, r22	; 0x01
    15f8:	7a 83       	std	Y+2, r23	; 0x02
    15fa:	8b 83       	std	Y+3, r24	; 0x03
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	ce 01       	movw	r24, r28
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	be 01       	movw	r22, r28
    1604:	6b 5f       	subi	r22, 0xFB	; 251
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	db d1       	rcall	.+950    	; 0x19c0 <__unpack_f>
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	81 f1       	breq	.+96     	; 0x1670 <__fixsfsi+0x84>
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	70 f1       	brcs	.+92     	; 0x1670 <__fixsfsi+0x84>
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	21 f4       	brne	.+8      	; 0x1620 <__fixsfsi+0x34>
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	88 23       	and	r24, r24
    161c:	69 f1       	breq	.+90     	; 0x1678 <__fixsfsi+0x8c>
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <__fixsfsi+0x48>
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	38 85       	ldd	r19, Y+8	; 0x08
    1624:	37 fd       	sbrc	r19, 7
    1626:	24 c0       	rjmp	.+72     	; 0x1670 <__fixsfsi+0x84>
    1628:	6e 81       	ldd	r22, Y+6	; 0x06
    162a:	2f 31       	cpi	r18, 0x1F	; 31
    162c:	31 05       	cpc	r19, r1
    162e:	3c f0       	brlt	.+14     	; 0x163e <__fixsfsi+0x52>
    1630:	66 23       	and	r22, r22
    1632:	11 f1       	breq	.+68     	; 0x1678 <__fixsfsi+0x8c>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e8       	ldi	r21, 0x80	; 128
    163c:	21 c0       	rjmp	.+66     	; 0x1680 <__fixsfsi+0x94>
    163e:	8e e1       	ldi	r24, 0x1E	; 30
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	82 1b       	sub	r24, r18
    1644:	93 0b       	sbc	r25, r19
    1646:	29 85       	ldd	r18, Y+9	; 0x09
    1648:	3a 85       	ldd	r19, Y+10	; 0x0a
    164a:	4b 85       	ldd	r20, Y+11	; 0x0b
    164c:	5c 85       	ldd	r21, Y+12	; 0x0c
    164e:	04 c0       	rjmp	.+8      	; 0x1658 <__fixsfsi+0x6c>
    1650:	56 95       	lsr	r21
    1652:	47 95       	ror	r20
    1654:	37 95       	ror	r19
    1656:	27 95       	ror	r18
    1658:	8a 95       	dec	r24
    165a:	d2 f7       	brpl	.-12     	; 0x1650 <__fixsfsi+0x64>
    165c:	66 23       	and	r22, r22
    165e:	81 f0       	breq	.+32     	; 0x1680 <__fixsfsi+0x94>
    1660:	50 95       	com	r21
    1662:	40 95       	com	r20
    1664:	30 95       	com	r19
    1666:	21 95       	neg	r18
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	4f 4f       	sbci	r20, 0xFF	; 255
    166c:	5f 4f       	sbci	r21, 0xFF	; 255
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <__fixsfsi+0x94>
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	a9 01       	movw	r20, r18
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <__fixsfsi+0x94>
    1678:	2f ef       	ldi	r18, 0xFF	; 255
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f ef       	ldi	r20, 0xFF	; 255
    167e:	5f e7       	ldi	r21, 0x7F	; 127
    1680:	b9 01       	movw	r22, r18
    1682:	ca 01       	movw	r24, r20
    1684:	2c 96       	adiw	r28, 0x0c	; 12
    1686:	e2 e0       	ldi	r30, 0x02	; 2
    1688:	b0 c2       	rjmp	.+1376   	; 0x1bea <__epilogue_restores__+0x20>

0000168a <__floatunsisf>:
    168a:	a8 e0       	ldi	r26, 0x08	; 8
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ea e4       	ldi	r30, 0x4A	; 74
    1690:	fb e0       	ldi	r31, 0x0B	; 11
    1692:	89 c2       	rjmp	.+1298   	; 0x1ba6 <__prologue_saves__+0x14>
    1694:	7b 01       	movw	r14, r22
    1696:	8c 01       	movw	r16, r24
    1698:	1a 82       	std	Y+2, r1	; 0x02
    169a:	61 15       	cp	r22, r1
    169c:	71 05       	cpc	r23, r1
    169e:	81 05       	cpc	r24, r1
    16a0:	91 05       	cpc	r25, r1
    16a2:	19 f4       	brne	.+6      	; 0x16aa <__floatunsisf+0x20>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	5e c0       	rjmp	.+188    	; 0x1766 <__floatunsisf+0xdc>
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	8e e1       	ldi	r24, 0x1E	; 30
    16b0:	c8 2e       	mov	r12, r24
    16b2:	d1 2c       	mov	r13, r1
    16b4:	dc 82       	std	Y+4, r13	; 0x04
    16b6:	cb 82       	std	Y+3, r12	; 0x03
    16b8:	ed 82       	std	Y+5, r14	; 0x05
    16ba:	fe 82       	std	Y+6, r15	; 0x06
    16bc:	0f 83       	std	Y+7, r16	; 0x07
    16be:	18 87       	std	Y+8, r17	; 0x08
    16c0:	c8 01       	movw	r24, r16
    16c2:	b7 01       	movw	r22, r14
    16c4:	56 d0       	rcall	.+172    	; 0x1772 <__clzsi2>
    16c6:	fc 01       	movw	r30, r24
    16c8:	31 97       	sbiw	r30, 0x01	; 1
    16ca:	f7 ff       	sbrs	r31, 7
    16cc:	3a c0       	rjmp	.+116    	; 0x1742 <__floatunsisf+0xb8>
    16ce:	aa 27       	eor	r26, r26
    16d0:	bb 27       	eor	r27, r27
    16d2:	ae 1b       	sub	r26, r30
    16d4:	bf 0b       	sbc	r27, r31
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	0a 2e       	mov	r0, r26
    16e0:	04 c0       	rjmp	.+8      	; 0x16ea <__floatunsisf+0x60>
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	44 1f       	adc	r20, r20
    16e8:	55 1f       	adc	r21, r21
    16ea:	0a 94       	dec	r0
    16ec:	d2 f7       	brpl	.-12     	; 0x16e2 <__floatunsisf+0x58>
    16ee:	21 50       	subi	r18, 0x01	; 1
    16f0:	30 40       	sbci	r19, 0x00	; 0
    16f2:	40 40       	sbci	r20, 0x00	; 0
    16f4:	50 40       	sbci	r21, 0x00	; 0
    16f6:	2e 21       	and	r18, r14
    16f8:	3f 21       	and	r19, r15
    16fa:	40 23       	and	r20, r16
    16fc:	51 23       	and	r21, r17
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	21 15       	cp	r18, r1
    1708:	31 05       	cpc	r19, r1
    170a:	41 05       	cpc	r20, r1
    170c:	51 05       	cpc	r21, r1
    170e:	19 f4       	brne	.+6      	; 0x1716 <__floatunsisf+0x8c>
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	cb 01       	movw	r24, r22
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <__floatunsisf+0x96>
    1718:	16 95       	lsr	r17
    171a:	07 95       	ror	r16
    171c:	f7 94       	ror	r15
    171e:	e7 94       	ror	r14
    1720:	aa 95       	dec	r26
    1722:	d2 f7       	brpl	.-12     	; 0x1718 <__floatunsisf+0x8e>
    1724:	e6 2a       	or	r14, r22
    1726:	f7 2a       	or	r15, r23
    1728:	08 2b       	or	r16, r24
    172a:	19 2b       	or	r17, r25
    172c:	ed 82       	std	Y+5, r14	; 0x05
    172e:	fe 82       	std	Y+6, r15	; 0x06
    1730:	0f 83       	std	Y+7, r16	; 0x07
    1732:	18 87       	std	Y+8, r17	; 0x08
    1734:	8e e1       	ldi	r24, 0x1E	; 30
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	8e 1b       	sub	r24, r30
    173a:	9f 0b       	sbc	r25, r31
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    1740:	12 c0       	rjmp	.+36     	; 0x1766 <__floatunsisf+0xdc>
    1742:	30 97       	sbiw	r30, 0x00	; 0
    1744:	81 f0       	breq	.+32     	; 0x1766 <__floatunsisf+0xdc>
    1746:	0e 2e       	mov	r0, r30
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__floatunsisf+0xc8>
    174a:	ee 0c       	add	r14, r14
    174c:	ff 1c       	adc	r15, r15
    174e:	00 1f       	adc	r16, r16
    1750:	11 1f       	adc	r17, r17
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <__floatunsisf+0xc0>
    1756:	ed 82       	std	Y+5, r14	; 0x05
    1758:	fe 82       	std	Y+6, r15	; 0x06
    175a:	0f 83       	std	Y+7, r16	; 0x07
    175c:	18 87       	std	Y+8, r17	; 0x08
    175e:	ce 1a       	sub	r12, r30
    1760:	df 0a       	sbc	r13, r31
    1762:	dc 82       	std	Y+4, r13	; 0x04
    1764:	cb 82       	std	Y+3, r12	; 0x03
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	5d d0       	rcall	.+186    	; 0x1826 <__pack_f>
    176c:	28 96       	adiw	r28, 0x08	; 8
    176e:	e8 e0       	ldi	r30, 0x08	; 8
    1770:	36 c2       	rjmp	.+1132   	; 0x1bde <__epilogue_restores__+0x14>

00001772 <__clzsi2>:
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	7b 01       	movw	r14, r22
    1784:	8c 01       	movw	r16, r24
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	e8 16       	cp	r14, r24
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	f8 06       	cpc	r15, r24
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	08 07       	cpc	r16, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	18 07       	cpc	r17, r24
    1796:	58 f4       	brcc	.+22     	; 0x17ae <__clzsi2+0x3c>
    1798:	ef ef       	ldi	r30, 0xFF	; 255
    179a:	ee 16       	cp	r14, r30
    179c:	f1 04       	cpc	r15, r1
    179e:	01 05       	cpc	r16, r1
    17a0:	11 05       	cpc	r17, r1
    17a2:	09 f0       	breq	.+2      	; 0x17a6 <__clzsi2+0x34>
    17a4:	90 f4       	brcc	.+36     	; 0x17ca <__clzsi2+0x58>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	dc 01       	movw	r26, r24
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <__clzsi2+0x6a>
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	ef 16       	cp	r14, r31
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	ff 06       	cpc	r15, r31
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	0f 07       	cpc	r16, r31
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	1f 07       	cpc	r17, r31
    17be:	50 f4       	brcc	.+20     	; 0x17d4 <__clzsi2+0x62>
    17c0:	80 e1       	ldi	r24, 0x10	; 16
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <__clzsi2+0x6a>
    17ca:	88 e0       	ldi	r24, 0x08	; 8
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__clzsi2+0x6a>
    17d4:	88 e1       	ldi	r24, 0x18	; 24
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	a0 e0       	ldi	r26, 0x00	; 0
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	20 e2       	ldi	r18, 0x20	; 32
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e0       	ldi	r20, 0x00	; 0
    17e2:	50 e0       	ldi	r21, 0x00	; 0
    17e4:	28 1b       	sub	r18, r24
    17e6:	39 0b       	sbc	r19, r25
    17e8:	4a 0b       	sbc	r20, r26
    17ea:	5b 0b       	sbc	r21, r27
    17ec:	57 01       	movw	r10, r14
    17ee:	68 01       	movw	r12, r16
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <__clzsi2+0x88>
    17f2:	d6 94       	lsr	r13
    17f4:	c7 94       	ror	r12
    17f6:	b7 94       	ror	r11
    17f8:	a7 94       	ror	r10
    17fa:	8a 95       	dec	r24
    17fc:	d2 f7       	brpl	.-12     	; 0x17f2 <__clzsi2+0x80>
    17fe:	d6 01       	movw	r26, r12
    1800:	c5 01       	movw	r24, r10
    1802:	89 57       	subi	r24, 0x79	; 121
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	28 1b       	sub	r18, r24
    180c:	31 09       	sbc	r19, r1
    180e:	41 09       	sbc	r20, r1
    1810:	51 09       	sbc	r21, r1
    1812:	c9 01       	movw	r24, r18
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	08 95       	ret

00001826 <__pack_f>:
    1826:	ef 92       	push	r14
    1828:	ff 92       	push	r15
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	fc 01       	movw	r30, r24
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	46 81       	ldd	r20, Z+6	; 0x06
    183a:	57 81       	ldd	r21, Z+7	; 0x07
    183c:	61 81       	ldd	r22, Z+1	; 0x01
    183e:	80 81       	ld	r24, Z
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	20 f4       	brcc	.+8      	; 0x184c <__pack_f+0x26>
    1844:	40 61       	ori	r20, 0x10	; 16
    1846:	ef ef       	ldi	r30, 0xFF	; 255
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	a3 c0       	rjmp	.+326    	; 0x1992 <__pack_f+0x16c>
    184c:	84 30       	cpi	r24, 0x04	; 4
    184e:	09 f4       	brne	.+2      	; 0x1852 <__pack_f+0x2c>
    1850:	9b c0       	rjmp	.+310    	; 0x1988 <__pack_f+0x162>
    1852:	82 30       	cpi	r24, 0x02	; 2
    1854:	09 f4       	brne	.+2      	; 0x1858 <__pack_f+0x32>
    1856:	92 c0       	rjmp	.+292    	; 0x197c <__pack_f+0x156>
    1858:	21 15       	cp	r18, r1
    185a:	31 05       	cpc	r19, r1
    185c:	41 05       	cpc	r20, r1
    185e:	51 05       	cpc	r21, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <__pack_f+0x3e>
    1862:	8f c0       	rjmp	.+286    	; 0x1982 <__pack_f+0x15c>
    1864:	02 80       	ldd	r0, Z+2	; 0x02
    1866:	f3 81       	ldd	r31, Z+3	; 0x03
    1868:	e0 2d       	mov	r30, r0
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	e2 38       	cpi	r30, 0x82	; 130
    186e:	f8 07       	cpc	r31, r24
    1870:	0c f0       	brlt	.+2      	; 0x1874 <__pack_f+0x4e>
    1872:	5a c0       	rjmp	.+180    	; 0x1928 <__pack_f+0x102>
    1874:	c2 e8       	ldi	r28, 0x82	; 130
    1876:	df ef       	ldi	r29, 0xFF	; 255
    1878:	ce 1b       	sub	r28, r30
    187a:	df 0b       	sbc	r29, r31
    187c:	ca 31       	cpi	r28, 0x1A	; 26
    187e:	d1 05       	cpc	r29, r1
    1880:	6c f5       	brge	.+90     	; 0x18dc <__pack_f+0xb6>
    1882:	79 01       	movw	r14, r18
    1884:	8a 01       	movw	r16, r20
    1886:	0c 2e       	mov	r0, r28
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <__pack_f+0x6c>
    188a:	16 95       	lsr	r17
    188c:	07 95       	ror	r16
    188e:	f7 94       	ror	r15
    1890:	e7 94       	ror	r14
    1892:	0a 94       	dec	r0
    1894:	d2 f7       	brpl	.-12     	; 0x188a <__pack_f+0x64>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	0c 2e       	mov	r0, r28
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__pack_f+0x84>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	aa 1f       	adc	r26, r26
    18a8:	bb 1f       	adc	r27, r27
    18aa:	0a 94       	dec	r0
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__pack_f+0x7c>
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	a1 09       	sbc	r26, r1
    18b2:	b1 09       	sbc	r27, r1
    18b4:	82 23       	and	r24, r18
    18b6:	93 23       	and	r25, r19
    18b8:	a4 23       	and	r26, r20
    18ba:	b5 23       	and	r27, r21
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	a1 05       	cpc	r26, r1
    18c8:	b1 05       	cpc	r27, r1
    18ca:	19 f4       	brne	.+6      	; 0x18d2 <__pack_f+0xac>
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	2e 29       	or	r18, r14
    18d4:	3f 29       	or	r19, r15
    18d6:	40 2b       	or	r20, r16
    18d8:	51 2b       	or	r21, r17
    18da:	03 c0       	rjmp	.+6      	; 0x18e2 <__pack_f+0xbc>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	da 01       	movw	r26, r20
    18e4:	c9 01       	movw	r24, r18
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	a0 70       	andi	r26, 0x00	; 0
    18ec:	b0 70       	andi	r27, 0x00	; 0
    18ee:	80 34       	cpi	r24, 0x40	; 64
    18f0:	91 05       	cpc	r25, r1
    18f2:	a1 05       	cpc	r26, r1
    18f4:	b1 05       	cpc	r27, r1
    18f6:	39 f4       	brne	.+14     	; 0x1906 <__pack_f+0xe0>
    18f8:	27 ff       	sbrs	r18, 7
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <__pack_f+0xe8>
    18fc:	20 5c       	subi	r18, 0xC0	; 192
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	04 c0       	rjmp	.+8      	; 0x190e <__pack_f+0xe8>
    1906:	21 5c       	subi	r18, 0xC1	; 193
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	4f 4f       	sbci	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	e1 e0       	ldi	r30, 0x01	; 1
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	20 30       	cpi	r18, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	38 07       	cpc	r19, r24
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	48 07       	cpc	r20, r24
    191c:	80 e4       	ldi	r24, 0x40	; 64
    191e:	58 07       	cpc	r21, r24
    1920:	28 f5       	brcc	.+74     	; 0x196c <__pack_f+0x146>
    1922:	e0 e0       	ldi	r30, 0x00	; 0
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	22 c0       	rjmp	.+68     	; 0x196c <__pack_f+0x146>
    1928:	e0 38       	cpi	r30, 0x80	; 128
    192a:	f1 05       	cpc	r31, r1
    192c:	6c f5       	brge	.+90     	; 0x1988 <__pack_f+0x162>
    192e:	e1 58       	subi	r30, 0x81	; 129
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	da 01       	movw	r26, r20
    1934:	c9 01       	movw	r24, r18
    1936:	8f 77       	andi	r24, 0x7F	; 127
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	a0 70       	andi	r26, 0x00	; 0
    193c:	b0 70       	andi	r27, 0x00	; 0
    193e:	80 34       	cpi	r24, 0x40	; 64
    1940:	91 05       	cpc	r25, r1
    1942:	a1 05       	cpc	r26, r1
    1944:	b1 05       	cpc	r27, r1
    1946:	39 f4       	brne	.+14     	; 0x1956 <__pack_f+0x130>
    1948:	27 ff       	sbrs	r18, 7
    194a:	09 c0       	rjmp	.+18     	; 0x195e <__pack_f+0x138>
    194c:	20 5c       	subi	r18, 0xC0	; 192
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
    1950:	4f 4f       	sbci	r20, 0xFF	; 255
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	04 c0       	rjmp	.+8      	; 0x195e <__pack_f+0x138>
    1956:	21 5c       	subi	r18, 0xC1	; 193
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	4f 4f       	sbci	r20, 0xFF	; 255
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	57 ff       	sbrs	r21, 7
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__pack_f+0x146>
    1962:	56 95       	lsr	r21
    1964:	47 95       	ror	r20
    1966:	37 95       	ror	r19
    1968:	27 95       	ror	r18
    196a:	31 96       	adiw	r30, 0x01	; 1
    196c:	87 e0       	ldi	r24, 0x07	; 7
    196e:	56 95       	lsr	r21
    1970:	47 95       	ror	r20
    1972:	37 95       	ror	r19
    1974:	27 95       	ror	r18
    1976:	8a 95       	dec	r24
    1978:	d1 f7       	brne	.-12     	; 0x196e <__pack_f+0x148>
    197a:	0b c0       	rjmp	.+22     	; 0x1992 <__pack_f+0x16c>
    197c:	e0 e0       	ldi	r30, 0x00	; 0
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	05 c0       	rjmp	.+10     	; 0x198c <__pack_f+0x166>
    1982:	e0 e0       	ldi	r30, 0x00	; 0
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	05 c0       	rjmp	.+10     	; 0x1992 <__pack_f+0x16c>
    1988:	ef ef       	ldi	r30, 0xFF	; 255
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	8e 2f       	mov	r24, r30
    1994:	87 95       	ror	r24
    1996:	88 27       	eor	r24, r24
    1998:	87 95       	ror	r24
    199a:	94 2f       	mov	r25, r20
    199c:	9f 77       	andi	r25, 0x7F	; 127
    199e:	67 95       	ror	r22
    19a0:	66 27       	eor	r22, r22
    19a2:	67 95       	ror	r22
    19a4:	e6 95       	lsr	r30
    19a6:	e2 2e       	mov	r14, r18
    19a8:	a9 2f       	mov	r26, r25
    19aa:	a8 2b       	or	r26, r24
    19ac:	fe 2f       	mov	r31, r30
    19ae:	f6 2b       	or	r31, r22
    19b0:	62 2f       	mov	r22, r18
    19b2:	73 2f       	mov	r23, r19
    19b4:	8a 2f       	mov	r24, r26
    19b6:	9f 2f       	mov	r25, r31
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	e6 e0       	ldi	r30, 0x06	; 6
    19be:	11 c1       	rjmp	.+546    	; 0x1be2 <__epilogue_restores__+0x18>

000019c0 <__unpack_f>:
    19c0:	dc 01       	movw	r26, r24
    19c2:	fb 01       	movw	r30, r22
    19c4:	2c 91       	ld	r18, X
    19c6:	11 96       	adiw	r26, 0x01	; 1
    19c8:	3c 91       	ld	r19, X
    19ca:	11 97       	sbiw	r26, 0x01	; 1
    19cc:	12 96       	adiw	r26, 0x02	; 2
    19ce:	8c 91       	ld	r24, X
    19d0:	12 97       	sbiw	r26, 0x02	; 2
    19d2:	48 2f       	mov	r20, r24
    19d4:	4f 77       	andi	r20, 0x7F	; 127
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	98 2f       	mov	r25, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	99 27       	eor	r25, r25
    19de:	99 1f       	adc	r25, r25
    19e0:	13 96       	adiw	r26, 0x03	; 3
    19e2:	6c 91       	ld	r22, X
    19e4:	13 97       	sbiw	r26, 0x03	; 3
    19e6:	86 2f       	mov	r24, r22
    19e8:	88 0f       	add	r24, r24
    19ea:	89 2b       	or	r24, r25
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	66 1f       	adc	r22, r22
    19f0:	66 27       	eor	r22, r22
    19f2:	66 1f       	adc	r22, r22
    19f4:	61 83       	std	Z+1, r22	; 0x01
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	39 f5       	brne	.+78     	; 0x1a48 <__unpack_f+0x88>
    19fa:	21 15       	cp	r18, r1
    19fc:	31 05       	cpc	r19, r1
    19fe:	41 05       	cpc	r20, r1
    1a00:	51 05       	cpc	r21, r1
    1a02:	11 f4       	brne	.+4      	; 0x1a08 <__unpack_f+0x48>
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	29 c0       	rjmp	.+82     	; 0x1a5a <__unpack_f+0x9a>
    1a08:	82 e8       	ldi	r24, 0x82	; 130
    1a0a:	9f ef       	ldi	r25, 0xFF	; 255
    1a0c:	93 83       	std	Z+3, r25	; 0x03
    1a0e:	82 83       	std	Z+2, r24	; 0x02
    1a10:	67 e0       	ldi	r22, 0x07	; 7
    1a12:	22 0f       	add	r18, r18
    1a14:	33 1f       	adc	r19, r19
    1a16:	44 1f       	adc	r20, r20
    1a18:	55 1f       	adc	r21, r21
    1a1a:	6a 95       	dec	r22
    1a1c:	d1 f7       	brne	.-12     	; 0x1a12 <__unpack_f+0x52>
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	80 83       	st	Z, r24
    1a22:	09 c0       	rjmp	.+18     	; 0x1a36 <__unpack_f+0x76>
    1a24:	22 0f       	add	r18, r18
    1a26:	33 1f       	adc	r19, r19
    1a28:	44 1f       	adc	r20, r20
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	82 81       	ldd	r24, Z+2	; 0x02
    1a2e:	93 81       	ldd	r25, Z+3	; 0x03
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	93 83       	std	Z+3, r25	; 0x03
    1a34:	82 83       	std	Z+2, r24	; 0x02
    1a36:	20 30       	cpi	r18, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	38 07       	cpc	r19, r24
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	48 07       	cpc	r20, r24
    1a40:	80 e4       	ldi	r24, 0x40	; 64
    1a42:	58 07       	cpc	r21, r24
    1a44:	78 f3       	brcs	.-34     	; 0x1a24 <__unpack_f+0x64>
    1a46:	20 c0       	rjmp	.+64     	; 0x1a88 <__unpack_f+0xc8>
    1a48:	8f 3f       	cpi	r24, 0xFF	; 255
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	79 f4       	brne	.+30     	; 0x1a6c <__unpack_f+0xac>
    1a4e:	21 15       	cp	r18, r1
    1a50:	31 05       	cpc	r19, r1
    1a52:	41 05       	cpc	r20, r1
    1a54:	51 05       	cpc	r21, r1
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <__unpack_f+0x9e>
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	80 83       	st	Z, r24
    1a5c:	08 95       	ret
    1a5e:	44 ff       	sbrs	r20, 4
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <__unpack_f+0xa8>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 83       	st	Z, r24
    1a66:	10 c0       	rjmp	.+32     	; 0x1a88 <__unpack_f+0xc8>
    1a68:	10 82       	st	Z, r1
    1a6a:	0e c0       	rjmp	.+28     	; 0x1a88 <__unpack_f+0xc8>
    1a6c:	8f 57       	subi	r24, 0x7F	; 127
    1a6e:	90 40       	sbci	r25, 0x00	; 0
    1a70:	93 83       	std	Z+3, r25	; 0x03
    1a72:	82 83       	std	Z+2, r24	; 0x02
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	80 83       	st	Z, r24
    1a78:	87 e0       	ldi	r24, 0x07	; 7
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	44 1f       	adc	r20, r20
    1a80:	55 1f       	adc	r21, r21
    1a82:	8a 95       	dec	r24
    1a84:	d1 f7       	brne	.-12     	; 0x1a7a <__unpack_f+0xba>
    1a86:	50 64       	ori	r21, 0x40	; 64
    1a88:	24 83       	std	Z+4, r18	; 0x04
    1a8a:	35 83       	std	Z+5, r19	; 0x05
    1a8c:	46 83       	std	Z+6, r20	; 0x06
    1a8e:	57 83       	std	Z+7, r21	; 0x07
    1a90:	08 95       	ret

00001a92 <__fpcmp_parts_f>:
    1a92:	fc 01       	movw	r30, r24
    1a94:	db 01       	movw	r26, r22
    1a96:	90 81       	ld	r25, Z
    1a98:	92 30       	cpi	r25, 0x02	; 2
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <__fpcmp_parts_f+0xc>
    1a9c:	49 c0       	rjmp	.+146    	; 0x1b30 <__fpcmp_parts_f+0x9e>
    1a9e:	8c 91       	ld	r24, X
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	08 f4       	brcc	.+2      	; 0x1aa6 <__fpcmp_parts_f+0x14>
    1aa4:	45 c0       	rjmp	.+138    	; 0x1b30 <__fpcmp_parts_f+0x9e>
    1aa6:	94 30       	cpi	r25, 0x04	; 4
    1aa8:	51 f4       	brne	.+20     	; 0x1abe <__fpcmp_parts_f+0x2c>
    1aaa:	61 81       	ldd	r22, Z+1	; 0x01
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	b1 f5       	brne	.+108    	; 0x1b1c <__fpcmp_parts_f+0x8a>
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	2c 91       	ld	r18, X
    1ab4:	11 97       	sbiw	r26, 0x01	; 1
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	26 1b       	sub	r18, r22
    1aba:	31 09       	sbc	r19, r1
    1abc:	41 c0       	rjmp	.+130    	; 0x1b40 <__fpcmp_parts_f+0xae>
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	21 f0       	breq	.+8      	; 0x1aca <__fpcmp_parts_f+0x38>
    1ac2:	92 30       	cpi	r25, 0x02	; 2
    1ac4:	41 f4       	brne	.+16     	; 0x1ad6 <__fpcmp_parts_f+0x44>
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	b1 f1       	breq	.+108    	; 0x1b36 <__fpcmp_parts_f+0xa4>
    1aca:	11 96       	adiw	r26, 0x01	; 1
    1acc:	8c 91       	ld	r24, X
    1ace:	11 97       	sbiw	r26, 0x01	; 1
    1ad0:	88 23       	and	r24, r24
    1ad2:	a1 f1       	breq	.+104    	; 0x1b3c <__fpcmp_parts_f+0xaa>
    1ad4:	2d c0       	rjmp	.+90     	; 0x1b30 <__fpcmp_parts_f+0x9e>
    1ad6:	61 81       	ldd	r22, Z+1	; 0x01
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	01 f1       	breq	.+64     	; 0x1b1c <__fpcmp_parts_f+0x8a>
    1adc:	11 96       	adiw	r26, 0x01	; 1
    1ade:	8c 91       	ld	r24, X
    1ae0:	11 97       	sbiw	r26, 0x01	; 1
    1ae2:	68 17       	cp	r22, r24
    1ae4:	d9 f4       	brne	.+54     	; 0x1b1c <__fpcmp_parts_f+0x8a>
    1ae6:	22 81       	ldd	r18, Z+2	; 0x02
    1ae8:	33 81       	ldd	r19, Z+3	; 0x03
    1aea:	12 96       	adiw	r26, 0x02	; 2
    1aec:	8d 91       	ld	r24, X+
    1aee:	9c 91       	ld	r25, X
    1af0:	13 97       	sbiw	r26, 0x03	; 3
    1af2:	82 17       	cp	r24, r18
    1af4:	93 07       	cpc	r25, r19
    1af6:	94 f0       	brlt	.+36     	; 0x1b1c <__fpcmp_parts_f+0x8a>
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	bc f0       	brlt	.+46     	; 0x1b2c <__fpcmp_parts_f+0x9a>
    1afe:	24 81       	ldd	r18, Z+4	; 0x04
    1b00:	35 81       	ldd	r19, Z+5	; 0x05
    1b02:	46 81       	ldd	r20, Z+6	; 0x06
    1b04:	57 81       	ldd	r21, Z+7	; 0x07
    1b06:	14 96       	adiw	r26, 0x04	; 4
    1b08:	8d 91       	ld	r24, X+
    1b0a:	9d 91       	ld	r25, X+
    1b0c:	0d 90       	ld	r0, X+
    1b0e:	bc 91       	ld	r27, X
    1b10:	a0 2d       	mov	r26, r0
    1b12:	82 17       	cp	r24, r18
    1b14:	93 07       	cpc	r25, r19
    1b16:	a4 07       	cpc	r26, r20
    1b18:	b5 07       	cpc	r27, r21
    1b1a:	18 f4       	brcc	.+6      	; 0x1b22 <__fpcmp_parts_f+0x90>
    1b1c:	66 23       	and	r22, r22
    1b1e:	41 f0       	breq	.+16     	; 0x1b30 <__fpcmp_parts_f+0x9e>
    1b20:	0d c0       	rjmp	.+26     	; 0x1b3c <__fpcmp_parts_f+0xaa>
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	4a 07       	cpc	r20, r26
    1b28:	5b 07       	cpc	r21, r27
    1b2a:	28 f4       	brcc	.+10     	; 0x1b36 <__fpcmp_parts_f+0xa4>
    1b2c:	66 23       	and	r22, r22
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <__fpcmp_parts_f+0xaa>
    1b30:	21 e0       	ldi	r18, 0x01	; 1
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	05 c0       	rjmp	.+10     	; 0x1b40 <__fpcmp_parts_f+0xae>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <__fpcmp_parts_f+0xae>
    1b3c:	2f ef       	ldi	r18, 0xFF	; 255
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	c9 01       	movw	r24, r18
    1b42:	08 95       	ret

00001b44 <__divmodhi4>:
    1b44:	97 fb       	bst	r25, 7
    1b46:	09 2e       	mov	r0, r25
    1b48:	07 26       	eor	r0, r23
    1b4a:	0a d0       	rcall	.+20     	; 0x1b60 <__divmodhi4_neg1>
    1b4c:	77 fd       	sbrc	r23, 7
    1b4e:	04 d0       	rcall	.+8      	; 0x1b58 <__divmodhi4_neg2>
    1b50:	0c d0       	rcall	.+24     	; 0x1b6a <__udivmodhi4>
    1b52:	06 d0       	rcall	.+12     	; 0x1b60 <__divmodhi4_neg1>
    1b54:	00 20       	and	r0, r0
    1b56:	1a f4       	brpl	.+6      	; 0x1b5e <__divmodhi4_exit>

00001b58 <__divmodhi4_neg2>:
    1b58:	70 95       	com	r23
    1b5a:	61 95       	neg	r22
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255

00001b5e <__divmodhi4_exit>:
    1b5e:	08 95       	ret

00001b60 <__divmodhi4_neg1>:
    1b60:	f6 f7       	brtc	.-4      	; 0x1b5e <__divmodhi4_exit>
    1b62:	90 95       	com	r25
    1b64:	81 95       	neg	r24
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	08 95       	ret

00001b6a <__udivmodhi4>:
    1b6a:	aa 1b       	sub	r26, r26
    1b6c:	bb 1b       	sub	r27, r27
    1b6e:	51 e1       	ldi	r21, 0x11	; 17
    1b70:	07 c0       	rjmp	.+14     	; 0x1b80 <__udivmodhi4_ep>

00001b72 <__udivmodhi4_loop>:
    1b72:	aa 1f       	adc	r26, r26
    1b74:	bb 1f       	adc	r27, r27
    1b76:	a6 17       	cp	r26, r22
    1b78:	b7 07       	cpc	r27, r23
    1b7a:	10 f0       	brcs	.+4      	; 0x1b80 <__udivmodhi4_ep>
    1b7c:	a6 1b       	sub	r26, r22
    1b7e:	b7 0b       	sbc	r27, r23

00001b80 <__udivmodhi4_ep>:
    1b80:	88 1f       	adc	r24, r24
    1b82:	99 1f       	adc	r25, r25
    1b84:	5a 95       	dec	r21
    1b86:	a9 f7       	brne	.-22     	; 0x1b72 <__udivmodhi4_loop>
    1b88:	80 95       	com	r24
    1b8a:	90 95       	com	r25
    1b8c:	bc 01       	movw	r22, r24
    1b8e:	cd 01       	movw	r24, r26
    1b90:	08 95       	ret

00001b92 <__prologue_saves__>:
    1b92:	2f 92       	push	r2
    1b94:	3f 92       	push	r3
    1b96:	4f 92       	push	r4
    1b98:	5f 92       	push	r5
    1b9a:	6f 92       	push	r6
    1b9c:	7f 92       	push	r7
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	ca 1b       	sub	r28, r26
    1bbc:	db 0b       	sbc	r29, r27
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	09 94       	ijmp

00001bca <__epilogue_restores__>:
    1bca:	2a 88       	ldd	r2, Y+18	; 0x12
    1bcc:	39 88       	ldd	r3, Y+17	; 0x11
    1bce:	48 88       	ldd	r4, Y+16	; 0x10
    1bd0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bd2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bd4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bd6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bd8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bda:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bdc:	b9 84       	ldd	r11, Y+9	; 0x09
    1bde:	c8 84       	ldd	r12, Y+8	; 0x08
    1be0:	df 80       	ldd	r13, Y+7	; 0x07
    1be2:	ee 80       	ldd	r14, Y+6	; 0x06
    1be4:	fd 80       	ldd	r15, Y+5	; 0x05
    1be6:	0c 81       	ldd	r16, Y+4	; 0x04
    1be8:	1b 81       	ldd	r17, Y+3	; 0x03
    1bea:	aa 81       	ldd	r26, Y+2	; 0x02
    1bec:	b9 81       	ldd	r27, Y+1	; 0x01
    1bee:	ce 0f       	add	r28, r30
    1bf0:	d1 1d       	adc	r29, r1
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	ed 01       	movw	r28, r26
    1bfe:	08 95       	ret

00001c00 <memcpy>:
    1c00:	fb 01       	movw	r30, r22
    1c02:	dc 01       	movw	r26, r24
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <memcpy+0xa>
    1c06:	01 90       	ld	r0, Z+
    1c08:	0d 92       	st	X+, r0
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	d8 f7       	brcc	.-10     	; 0x1c06 <memcpy+0x6>
    1c10:	08 95       	ret

00001c12 <_exit>:
    1c12:	f8 94       	cli

00001c14 <__stop_program>:
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <__stop_program>

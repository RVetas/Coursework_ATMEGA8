
Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000016b8  0000172c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000750  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001e0  00000000  00000000  00001f87  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000370  00000000  00000000  00002167  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000241f  00000000  00000000  000024d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001279  00000000  00000000  000048f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e11  00000000  00000000  00005b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00007980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00007c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  000081c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000060e  00000000  00000000  00008c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  0000924b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
       2:	bb c0       	rjmp	.+374    	; 0x17a <__vector_1>
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	62 c0       	rjmp	.+196    	; 0xcc <__bad_interrupt>
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	60 c0       	rjmp	.+192    	; 0xcc <__bad_interrupt>
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	5e c0       	rjmp	.+188    	; 0xcc <__bad_interrupt>
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	88 c0       	rjmp	.+272    	; 0x124 <__vector_9>
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	5a c0       	rjmp	.+180    	; 0xcc <__bad_interrupt>
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	58 c0       	rjmp	.+176    	; 0xcc <__bad_interrupt>
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	56 c0       	rjmp	.+172    	; 0xcc <__bad_interrupt>
      20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
      22:	54 c0       	rjmp	.+168    	; 0xcc <__bad_interrupt>
      24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
      26:	44 c2       	rjmp	.+1160   	; 0x4b0 <__stack+0x51>
      28:	48 c2       	rjmp	.+1168   	; 0x4ba <__stack+0x5b>
      2a:	47 c2       	rjmp	.+1166   	; 0x4ba <__stack+0x5b>
      2c:	46 c2       	rjmp	.+1164   	; 0x4ba <__stack+0x5b>
      2e:	45 c2       	rjmp	.+1162   	; 0x4ba <__stack+0x5b>
      30:	44 c2       	rjmp	.+1160   	; 0x4ba <__stack+0x5b>
      32:	43 c2       	rjmp	.+1158   	; 0x4ba <__stack+0x5b>
      34:	42 c2       	rjmp	.+1156   	; 0x4ba <__stack+0x5b>
      36:	41 c2       	rjmp	.+1154   	; 0x4ba <__stack+0x5b>
      38:	40 c2       	rjmp	.+1152   	; 0x4ba <__stack+0x5b>
      3a:	3f c2       	rjmp	.+1150   	; 0x4ba <__stack+0x5b>
      3c:	3e c2       	rjmp	.+1148   	; 0x4ba <__stack+0x5b>
      3e:	3d c2       	rjmp	.+1146   	; 0x4ba <__stack+0x5b>
      40:	ec c1       	rjmp	.+984    	; 0x41a <char_to_code+0x3a>
      42:	3b c2       	rjmp	.+1142   	; 0x4ba <__stack+0x5b>
      44:	3a c2       	rjmp	.+1140   	; 0x4ba <__stack+0x5b>
      46:	f3 c1       	rjmp	.+998    	; 0x42e <char_to_code+0x4e>
      48:	f7 c1       	rjmp	.+1006   	; 0x438 <char_to_code+0x58>
      4a:	fb c1       	rjmp	.+1014   	; 0x442 <char_to_code+0x62>
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <char_to_code+0x6c>
      4e:	03 c2       	rjmp	.+1030   	; 0x456 <char_to_code+0x76>
      50:	07 c2       	rjmp	.+1038   	; 0x460 <__stack+0x1>
      52:	0b c2       	rjmp	.+1046   	; 0x46a <__stack+0xb>
      54:	0f c2       	rjmp	.+1054   	; 0x474 <__stack+0x15>
      56:	13 c2       	rjmp	.+1062   	; 0x47e <__stack+0x1f>
      58:	17 c2       	rjmp	.+1070   	; 0x488 <__stack+0x29>
      5a:	2f c2       	rjmp	.+1118   	; 0x4ba <__stack+0x5b>
      5c:	2e c2       	rjmp	.+1116   	; 0x4ba <__stack+0x5b>
      5e:	2d c2       	rjmp	.+1114   	; 0x4ba <__stack+0x5b>
      60:	2c c2       	rjmp	.+1112   	; 0x4ba <__stack+0x5b>
      62:	2b c2       	rjmp	.+1110   	; 0x4ba <__stack+0x5b>
      64:	2a c2       	rjmp	.+1108   	; 0x4ba <__stack+0x5b>
      66:	29 c2       	rjmp	.+1106   	; 0x4ba <__stack+0x5b>
      68:	28 c2       	rjmp	.+1104   	; 0x4ba <__stack+0x5b>
      6a:	27 c2       	rjmp	.+1102   	; 0x4ba <__stack+0x5b>
      6c:	12 c2       	rjmp	.+1060   	; 0x492 <__stack+0x33>
      6e:	25 c2       	rjmp	.+1098   	; 0x4ba <__stack+0x5b>
      70:	24 c2       	rjmp	.+1096   	; 0x4ba <__stack+0x5b>
      72:	23 c2       	rjmp	.+1094   	; 0x4ba <__stack+0x5b>
      74:	22 c2       	rjmp	.+1092   	; 0x4ba <__stack+0x5b>
      76:	12 c2       	rjmp	.+1060   	; 0x49c <__stack+0x3d>
      78:	20 c2       	rjmp	.+1088   	; 0x4ba <__stack+0x5b>
      7a:	1f c2       	rjmp	.+1086   	; 0x4ba <__stack+0x5b>
      7c:	1e c2       	rjmp	.+1084   	; 0x4ba <__stack+0x5b>
      7e:	13 c2       	rjmp	.+1062   	; 0x4a6 <__stack+0x47>
      80:	1c c2       	rjmp	.+1080   	; 0x4ba <__stack+0x5b>
      82:	1b c2       	rjmp	.+1078   	; 0x4ba <__stack+0x5b>
      84:	1a c2       	rjmp	.+1076   	; 0x4ba <__stack+0x5b>
      86:	19 c2       	rjmp	.+1074   	; 0x4ba <__stack+0x5b>
      88:	18 c2       	rjmp	.+1072   	; 0x4ba <__stack+0x5b>
      8a:	17 c2       	rjmp	.+1070   	; 0x4ba <__stack+0x5b>
      8c:	16 c2       	rjmp	.+1068   	; 0x4ba <__stack+0x5b>
      8e:	15 c2       	rjmp	.+1066   	; 0x4ba <__stack+0x5b>
      90:	14 c2       	rjmp	.+1064   	; 0x4ba <__stack+0x5b>
      92:	13 c2       	rjmp	.+1062   	; 0x4ba <__stack+0x5b>
      94:	12 c2       	rjmp	.+1060   	; 0x4ba <__stack+0x5b>
      96:	11 c2       	rjmp	.+1058   	; 0x4ba <__stack+0x5b>
      98:	10 c2       	rjmp	.+1056   	; 0x4ba <__stack+0x5b>
      9a:	0f c2       	rjmp	.+1054   	; 0x4ba <__stack+0x5b>
      9c:	0e c2       	rjmp	.+1052   	; 0x4ba <__stack+0x5b>
      9e:	0d c2       	rjmp	.+1050   	; 0x4ba <__stack+0x5b>
      a0:	0c c2       	rjmp	.+1048   	; 0x4ba <__stack+0x5b>
      a2:	0b c2       	rjmp	.+1046   	; 0x4ba <__stack+0x5b>
      a4:	bf c1       	rjmp	.+894    	; 0x424 <char_to_code+0x44>

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	10 e0       	ldi	r17, 0x00	; 0
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	e8 eb       	ldi	r30, 0xB8	; 184
      ba:	f6 e1       	ldi	r31, 0x16	; 22
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a2 38       	cpi	r26, 0x82	; 130
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>
      c8:	ee d0       	rcall	.+476    	; 0x2a6 <main>
      ca:	f4 ca       	rjmp	.-2584   	; 0xfffff6b4 <__eeprom_end+0xff7ef6b4>

000000cc <__bad_interrupt>:
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <set_up_ports>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h>

//Настройка портов
void set_up_ports(void) {
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
      d6:	87 e3       	ldi	r24, 0x37	; 55
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	27 e3       	ldi	r18, 0x37	; 55
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	2f 63       	ori	r18, 0x3F	; 63
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
      e8:	81 e3       	ldi	r24, 0x31	; 49
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	21 e3       	ldi	r18, 0x31	; 49
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	20 81       	ld	r18, Z
      f4:	28 60       	ori	r18, 0x08	; 8
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
      fa:	84 e3       	ldi	r24, 0x34	; 52
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	24 e3       	ldi	r18, 0x34	; 52
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	20 81       	ld	r18, Z
     106:	2f 60       	ori	r18, 0x0F	; 15
     108:	fc 01       	movw	r30, r24
     10a:	20 83       	st	Z, r18
  // DDRD &= ~((1 << PD5)| (1 << PD6) | (1 << PD7)); 
  // DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
  // PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);

  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
     10c:	84 e3       	ldi	r24, 0x34	; 52
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	24 e3       	ldi	r18, 0x34	; 52
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	f9 01       	movw	r30, r18
     116:	20 81       	ld	r18, Z
     118:	20 63       	ori	r18, 0x30	; 48
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
} 
     11e:	cf 91       	pop	r28
     120:	df 91       	pop	r29
     122:	08 95       	ret

00000124 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	printDisplay(display);
     14e:	8f e6       	ldi	r24, 0x6F	; 111
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	9e d2       	rcall	.+1340   	; 0x690 <printDisplay>
}
     154:	cf 91       	pop	r28
     156:	df 91       	pop	r29
     158:	ff 91       	pop	r31
     15a:	ef 91       	pop	r30
     15c:	bf 91       	pop	r27
     15e:	af 91       	pop	r26
     160:	9f 91       	pop	r25
     162:	8f 91       	pop	r24
     164:	7f 91       	pop	r23
     166:	6f 91       	pop	r22
     168:	5f 91       	pop	r21
     16a:	4f 91       	pop	r20
     16c:	3f 91       	pop	r19
     16e:	2f 91       	pop	r18
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <__vector_1>:

ISR(INT0_vect) {
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
     19c:	df 93       	push	r29
     19e:	cf 93       	push	r28
     1a0:	0f 92       	push	r0
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
  unsigned char button_number = number_key_pressed();
     1a6:	95 d2       	rcall	.+1322   	; 0x6d2 <number_key_pressed>
     1a8:	89 83       	std	Y+1, r24	; 0x01
  handle_buttons(button_number);
     1aa:	20 ef       	ldi	r18, 0xF0	; 240
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	88 2f       	mov	r24, r24
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	f9 01       	movw	r30, r18
     1b6:	09 95       	icall
}
     1b8:	0f 90       	pop	r0
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	bf 91       	pop	r27
     1c4:	af 91       	pop	r26
     1c6:	9f 91       	pop	r25
     1c8:	8f 91       	pop	r24
     1ca:	7f 91       	pop	r23
     1cc:	6f 91       	pop	r22
     1ce:	5f 91       	pop	r21
     1d0:	4f 91       	pop	r20
     1d2:	3f 91       	pop	r19
     1d4:	2f 91       	pop	r18
     1d6:	0f 90       	pop	r0
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	0f 90       	pop	r0
     1dc:	1f 90       	pop	r1
     1de:	18 95       	reti

000001e0 <handle_buttons>:

void handle_buttons(unsigned char button_number) {
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	0f 92       	push	r0
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	89 83       	std	Y+1, r24	; 0x01
  // unsigned char button_number = number_key_pressed();

  switch (button_number) {
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	88 2f       	mov	r24, r24
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	91 05       	cpc	r25, r1
     1f6:	71 f0       	breq	.+28     	; 0x214 <handle_buttons+0x34>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	91 05       	cpc	r25, r1
     1fc:	a1 f0       	breq	.+40     	; 0x226 <handle_buttons+0x46>
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	e1 f4       	brne	.+56     	; 0x23a <handle_buttons+0x5a>
    case 0:
    strcpy(display, "0000");
     202:	8f e6       	ldi	r24, 0x6F	; 111
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	20 e6       	ldi	r18, 0x60	; 96
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	b9 01       	movw	r22, r18
     20c:	45 e0       	ldi	r20, 0x05	; 5
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	48 da       	rcall	.-2928   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
    break;
     212:	14 c0       	rjmp	.+40     	; 0x23c <handle_buttons+0x5c>

    case 1:
    strcpy(display, "1111");
     214:	8f e6       	ldi	r24, 0x6F	; 111
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	25 e6       	ldi	r18, 0x65	; 101
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	b9 01       	movw	r22, r18
     21e:	45 e0       	ldi	r20, 0x05	; 5
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	3f da       	rcall	.-2946   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
    break;
     224:	0b c0       	rjmp	.+22     	; 0x23c <handle_buttons+0x5c>

    case 2:
    strcpy(display, "2222");
     226:	8f e6       	ldi	r24, 0x6F	; 111
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2a e6       	ldi	r18, 0x6A	; 106
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	b9 01       	movw	r22, r18
     230:	45 e0       	ldi	r20, 0x05	; 5
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	36 da       	rcall	.-2964   	; 0xfffff6a2 <__eeprom_end+0xff7ef6a2>
    break;
     236:	00 00       	nop
     238:	01 c0       	rjmp	.+2      	; 0x23c <handle_buttons+0x5c>

    default:
    break;
     23a:	00 00       	nop
  };
}
     23c:	0f 90       	pop	r0
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <timer_init>:

//Инициализация таймера
void timer_init() {
     244:	df 93       	push	r29
     246:	cf 93       	push	r28
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0);
     24c:	89 e5       	ldi	r24, 0x59	; 89
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	29 e5       	ldi	r18, 0x59	; 89
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	21 60       	ori	r18, 0x01	; 1
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
	TCCR0 = (1 << CS02);
     25e:	83 e5       	ldi	r24, 0x53	; 83
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	24 e0       	ldi	r18, 0x04	; 4
     264:	fc 01       	movw	r30, r24
     266:	20 83       	st	Z, r18
}
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <init>:

void init() {
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
  // cli();
  set_up_ports();
     276:	2b df       	rcall	.-426    	; 0xce <set_up_ports>
  timer_init();
     278:	e5 df       	rcall	.-54     	; 0x244 <timer_init>

  GICR |= (1 << INT0);
     27a:	8b e5       	ldi	r24, 0x5B	; 91
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	2b e5       	ldi	r18, 0x5B	; 91
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	f9 01       	movw	r30, r18
     284:	20 81       	ld	r18, Z
     286:	20 64       	ori	r18, 0x40	; 64
     288:	fc 01       	movw	r30, r24
     28a:	20 83       	st	Z, r18
  MCUCR |= (1 << ISC00) | (1 << ISC01);
     28c:	85 e5       	ldi	r24, 0x55	; 85
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	25 e5       	ldi	r18, 0x55	; 85
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	f9 01       	movw	r30, r18
     296:	20 81       	ld	r18, Z
     298:	23 60       	ori	r18, 0x03	; 3
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18
  sei();
     29e:	78 94       	sei
  // cli();
}
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <main>:

int main(void) {
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	2f 97       	sbiw	r28, 0x0f	; 15
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
  init();
     2be:	d7 df       	rcall	.-82     	; 0x26e <init>
  ds1621_init();
     2c0:	85 d2       	rcall	.+1290   	; 0x7cc <ds1621_init>
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     2c2:	81 e3       	ldi	r24, 0x31	; 49
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	21 e3       	ldi	r18, 0x31	; 49
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	f9 01       	movw	r30, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	20 6e       	ori	r18, 0xE0	; 224
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     2d4:	82 e3       	ldi	r24, 0x32	; 50
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	22 e3       	ldi	r18, 0x32	; 50
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	f9 01       	movw	r30, r18
     2de:	20 81       	ld	r18, Z
     2e0:	20 6e       	ori	r18, 0xE0	; 224
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
	while(1) {
    // handle_buttons();
    signed char temp = getTemperature();
     2e6:	fa d2       	rcall	.+1524   	; 0x8dc <getTemperature>
     2e8:	89 83       	std	Y+1, r24	; 0x01
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e8       	ldi	r26, 0x80	; 128
     2f0:	bf e3       	ldi	r27, 0x3F	; 63
     2f2:	8a 83       	std	Y+2, r24	; 0x02
     2f4:	9b 83       	std	Y+3, r25	; 0x03
     2f6:	ac 83       	std	Y+4, r26	; 0x04
     2f8:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2fa:	6a 81       	ldd	r22, Y+2	; 0x02
     2fc:	7b 81       	ldd	r23, Y+3	; 0x03
     2fe:	8c 81       	ldd	r24, Y+4	; 0x04
     300:	9d 81       	ldd	r25, Y+5	; 0x05
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	4a e7       	ldi	r20, 0x7A	; 122
     308:	54 e4       	ldi	r21, 0x44	; 68
     30a:	40 d6       	rcall	.+3200   	; 0xf8c <__mulsf3>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	8e 83       	std	Y+6, r24	; 0x06
     312:	9f 83       	std	Y+7, r25	; 0x07
     314:	a8 87       	std	Y+8, r26	; 0x08
     316:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     318:	11 e0       	ldi	r17, 0x01	; 1
     31a:	6e 81       	ldd	r22, Y+6	; 0x06
     31c:	7f 81       	ldd	r23, Y+7	; 0x07
     31e:	88 85       	ldd	r24, Y+8	; 0x08
     320:	99 85       	ldd	r25, Y+9	; 0x09
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e8       	ldi	r20, 0x80	; 128
     328:	5f e3       	ldi	r21, 0x3F	; 63
     32a:	7b d7       	rcall	.+3830   	; 0x1222 <__ltsf2>
     32c:	88 23       	and	r24, r24
     32e:	0c f0       	brlt	.+2      	; 0x332 <main+0x8c>
     330:	10 e0       	ldi	r17, 0x00	; 0
     332:	11 23       	and	r17, r17
     334:	29 f0       	breq	.+10     	; 0x340 <main+0x9a>
		__ticks = 1;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	9b 87       	std	Y+11, r25	; 0x0b
     33c:	8a 87       	std	Y+10, r24	; 0x0a
     33e:	42 c0       	rjmp	.+132    	; 0x3c4 <main+0x11e>
	else if (__tmp > 65535)
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	6e 81       	ldd	r22, Y+6	; 0x06
     344:	7f 81       	ldd	r23, Y+7	; 0x07
     346:	88 85       	ldd	r24, Y+8	; 0x08
     348:	99 85       	ldd	r25, Y+9	; 0x09
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	3f ef       	ldi	r19, 0xFF	; 255
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	57 e4       	ldi	r21, 0x47	; 71
     352:	11 d7       	rcall	.+3618   	; 0x1176 <__gtsf2>
     354:	18 16       	cp	r1, r24
     356:	0c f0       	brlt	.+2      	; 0x35a <main+0xb4>
     358:	10 e0       	ldi	r17, 0x00	; 0
     35a:	11 23       	and	r17, r17
     35c:	51 f1       	breq	.+84     	; 0x3b2 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     35e:	6a 81       	ldd	r22, Y+2	; 0x02
     360:	7b 81       	ldd	r23, Y+3	; 0x03
     362:	8c 81       	ldd	r24, Y+4	; 0x04
     364:	9d 81       	ldd	r25, Y+5	; 0x05
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e2       	ldi	r20, 0x20	; 32
     36c:	51 e4       	ldi	r21, 0x41	; 65
     36e:	0e d6       	rcall	.+3100   	; 0xf8c <__mulsf3>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	47 d4       	rcall	.+2190   	; 0xc08 <__fixunssfsi>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	9b 87       	std	Y+11, r25	; 0x0b
     380:	8a 87       	std	Y+10, r24	; 0x0a
     382:	12 c0       	rjmp	.+36     	; 0x3a8 <main+0x102>
     384:	84 e6       	ldi	r24, 0x64	; 100
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	9d 87       	std	Y+13, r25	; 0x0d
     38a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38c:	8c 85       	ldd	r24, Y+12	; 0x0c
     38e:	9d 85       	ldd	r25, Y+13	; 0x0d
     390:	8c 01       	movw	r16, r24
     392:	c8 01       	movw	r24, r16
     394:	01 97       	sbiw	r24, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <main+0xee>
     398:	8c 01       	movw	r16, r24
     39a:	1d 87       	std	Y+13, r17	; 0x0d
     39c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39e:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     3a2:	01 97       	sbiw	r24, 0x01	; 1
     3a4:	9b 87       	std	Y+11, r25	; 0x0b
     3a6:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a8:	8a 85       	ldd	r24, Y+10	; 0x0a
     3aa:	9b 85       	ldd	r25, Y+11	; 0x0b
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	51 f7       	brne	.-44     	; 0x384 <main+0xde>
		_delay_ms(1);
	}
     3b0:	9a cf       	rjmp	.-204    	; 0x2e6 <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3b2:	6e 81       	ldd	r22, Y+6	; 0x06
     3b4:	7f 81       	ldd	r23, Y+7	; 0x07
     3b6:	88 85       	ldd	r24, Y+8	; 0x08
     3b8:	99 85       	ldd	r25, Y+9	; 0x09
     3ba:	26 d4       	rcall	.+2124   	; 0xc08 <__fixunssfsi>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	9b 87       	std	Y+11, r25	; 0x0b
     3c2:	8a 87       	std	Y+10, r24	; 0x0a
     3c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3c6:	9b 85       	ldd	r25, Y+11	; 0x0b
     3c8:	9f 87       	std	Y+15, r25	; 0x0f
     3ca:	8e 87       	std	Y+14, r24	; 0x0e
     3cc:	8e 85       	ldd	r24, Y+14	; 0x0e
     3ce:	9f 85       	ldd	r25, Y+15	; 0x0f
     3d0:	8c 01       	movw	r16, r24
     3d2:	f8 01       	movw	r30, r16
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x12e>
     3d8:	8f 01       	movw	r16, r30
     3da:	1f 87       	std	Y+15, r17	; 0x0f
     3dc:	0e 87       	std	Y+14, r16	; 0x0e
     3de:	83 cf       	rjmp	.-250    	; 0x2e6 <main+0x40>

000003e0 <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <char_to_code+0x6>
     3e6:	0f 92       	push	r0
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int code;
    switch (symbol) {
     3ee:	8b 81       	ldd	r24, Y+3	; 0x03
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	aa 27       	eor	r26, r26
     3f6:	97 fd       	sbrc	r25, 7
     3f8:	a0 95       	com	r26
     3fa:	ba 2f       	mov	r27, r26
     3fc:	40 e2       	ldi	r20, 0x20	; 32
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	2f e3       	ldi	r18, 0x3F	; 63
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	84 1b       	sub	r24, r20
     406:	95 0b       	sbc	r25, r21
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	08 f4       	brcc	.+2      	; 0x410 <char_to_code+0x30>
     40e:	55 c0       	rjmp	.+170    	; 0x4ba <__stack+0x5b>
     410:	8d 5e       	subi	r24, 0xED	; 237
     412:	9f 4f       	sbci	r25, 0xFF	; 255
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
     418:	08 95       	ret
        case '-':
            code = 0b10111111;
     41a:	8f eb       	ldi	r24, 0xBF	; 191
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
            break;
     422:	4f c0       	rjmp	.+158    	; 0x4c2 <__stack+0x63>
        case '_':
            code = 0b11110111;
     424:	87 ef       	ldi	r24, 0xF7	; 247
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	9a 83       	std	Y+2, r25	; 0x02
     42a:	89 83       	std	Y+1, r24	; 0x01
            break;
     42c:	4a c0       	rjmp	.+148    	; 0x4c2 <__stack+0x63>
        case '0':
            code = 0b11000000;
     42e:	80 ec       	ldi	r24, 0xC0	; 192
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	89 83       	std	Y+1, r24	; 0x01
            break;
     436:	45 c0       	rjmp	.+138    	; 0x4c2 <__stack+0x63>
        case '1':
            code = 0b11111001;
     438:	89 ef       	ldi	r24, 0xF9	; 249
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	9a 83       	std	Y+2, r25	; 0x02
     43e:	89 83       	std	Y+1, r24	; 0x01
            break;
     440:	40 c0       	rjmp	.+128    	; 0x4c2 <__stack+0x63>
        case '2':
            code = 0b10100100;
     442:	84 ea       	ldi	r24, 0xA4	; 164
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
            break;
     44a:	3b c0       	rjmp	.+118    	; 0x4c2 <__stack+0x63>
        case '3':
            code = 0b10110000;
     44c:	80 eb       	ldi	r24, 0xB0	; 176
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	9a 83       	std	Y+2, r25	; 0x02
     452:	89 83       	std	Y+1, r24	; 0x01
            break;
     454:	36 c0       	rjmp	.+108    	; 0x4c2 <__stack+0x63>
        case '4':
            code = 0b10011001;
     456:	89 e9       	ldi	r24, 0x99	; 153
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	9a 83       	std	Y+2, r25	; 0x02
     45c:	89 83       	std	Y+1, r24	; 0x01
            break;
     45e:	31 c0       	rjmp	.+98     	; 0x4c2 <__stack+0x63>
        case '5':
            code = 0b10010010;
     460:	82 e9       	ldi	r24, 0x92	; 146
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9a 83       	std	Y+2, r25	; 0x02
     466:	89 83       	std	Y+1, r24	; 0x01
            break;
     468:	2c c0       	rjmp	.+88     	; 0x4c2 <__stack+0x63>
        case '6':
            code = 0b10000010;
     46a:	82 e8       	ldi	r24, 0x82	; 130
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01
            break;
     472:	27 c0       	rjmp	.+78     	; 0x4c2 <__stack+0x63>
        case '7':
            code = 0b11111000;
     474:	88 ef       	ldi	r24, 0xF8	; 248
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
            break;
     47c:	22 c0       	rjmp	.+68     	; 0x4c2 <__stack+0x63>
        case '8':
            code = 0b10000000;
     47e:	80 e8       	ldi	r24, 0x80	; 128
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	89 83       	std	Y+1, r24	; 0x01
            break;
     486:	1d c0       	rjmp	.+58     	; 0x4c2 <__stack+0x63>
        case '9':
            code = 0b10010000;
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
            break;
     490:	18 c0       	rjmp	.+48     	; 0x4c2 <__stack+0x63>
        case 'C':
            code = 0b11000110;
     492:	86 ec       	ldi	r24, 0xC6	; 198
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
            break;
     49a:	13 c0       	rjmp	.+38     	; 0x4c2 <__stack+0x63>
        case 'H':
            code = 0b10001001;
     49c:	89 e8       	ldi	r24, 0x89	; 137
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	9a 83       	std	Y+2, r25	; 0x02
     4a2:	89 83       	std	Y+1, r24	; 0x01
            break;
     4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <__stack+0x63>
        case 'L':
            code = 0b11000111;
     4a6:	87 ec       	ldi	r24, 0xC7	; 199
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9a 83       	std	Y+2, r25	; 0x02
     4ac:	89 83       	std	Y+1, r24	; 0x01
            break;
     4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__stack+0x63>
        case ' ':
            code = 0b11111111;
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	9a 83       	std	Y+2, r25	; 0x02
     4b6:	89 83       	std	Y+1, r24	; 0x01
            break;
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__stack+0x63>
        default:
            code = 0xff;
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
    };
    return code;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	08 95       	ret

000004d2 <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	63 97       	sbiw	r28, 0x13	; 19
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	9a 8b       	std	Y+18, r25	; 0x12
     4ec:	89 8b       	std	Y+17, r24	; 0x11
     4ee:	6b 8b       	std	Y+19, r22	; 0x13
    unsigned int displayDigit = char_to_code(digit);
     4f0:	8b 89       	ldd	r24, Y+19	; 0x13
     4f2:	76 df       	rcall	.-276    	; 0x3e0 <char_to_code>
     4f4:	9a 83       	std	Y+2, r25	; 0x02
     4f6:	89 83       	std	Y+1, r24	; 0x01
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     4f8:	88 e3       	ldi	r24, 0x38	; 56
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	28 e3       	ldi	r18, 0x38	; 56
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	f9 01       	movw	r30, r18
     502:	20 81       	ld	r18, Z
     504:	2f 63       	ori	r18, 0x3F	; 63
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
    PORTD |= (1<<PD3);// clr data pin
     50a:	82 e3       	ldi	r24, 0x32	; 50
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	22 e3       	ldi	r18, 0x32	; 50
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	28 60       	ori	r18, 0x08	; 8
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     51c:	85 e3       	ldi	r24, 0x35	; 53
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	25 e3       	ldi	r18, 0x35	; 53
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	20 7f       	andi	r18, 0xF0	; 240
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
    PORTC |= (1 << number); // set addr
     52e:	85 e3       	ldi	r24, 0x35	; 53
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	25 e3       	ldi	r18, 0x35	; 53
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	62 2f       	mov	r22, r18
     53c:	49 89       	ldd	r20, Y+17	; 0x11
     53e:	5a 89       	ldd	r21, Y+18	; 0x12
     540:	21 e0       	ldi	r18, 0x01	; 1
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <send_digit_to_display+0x78>
     546:	22 0f       	add	r18, r18
     548:	33 1f       	adc	r19, r19
     54a:	4a 95       	dec	r20
     54c:	e2 f7       	brpl	.-8      	; 0x546 <send_digit_to_display+0x74>
     54e:	26 2b       	or	r18, r22
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
    
    PORTB = displayDigit; // set data1
     554:	88 e3       	ldi	r24, 0x38	; 56
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	29 81       	ldd	r18, Y+1	; 0x01
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     55e:	82 e3       	ldi	r24, 0x32	; 50
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	22 e3       	ldi	r18, 0x32	; 50
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	40 81       	ld	r20, Z
     56a:	29 81       	ldd	r18, Y+1	; 0x01
     56c:	3a 81       	ldd	r19, Y+2	; 0x02
     56e:	36 95       	lsr	r19
     570:	27 95       	ror	r18
     572:	36 95       	lsr	r19
     574:	27 95       	ror	r18
     576:	36 95       	lsr	r19
     578:	27 95       	ror	r18
     57a:	20 95       	com	r18
     57c:	28 70       	andi	r18, 0x08	; 8
     57e:	20 95       	com	r18
     580:	24 23       	and	r18, r20
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	a0 e8       	ldi	r26, 0x80	; 128
     58c:	bf e3       	ldi	r27, 0x3F	; 63
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	ad 83       	std	Y+5, r26	; 0x05
     594:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     596:	6b 81       	ldd	r22, Y+3	; 0x03
     598:	7c 81       	ldd	r23, Y+4	; 0x04
     59a:	8d 81       	ldd	r24, Y+5	; 0x05
     59c:	9e 81       	ldd	r25, Y+6	; 0x06
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	4a e7       	ldi	r20, 0x7A	; 122
     5a4:	54 e4       	ldi	r21, 0x44	; 68
     5a6:	f2 d4       	rcall	.+2532   	; 0xf8c <__mulsf3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	8f 83       	std	Y+7, r24	; 0x07
     5ae:	98 87       	std	Y+8, r25	; 0x08
     5b0:	a9 87       	std	Y+9, r26	; 0x09
     5b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	6f 81       	ldd	r22, Y+7	; 0x07
     5b8:	78 85       	ldd	r23, Y+8	; 0x08
     5ba:	89 85       	ldd	r24, Y+9	; 0x09
     5bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e8       	ldi	r20, 0x80	; 128
     5c4:	5f e3       	ldi	r21, 0x3F	; 63
     5c6:	2d d6       	rcall	.+3162   	; 0x1222 <__ltsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	0c f0       	brlt	.+2      	; 0x5ce <send_digit_to_display+0xfc>
     5cc:	10 e0       	ldi	r17, 0x00	; 0
     5ce:	11 23       	and	r17, r17
     5d0:	29 f0       	breq	.+10     	; 0x5dc <send_digit_to_display+0x10a>
		__ticks = 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	9c 87       	std	Y+12, r25	; 0x0c
     5d8:	8b 87       	std	Y+11, r24	; 0x0b
     5da:	42 c0       	rjmp	.+132    	; 0x660 <send_digit_to_display+0x18e>
	else if (__tmp > 65535)
     5dc:	11 e0       	ldi	r17, 0x01	; 1
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	78 85       	ldd	r23, Y+8	; 0x08
     5e2:	89 85       	ldd	r24, Y+9	; 0x09
     5e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	3f ef       	ldi	r19, 0xFF	; 255
     5ea:	4f e7       	ldi	r20, 0x7F	; 127
     5ec:	57 e4       	ldi	r21, 0x47	; 71
     5ee:	c3 d5       	rcall	.+2950   	; 0x1176 <__gtsf2>
     5f0:	18 16       	cp	r1, r24
     5f2:	0c f0       	brlt	.+2      	; 0x5f6 <send_digit_to_display+0x124>
     5f4:	10 e0       	ldi	r17, 0x00	; 0
     5f6:	11 23       	and	r17, r17
     5f8:	51 f1       	breq	.+84     	; 0x64e <send_digit_to_display+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5fa:	6b 81       	ldd	r22, Y+3	; 0x03
     5fc:	7c 81       	ldd	r23, Y+4	; 0x04
     5fe:	8d 81       	ldd	r24, Y+5	; 0x05
     600:	9e 81       	ldd	r25, Y+6	; 0x06
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	51 e4       	ldi	r21, 0x41	; 65
     60a:	c0 d4       	rcall	.+2432   	; 0xf8c <__mulsf3>
     60c:	dc 01       	movw	r26, r24
     60e:	cb 01       	movw	r24, r22
     610:	bc 01       	movw	r22, r24
     612:	cd 01       	movw	r24, r26
     614:	f9 d2       	rcall	.+1522   	; 0xc08 <__fixunssfsi>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	9c 87       	std	Y+12, r25	; 0x0c
     61c:	8b 87       	std	Y+11, r24	; 0x0b
     61e:	12 c0       	rjmp	.+36     	; 0x644 <send_digit_to_display+0x172>
     620:	84 e6       	ldi	r24, 0x64	; 100
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	9e 87       	std	Y+14, r25	; 0x0e
     626:	8d 87       	std	Y+13, r24	; 0x0d
     628:	8d 85       	ldd	r24, Y+13	; 0x0d
     62a:	9e 85       	ldd	r25, Y+14	; 0x0e
     62c:	8c 01       	movw	r16, r24
     62e:	c8 01       	movw	r24, r16
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <send_digit_to_display+0x15e>
     634:	8c 01       	movw	r16, r24
     636:	1e 87       	std	Y+14, r17	; 0x0e
     638:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63a:	8b 85       	ldd	r24, Y+11	; 0x0b
     63c:	9c 85       	ldd	r25, Y+12	; 0x0c
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	9c 87       	std	Y+12, r25	; 0x0c
     642:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     644:	8b 85       	ldd	r24, Y+11	; 0x0b
     646:	9c 85       	ldd	r25, Y+12	; 0x0c
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	51 f7       	brne	.-44     	; 0x620 <send_digit_to_display+0x14e>
     64c:	16 c0       	rjmp	.+44     	; 0x67a <send_digit_to_display+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     64e:	6f 81       	ldd	r22, Y+7	; 0x07
     650:	78 85       	ldd	r23, Y+8	; 0x08
     652:	89 85       	ldd	r24, Y+9	; 0x09
     654:	9a 85       	ldd	r25, Y+10	; 0x0a
     656:	d8 d2       	rcall	.+1456   	; 0xc08 <__fixunssfsi>
     658:	dc 01       	movw	r26, r24
     65a:	cb 01       	movw	r24, r22
     65c:	9c 87       	std	Y+12, r25	; 0x0c
     65e:	8b 87       	std	Y+11, r24	; 0x0b
     660:	8b 85       	ldd	r24, Y+11	; 0x0b
     662:	9c 85       	ldd	r25, Y+12	; 0x0c
     664:	98 8b       	std	Y+16, r25	; 0x10
     666:	8f 87       	std	Y+15, r24	; 0x0f
     668:	8f 85       	ldd	r24, Y+15	; 0x0f
     66a:	98 89       	ldd	r25, Y+16	; 0x10
     66c:	8c 01       	movw	r16, r24
     66e:	f8 01       	movw	r30, r16
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <send_digit_to_display+0x19e>
     674:	8f 01       	movw	r16, r30
     676:	18 8b       	std	Y+16, r17	; 0x10
     678:	0f 87       	std	Y+15, r16	; 0x0f
    _delay_ms(1);
}
     67a:	63 96       	adiw	r28, 0x13	; 19
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <printDisplay>:

void printDisplay() {
     690:	df 93       	push	r29
     692:	cf 93       	push	r28
     694:	00 d0       	rcall	.+0      	; 0x696 <printDisplay+0x6>
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
    for (short int i = 0; i < 4; ++i) {
     69a:	1a 82       	std	Y+2, r1	; 0x02
     69c:	19 82       	std	Y+1, r1	; 0x01
     69e:	0f c0       	rjmp	.+30     	; 0x6be <printDisplay+0x2e>
        send_digit_to_display(i, display[i]);
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	29 81       	ldd	r18, Y+1	; 0x01
     6a6:	3a 81       	ldd	r19, Y+2	; 0x02
     6a8:	21 59       	subi	r18, 0x91	; 145
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	62 2f       	mov	r22, r18
     6b2:	0f df       	rcall	.-482    	; 0x4d2 <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	9a 83       	std	Y+2, r25	; 0x02
     6bc:	89 83       	std	Y+1, r24	; 0x01
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	9a 81       	ldd	r25, Y+2	; 0x02
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	91 05       	cpc	r25, r1
     6c6:	64 f3       	brlt	.-40     	; 0x6a0 <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     6da:	82 e3       	ldi	r24, 0x32	; 50
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	22 e3       	ldi	r18, 0x32	; 50
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	20 81       	ld	r18, Z
     6e6:	2f 71       	andi	r18, 0x1F	; 31
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18
  PORTD |= (1 << PD5);
     6ec:	82 e3       	ldi	r24, 0x32	; 50
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	22 e3       	ldi	r18, 0x32	; 50
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	20 81       	ld	r18, Z
     6f8:	20 62       	ori	r18, 0x20	; 32
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     6fe:	80 e3       	ldi	r24, 0x30	; 48
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	80 81       	ld	r24, Z
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	84 70       	andi	r24, 0x04	; 4
     70c:	90 70       	andi	r25, 0x00	; 0
     70e:	00 97       	sbiw	r24, 0x00	; 0
     710:	59 f0       	breq	.+22     	; 0x728 <number_key_pressed+0x56>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     712:	82 e3       	ldi	r24, 0x32	; 50
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	22 e3       	ldi	r18, 0x32	; 50
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	20 6e       	ori	r18, 0xE0	; 224
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
    return 0;
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	4f c0       	rjmp	.+158    	; 0x7c6 <number_key_pressed+0xf4>
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     728:	82 e3       	ldi	r24, 0x32	; 50
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	22 e3       	ldi	r18, 0x32	; 50
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	2f 71       	andi	r18, 0x1F	; 31
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
  PORTD |= (1 << PD6);
     73a:	82 e3       	ldi	r24, 0x32	; 50
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	22 e3       	ldi	r18, 0x32	; 50
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	f9 01       	movw	r30, r18
     744:	20 81       	ld	r18, Z
     746:	20 64       	ori	r18, 0x40	; 64
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     74c:	80 e3       	ldi	r24, 0x30	; 48
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	fc 01       	movw	r30, r24
     752:	80 81       	ld	r24, Z
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	84 70       	andi	r24, 0x04	; 4
     75a:	90 70       	andi	r25, 0x00	; 0
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	59 f0       	breq	.+22     	; 0x776 <number_key_pressed+0xa4>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     760:	82 e3       	ldi	r24, 0x32	; 50
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	22 e3       	ldi	r18, 0x32	; 50
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	f9 01       	movw	r30, r18
     76a:	20 81       	ld	r18, Z
     76c:	20 6e       	ori	r18, 0xE0	; 224
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
    return 1;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	28 c0       	rjmp	.+80     	; 0x7c6 <number_key_pressed+0xf4>
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     776:	82 e3       	ldi	r24, 0x32	; 50
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	22 e3       	ldi	r18, 0x32	; 50
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	20 81       	ld	r18, Z
     782:	2f 71       	andi	r18, 0x1F	; 31
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18
  PORTD |= (1 << PD7);
     788:	82 e3       	ldi	r24, 0x32	; 50
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	22 e3       	ldi	r18, 0x32	; 50
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	f9 01       	movw	r30, r18
     792:	20 81       	ld	r18, Z
     794:	20 68       	ori	r18, 0x80	; 128
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     79a:	80 e3       	ldi	r24, 0x30	; 48
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	fc 01       	movw	r30, r24
     7a0:	80 81       	ld	r24, Z
     7a2:	88 2f       	mov	r24, r24
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	84 70       	andi	r24, 0x04	; 4
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	59 f0       	breq	.+22     	; 0x7c4 <number_key_pressed+0xf2>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     7ae:	82 e3       	ldi	r24, 0x32	; 50
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	22 e3       	ldi	r18, 0x32	; 50
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	20 6e       	ori	r18, 0xE0	; 224
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
    return 2;
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <number_key_pressed+0xf4>
  // }

  // if (!isButton2) {
  //   return 2;
  // }
  return 42;
     7c4:	8a e2       	ldi	r24, 0x2A	; 42
}
     7c6:	cf 91       	pop	r28
     7c8:	df 91       	pop	r29
     7ca:	08 95       	ret

000007cc <ds1621_init>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_init()
{
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	0f 92       	push	r0
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     7d6:	17 d1       	rcall	.+558    	; 0xa06 <i2c_start>
     7d8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	11 f4       	brne	.+4      	; 0x7e4 <ds1621_init+0x18>
   {
   	 i2c_stop();
     7e0:	07 d2       	rcall	.+1038   	; 0xbf0 <i2c_stop>
  	 return;
     7e2:	19 c0       	rjmp	.+50     	; 0x816 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     7e4:	80 e9       	ldi	r24, 0x90	; 144
     7e6:	51 d1       	rcall	.+674    	; 0xa8a <i2c_sendAddress>
     7e8:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	11 f4       	brne	.+4      	; 0x7f4 <ds1621_init+0x28>
   {
  	 i2c_stop();
     7f0:	ff d1       	rcall	.+1022   	; 0xbf0 <i2c_stop>
  	 return;
     7f2:	11 c0       	rjmp	.+34     	; 0x816 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
     7f4:	8c ea       	ldi	r24, 0xAC	; 172
     7f6:	83 d1       	rcall	.+774    	; 0xafe <i2c_sendData>
     7f8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	11 f4       	brne	.+4      	; 0x804 <ds1621_init+0x38>
   {
  	 i2c_stop();
     800:	f7 d1       	rcall	.+1006   	; 0xbf0 <i2c_stop>
  	 return;
     802:	09 c0       	rjmp	.+18     	; 0x816 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	7b d1       	rcall	.+758    	; 0xafe <i2c_sendData>
     808:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	11 f4       	brne	.+4      	; 0x814 <ds1621_init+0x48>
   {
  	 i2c_stop();
     810:	ef d1       	rcall	.+990    	; 0xbf0 <i2c_stop>
	 return;
     812:	01 c0       	rjmp	.+2      	; 0x816 <ds1621_init+0x4a>
   } 

   i2c_stop();
     814:	ed d1       	rcall	.+986    	; 0xbf0 <i2c_stop>
}
     816:	0f 90       	pop	r0
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	08 95       	ret

0000081e <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	00 d0       	rcall	.+0      	; 0x824 <ds1621_sendCommand+0x6>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     82a:	ed d0       	rcall	.+474    	; 0xa06 <i2c_start>
     82c:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	11 f4       	brne	.+4      	; 0x838 <ds1621_sendCommand+0x1a>
   {
   	 i2c_stop();
     834:	dd d1       	rcall	.+954    	; 0xbf0 <i2c_stop>
	 return;
     836:	11 c0       	rjmp	.+34     	; 0x85a <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     838:	80 e9       	ldi	r24, 0x90	; 144
     83a:	27 d1       	rcall	.+590    	; 0xa8a <i2c_sendAddress>
     83c:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     83e:	89 81       	ldd	r24, Y+1	; 0x01
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	11 f4       	brne	.+4      	; 0x848 <ds1621_sendCommand+0x2a>
   {
	 i2c_stop();
     844:	d5 d1       	rcall	.+938    	; 0xbf0 <i2c_stop>
	 return;
     846:	09 c0       	rjmp	.+18     	; 0x85a <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendData(command);
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	59 d1       	rcall	.+690    	; 0xafe <i2c_sendData>
     84c:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	11 f4       	brne	.+4      	; 0x858 <ds1621_sendCommand+0x3a>
   {
	 i2c_stop();
     854:	cd d1       	rcall	.+922    	; 0xbf0 <i2c_stop>
	 return;
     856:	01 c0       	rjmp	.+2      	; 0x85a <ds1621_sendCommand+0x3c>
   } 

   i2c_stop();
     858:	cb d1       	rcall	.+918    	; 0xbf0 <i2c_stop>
}
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	cf 91       	pop	r28
     860:	df 91       	pop	r29
     862:	08 95       	ret

00000864 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	00 d0       	rcall	.+0      	; 0x86a <ds1621_readValue+0x6>
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	8b 83       	std	Y+3, r24	; 0x03
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     872:	c9 d0       	rcall	.+402    	; 0xa06 <i2c_start>
     874:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	19 f4       	brne	.+6      	; 0x882 <ds1621_readValue+0x1e>
   {
   	 i2c_stop();
     87c:	b9 d1       	rcall	.+882    	; 0xbf0 <i2c_stop>
	 return (0);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	27 c0       	rjmp	.+78     	; 0x8d0 <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     882:	80 e9       	ldi	r24, 0x90	; 144
     884:	02 d1       	rcall	.+516    	; 0xa8a <i2c_sendAddress>
     886:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	19 f4       	brne	.+6      	; 0x894 <ds1621_readValue+0x30>
   {
	 i2c_stop();
     88e:	b0 d1       	rcall	.+864    	; 0xbf0 <i2c_stop>
	 return (0);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	1e c0       	rjmp	.+60     	; 0x8d0 <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendData(value);
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	33 d1       	rcall	.+614    	; 0xafe <i2c_sendData>
     898:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	19 f4       	brne	.+6      	; 0x8a6 <ds1621_readValue+0x42>
   {
	 i2c_stop();
     8a0:	a7 d1       	rcall	.+846    	; 0xbf0 <i2c_stop>
	 return (0);
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	15 c0       	rjmp	.+42     	; 0x8d0 <ds1621_readValue+0x6c>
   } 

    errorStatus = i2c_repeatStart();
     8a6:	d0 d0       	rcall	.+416    	; 0xa48 <i2c_repeatStart>
     8a8:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	19 f4       	brne	.+6      	; 0x8b6 <ds1621_readValue+0x52>
   {
   	 i2c_stop();
     8b0:	9f d1       	rcall	.+830    	; 0xbf0 <i2c_stop>
	 return (0);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	0d c0       	rjmp	.+26     	; 0x8d0 <ds1621_readValue+0x6c>
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
     8b6:	81 e9       	ldi	r24, 0x91	; 145
     8b8:	e8 d0       	rcall	.+464    	; 0xa8a <i2c_sendAddress>
     8ba:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	81 30       	cpi	r24, 0x01	; 1
     8c0:	19 f4       	brne	.+6      	; 0x8c8 <ds1621_readValue+0x64>
   {
	 i2c_stop();
     8c2:	96 d1       	rcall	.+812    	; 0xbf0 <i2c_stop>
	 return (0);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <ds1621_readValue+0x6c>
   } 
 
   data = i2c_receiveData_NACK(); 
     8c8:	6b d1       	rcall	.+726    	; 0xba0 <i2c_receiveData_NACK>
     8ca:	8a 83       	std	Y+2, r24	; 0x02
   
   i2c_stop();
     8cc:	91 d1       	rcall	.+802    	; 0xbf0 <i2c_stop>
   
   return (data);
     8ce:	8a 81       	ldd	r24, Y+2	; 0x02
}	  
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	cf 91       	pop	r28
     8d8:	df 91       	pop	r29
     8da:	08 95       	ret

000008dc <getTemperature>:

//******************************************************************
//Function to read 
//******************************************************************    
signed char getTemperature(void)
{ 
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	2e 97       	sbiw	r28, 0x0e	; 14
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
  ds1621_sendCommand ( START_CONVERT );
     8f4:	8e ee       	ldi	r24, 0xEE	; 238
     8f6:	93 df       	rcall	.-218    	; 0x81e <ds1621_sendCommand>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	aa e7       	ldi	r26, 0x7A	; 122
     8fe:	b4 e4       	ldi	r27, 0x44	; 68
     900:	89 83       	std	Y+1, r24	; 0x01
     902:	9a 83       	std	Y+2, r25	; 0x02
     904:	ab 83       	std	Y+3, r26	; 0x03
     906:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     908:	69 81       	ldd	r22, Y+1	; 0x01
     90a:	7a 81       	ldd	r23, Y+2	; 0x02
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4a e7       	ldi	r20, 0x7A	; 122
     916:	54 e4       	ldi	r21, 0x44	; 68
     918:	39 d3       	rcall	.+1650   	; 0xf8c <__mulsf3>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	8d 83       	std	Y+5, r24	; 0x05
     920:	9e 83       	std	Y+6, r25	; 0x06
     922:	af 83       	std	Y+7, r26	; 0x07
     924:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     926:	11 e0       	ldi	r17, 0x01	; 1
     928:	6d 81       	ldd	r22, Y+5	; 0x05
     92a:	7e 81       	ldd	r23, Y+6	; 0x06
     92c:	8f 81       	ldd	r24, Y+7	; 0x07
     92e:	98 85       	ldd	r25, Y+8	; 0x08
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	5f e3       	ldi	r21, 0x3F	; 63
     938:	74 d4       	rcall	.+2280   	; 0x1222 <__ltsf2>
     93a:	88 23       	and	r24, r24
     93c:	0c f0       	brlt	.+2      	; 0x940 <getTemperature+0x64>
     93e:	10 e0       	ldi	r17, 0x00	; 0
     940:	11 23       	and	r17, r17
     942:	29 f0       	breq	.+10     	; 0x94e <getTemperature+0x72>
		__ticks = 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9a 87       	std	Y+10, r25	; 0x0a
     94a:	89 87       	std	Y+9, r24	; 0x09
     94c:	42 c0       	rjmp	.+132    	; 0x9d2 <getTemperature+0xf6>
	else if (__tmp > 65535)
     94e:	11 e0       	ldi	r17, 0x01	; 1
     950:	6d 81       	ldd	r22, Y+5	; 0x05
     952:	7e 81       	ldd	r23, Y+6	; 0x06
     954:	8f 81       	ldd	r24, Y+7	; 0x07
     956:	98 85       	ldd	r25, Y+8	; 0x08
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	3f ef       	ldi	r19, 0xFF	; 255
     95c:	4f e7       	ldi	r20, 0x7F	; 127
     95e:	57 e4       	ldi	r21, 0x47	; 71
     960:	0a d4       	rcall	.+2068   	; 0x1176 <__gtsf2>
     962:	18 16       	cp	r1, r24
     964:	0c f0       	brlt	.+2      	; 0x968 <getTemperature+0x8c>
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	11 23       	and	r17, r17
     96a:	51 f1       	breq	.+84     	; 0x9c0 <getTemperature+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     96c:	69 81       	ldd	r22, Y+1	; 0x01
     96e:	7a 81       	ldd	r23, Y+2	; 0x02
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	9c 81       	ldd	r25, Y+4	; 0x04
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e2       	ldi	r20, 0x20	; 32
     97a:	51 e4       	ldi	r21, 0x41	; 65
     97c:	07 d3       	rcall	.+1550   	; 0xf8c <__mulsf3>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	bc 01       	movw	r22, r24
     984:	cd 01       	movw	r24, r26
     986:	40 d1       	rcall	.+640    	; 0xc08 <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	9a 87       	std	Y+10, r25	; 0x0a
     98e:	89 87       	std	Y+9, r24	; 0x09
     990:	12 c0       	rjmp	.+36     	; 0x9b6 <getTemperature+0xda>
     992:	84 e6       	ldi	r24, 0x64	; 100
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	9c 87       	std	Y+12, r25	; 0x0c
     998:	8b 87       	std	Y+11, r24	; 0x0b
     99a:	8b 85       	ldd	r24, Y+11	; 0x0b
     99c:	9c 85       	ldd	r25, Y+12	; 0x0c
     99e:	8c 01       	movw	r16, r24
     9a0:	c8 01       	movw	r24, r16
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <getTemperature+0xc6>
     9a6:	8c 01       	movw	r16, r24
     9a8:	1c 87       	std	Y+12, r17	; 0x0c
     9aa:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ac:	89 85       	ldd	r24, Y+9	; 0x09
     9ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9a 87       	std	Y+10, r25	; 0x0a
     9b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b6:	89 85       	ldd	r24, Y+9	; 0x09
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	51 f7       	brne	.-44     	; 0x992 <getTemperature+0xb6>
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <getTemperature+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c0:	6d 81       	ldd	r22, Y+5	; 0x05
     9c2:	7e 81       	ldd	r23, Y+6	; 0x06
     9c4:	8f 81       	ldd	r24, Y+7	; 0x07
     9c6:	98 85       	ldd	r25, Y+8	; 0x08
     9c8:	1f d1       	rcall	.+574    	; 0xc08 <__fixunssfsi>
     9ca:	dc 01       	movw	r26, r24
     9cc:	cb 01       	movw	r24, r22
     9ce:	9a 87       	std	Y+10, r25	; 0x0a
     9d0:	89 87       	std	Y+9, r24	; 0x09
     9d2:	89 85       	ldd	r24, Y+9	; 0x09
     9d4:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d6:	9e 87       	std	Y+14, r25	; 0x0e
     9d8:	8d 87       	std	Y+13, r24	; 0x0d
     9da:	8d 85       	ldd	r24, Y+13	; 0x0d
     9dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     9de:	8c 01       	movw	r16, r24
     9e0:	c8 01       	movw	r24, r16
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	f1 f7       	brne	.-4      	; 0x9e2 <getTemperature+0x106>
     9e6:	8c 01       	movw	r16, r24
     9e8:	1e 87       	std	Y+14, r17	; 0x0e
     9ea:	0d 87       	std	Y+13, r16	; 0x0d
  
  _delay_ms(1000);
  
  return ds1621_readValue ( READ_TEMP );
     9ec:	8a ea       	ldi	r24, 0xAA	; 170
     9ee:	3a df       	rcall	.-396    	; 0x864 <ds1621_readValue>
     9f0:	2e 96       	adiw	r28, 0x0e	; 14
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	cf 91       	pop	r28
     9fe:	df 91       	pop	r29
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	08 95       	ret

00000a06 <i2c_start>:
#include <avr/io.h>
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     a0e:	86 e5       	ldi	r24, 0x56	; 86
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	24 ea       	ldi	r18, 0xA4	; 164
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     a18:	00 00       	nop
     a1a:	86 e5       	ldi	r24, 0x56	; 86
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	fc 01       	movw	r30, r24
     a20:	80 81       	ld	r24, Z
     a22:	88 23       	and	r24, r24
     a24:	d4 f7       	brge	.-12     	; 0xa1a <i2c_start+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
     a26:	81 e2       	ldi	r24, 0x21	; 33
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 81       	ld	r24, Z
     a2e:	88 2f       	mov	r24, r24
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	88 7f       	andi	r24, 0xF8	; 248
     a34:	90 70       	andi	r25, 0x00	; 0
     a36:	88 30       	cpi	r24, 0x08	; 8
     a38:	91 05       	cpc	r25, r1
     a3a:	11 f4       	brne	.+4      	; 0xa40 <i2c_start+0x3a>
    return (0);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <i2c_start+0x3c>
  else
    return (1);
     a40:	81 e0       	ldi	r24, 0x01	; 1
}
     a42:	cf 91       	pop	r28
     a44:	df 91       	pop	r29
     a46:	08 95       	ret

00000a48 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
     a48:	df 93       	push	r29
     a4a:	cf 93       	push	r28
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     a50:	86 e5       	ldi	r24, 0x56	; 86
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	24 ea       	ldi	r18, 0xA4	; 164
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
  while (!(TWCR & (1 << TWINT)))
     a5a:	00 00       	nop
     a5c:	86 e5       	ldi	r24, 0x56	; 86
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	fc 01       	movw	r30, r24
     a62:	80 81       	ld	r24, Z
     a64:	88 23       	and	r24, r24
     a66:	d4 f7       	brge	.-12     	; 0xa5c <i2c_repeatStart+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
     a68:	81 e2       	ldi	r24, 0x21	; 33
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	fc 01       	movw	r30, r24
     a6e:	80 81       	ld	r24, Z
     a70:	88 2f       	mov	r24, r24
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	88 7f       	andi	r24, 0xF8	; 248
     a76:	90 70       	andi	r25, 0x00	; 0
     a78:	80 31       	cpi	r24, 0x10	; 16
     a7a:	91 05       	cpc	r25, r1
     a7c:	11 f4       	brne	.+4      	; 0xa82 <i2c_repeatStart+0x3a>
    return (0);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <i2c_repeatStart+0x3c>
  else
    return (1);
     a82:	81 e0       	ldi	r24, 0x01	; 1
}
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <i2c_sendAddress>:
//**************************************************
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <i2c_sendAddress+0x6>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	88 2f       	mov	r24, r24
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	81 70       	andi	r24, 0x01	; 1
     a9e:	90 70       	andi	r25, 0x00	; 0
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	19 f4       	brne	.+6      	; 0xaaa <i2c_sendAddress+0x20>
    STATUS = MT_SLA_ACK;
     aa4:	88 e1       	ldi	r24, 0x18	; 24
     aa6:	89 83       	std	Y+1, r24	; 0x01
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <i2c_sendAddress+0x24>
  else
    STATUS = MR_SLA_ACK;
     aaa:	80 e4       	ldi	r24, 0x40	; 64
     aac:	89 83       	std	Y+1, r24	; 0x01

  TWDR = address;
     aae:	83 e2       	ldi	r24, 0x23	; 35
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	2a 81       	ldd	r18, Y+2	; 0x02
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     ab8:	86 e5       	ldi	r24, 0x56	; 86
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	24 e8       	ldi	r18, 0x84	; 132
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
     ac2:	00 00       	nop
     ac4:	86 e5       	ldi	r24, 0x56	; 86
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 23       	and	r24, r24
     ace:	d4 f7       	brge	.-12     	; 0xac4 <i2c_sendAddress+0x3a>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
     ad0:	81 e2       	ldi	r24, 0x21	; 33
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9c 01       	movw	r18, r24
     ade:	28 7f       	andi	r18, 0xF8	; 248
     ae0:	30 70       	andi	r19, 0x00	; 0
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	11 f4       	brne	.+4      	; 0xaf2 <i2c_sendAddress+0x68>
    return (0);
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <i2c_sendAddress+0x6a>
  else
    return (1);
     af2:	81 e0       	ldi	r24, 0x01	; 1
}
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	cf 91       	pop	r28
     afa:	df 91       	pop	r29
     afc:	08 95       	ret

00000afe <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	0f 92       	push	r0
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
     b0a:	83 e2       	ldi	r24, 0x23	; 35
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	29 81       	ldd	r18, Y+1	; 0x01
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     b14:	86 e5       	ldi	r24, 0x56	; 86
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	24 e8       	ldi	r18, 0x84	; 132
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
     b1e:	00 00       	nop
     b20:	86 e5       	ldi	r24, 0x56	; 86
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	fc 01       	movw	r30, r24
     b26:	80 81       	ld	r24, Z
     b28:	88 23       	and	r24, r24
     b2a:	d4 f7       	brge	.-12     	; 0xb20 <i2c_sendData+0x22>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
     b2c:	81 e2       	ldi	r24, 0x21	; 33
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	80 81       	ld	r24, Z
     b34:	88 2f       	mov	r24, r24
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	88 7f       	andi	r24, 0xF8	; 248
     b3a:	90 70       	andi	r25, 0x00	; 0
     b3c:	88 32       	cpi	r24, 0x28	; 40
     b3e:	91 05       	cpc	r25, r1
     b40:	11 f0       	breq	.+4      	; 0xb46 <i2c_sendData+0x48>
    return (1);
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <i2c_sendData+0x4a>
  else
    return (0);
     b46:	80 e0       	ldi	r24, 0x00	; 0
}
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	08 95       	ret

00000b50 <i2c_receiveData_ACK>:

//*****************************************************
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	0f 92       	push	r0
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     b5a:	86 e5       	ldi	r24, 0x56	; 86
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	24 ec       	ldi	r18, 0xC4	; 196
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     b64:	00 00       	nop
     b66:	86 e5       	ldi	r24, 0x56	; 86
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	88 23       	and	r24, r24
     b70:	d4 f7       	brge	.-12     	; 0xb66 <i2c_receiveData_ACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
     b72:	81 e2       	ldi	r24, 0x21	; 33
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	fc 01       	movw	r30, r24
     b78:	80 81       	ld	r24, Z
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	88 7f       	andi	r24, 0xF8	; 248
     b80:	90 70       	andi	r25, 0x00	; 0
     b82:	80 35       	cpi	r24, 0x50	; 80
     b84:	91 05       	cpc	r25, r1
     b86:	11 f0       	breq	.+4      	; 0xb8c <i2c_receiveData_ACK+0x3c>
    return (ERROR_CODE);
     b88:	8e e7       	ldi	r24, 0x7E	; 126
     b8a:	06 c0       	rjmp	.+12     	; 0xb98 <i2c_receiveData_ACK+0x48>

  data = TWDR;
     b8c:	83 e2       	ldi	r24, 0x23	; 35
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     b96:	89 81       	ldd	r24, Y+1	; 0x01
}
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <i2c_receiveData_NACK>:

//******************************************************************
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	0f 92       	push	r0
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
     baa:	86 e5       	ldi	r24, 0x56	; 86
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	24 e8       	ldi	r18, 0x84	; 132
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     bb4:	00 00       	nop
     bb6:	86 e5       	ldi	r24, 0x56	; 86
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	88 23       	and	r24, r24
     bc0:	d4 f7       	brge	.-12     	; 0xbb6 <i2c_receiveData_NACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
     bc2:	81 e2       	ldi	r24, 0x21	; 33
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	88 7f       	andi	r24, 0xF8	; 248
     bd0:	90 70       	andi	r25, 0x00	; 0
     bd2:	88 35       	cpi	r24, 0x58	; 88
     bd4:	91 05       	cpc	r25, r1
     bd6:	11 f0       	breq	.+4      	; 0xbdc <i2c_receiveData_NACK+0x3c>
    return (ERROR_CODE);
     bd8:	8e e7       	ldi	r24, 0x7E	; 126
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <i2c_receiveData_NACK+0x48>

  data = TWDR;
     bdc:	83 e2       	ldi	r24, 0x23	; 35
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
}
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
     bf8:	86 e5       	ldi	r24, 0x56	; 86
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	24 e9       	ldi	r18, 0x94	; 148
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	08 95       	ret

00000c08 <__fixunssfsi>:
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	7b 01       	movw	r14, r22
     c12:	8c 01       	movw	r16, r24
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	5f e4       	ldi	r21, 0x4F	; 79
     c1c:	d7 d2       	rcall	.+1454   	; 0x11cc <__gesf2>
     c1e:	87 fd       	sbrc	r24, 7
     c20:	0f c0       	rjmp	.+30     	; 0xc40 <__fixunssfsi+0x38>
     c22:	c8 01       	movw	r24, r16
     c24:	b7 01       	movw	r22, r14
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	5f e4       	ldi	r21, 0x4F	; 79
     c2e:	83 d1       	rcall	.+774    	; 0xf36 <__subsf3>
     c30:	23 d3       	rcall	.+1606   	; 0x1278 <__fixsfsi>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	20 50       	subi	r18, 0x00	; 0
     c38:	30 40       	sbci	r19, 0x00	; 0
     c3a:	40 40       	sbci	r20, 0x00	; 0
     c3c:	50 48       	sbci	r21, 0x80	; 128
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__fixunssfsi+0x42>
     c40:	c8 01       	movw	r24, r16
     c42:	b7 01       	movw	r22, r14
     c44:	19 d3       	rcall	.+1586   	; 0x1278 <__fixsfsi>
     c46:	9b 01       	movw	r18, r22
     c48:	ac 01       	movw	r20, r24
     c4a:	b9 01       	movw	r22, r18
     c4c:	ca 01       	movw	r24, r20
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	08 95       	ret

00000c58 <_fpadd_parts>:
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e1 e3       	ldi	r30, 0x31	; 49
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	ed c4       	rjmp	.+2522   	; 0x163c <__prologue_saves__+0x8>
     c62:	fc 01       	movw	r30, r24
     c64:	ea 01       	movw	r28, r20
     c66:	80 81       	ld	r24, Z
     c68:	82 30       	cpi	r24, 0x02	; 2
     c6a:	08 f4       	brcc	.+2      	; 0xc6e <_fpadd_parts+0x16>
     c6c:	38 c1       	rjmp	.+624    	; 0xede <_fpadd_parts+0x286>
     c6e:	db 01       	movw	r26, r22
     c70:	9c 91       	ld	r25, X
     c72:	92 30       	cpi	r25, 0x02	; 2
     c74:	08 f4       	brcc	.+2      	; 0xc78 <_fpadd_parts+0x20>
     c76:	30 c1       	rjmp	.+608    	; 0xed8 <_fpadd_parts+0x280>
     c78:	84 30       	cpi	r24, 0x04	; 4
     c7a:	59 f4       	brne	.+22     	; 0xc92 <_fpadd_parts+0x3a>
     c7c:	94 30       	cpi	r25, 0x04	; 4
     c7e:	09 f0       	breq	.+2      	; 0xc82 <_fpadd_parts+0x2a>
     c80:	2e c1       	rjmp	.+604    	; 0xede <_fpadd_parts+0x286>
     c82:	91 81       	ldd	r25, Z+1	; 0x01
     c84:	11 96       	adiw	r26, 0x01	; 1
     c86:	8c 91       	ld	r24, X
     c88:	11 97       	sbiw	r26, 0x01	; 1
     c8a:	98 17       	cp	r25, r24
     c8c:	09 f0       	breq	.+2      	; 0xc90 <_fpadd_parts+0x38>
     c8e:	21 c1       	rjmp	.+578    	; 0xed2 <_fpadd_parts+0x27a>
     c90:	26 c1       	rjmp	.+588    	; 0xede <_fpadd_parts+0x286>
     c92:	94 30       	cpi	r25, 0x04	; 4
     c94:	09 f4       	brne	.+2      	; 0xc98 <_fpadd_parts+0x40>
     c96:	20 c1       	rjmp	.+576    	; 0xed8 <_fpadd_parts+0x280>
     c98:	92 30       	cpi	r25, 0x02	; 2
     c9a:	b1 f4       	brne	.+44     	; 0xcc8 <_fpadd_parts+0x70>
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	09 f0       	breq	.+2      	; 0xca2 <_fpadd_parts+0x4a>
     ca0:	1e c1       	rjmp	.+572    	; 0xede <_fpadd_parts+0x286>
     ca2:	ca 01       	movw	r24, r20
     ca4:	af 01       	movw	r20, r30
     ca6:	28 e0       	ldi	r18, 0x08	; 8
     ca8:	da 01       	movw	r26, r20
     caa:	0d 90       	ld	r0, X+
     cac:	ad 01       	movw	r20, r26
     cae:	dc 01       	movw	r26, r24
     cb0:	0d 92       	st	X+, r0
     cb2:	cd 01       	movw	r24, r26
     cb4:	21 50       	subi	r18, 0x01	; 1
     cb6:	c1 f7       	brne	.-16     	; 0xca8 <_fpadd_parts+0x50>
     cb8:	db 01       	movw	r26, r22
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	8c 91       	ld	r24, X
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	89 23       	and	r24, r25
     cc4:	89 83       	std	Y+1, r24	; 0x01
     cc6:	0a c1       	rjmp	.+532    	; 0xedc <_fpadd_parts+0x284>
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	09 f4       	brne	.+2      	; 0xcce <_fpadd_parts+0x76>
     ccc:	05 c1       	rjmp	.+522    	; 0xed8 <_fpadd_parts+0x280>
     cce:	c2 80       	ldd	r12, Z+2	; 0x02
     cd0:	d3 80       	ldd	r13, Z+3	; 0x03
     cd2:	db 01       	movw	r26, r22
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	6d 90       	ld	r6, X+
     cd8:	7c 90       	ld	r7, X
     cda:	13 97       	sbiw	r26, 0x03	; 3
     cdc:	24 81       	ldd	r18, Z+4	; 0x04
     cde:	35 81       	ldd	r19, Z+5	; 0x05
     ce0:	46 81       	ldd	r20, Z+6	; 0x06
     ce2:	57 81       	ldd	r21, Z+7	; 0x07
     ce4:	14 96       	adiw	r26, 0x04	; 4
     ce6:	ed 90       	ld	r14, X+
     ce8:	fd 90       	ld	r15, X+
     cea:	0d 91       	ld	r16, X+
     cec:	1c 91       	ld	r17, X
     cee:	17 97       	sbiw	r26, 0x07	; 7
     cf0:	c6 01       	movw	r24, r12
     cf2:	86 19       	sub	r24, r6
     cf4:	97 09       	sbc	r25, r7
     cf6:	5c 01       	movw	r10, r24
     cf8:	97 ff       	sbrs	r25, 7
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <_fpadd_parts+0xac>
     cfc:	aa 24       	eor	r10, r10
     cfe:	bb 24       	eor	r11, r11
     d00:	a8 1a       	sub	r10, r24
     d02:	b9 0a       	sbc	r11, r25
     d04:	b0 e2       	ldi	r27, 0x20	; 32
     d06:	ab 16       	cp	r10, r27
     d08:	b1 04       	cpc	r11, r1
     d0a:	0c f0       	brlt	.+2      	; 0xd0e <_fpadd_parts+0xb6>
     d0c:	61 c0       	rjmp	.+194    	; 0xdd0 <_fpadd_parts+0x178>
     d0e:	18 16       	cp	r1, r24
     d10:	19 06       	cpc	r1, r25
     d12:	6c f5       	brge	.+90     	; 0xd6e <_fpadd_parts+0x116>
     d14:	37 01       	movw	r6, r14
     d16:	48 01       	movw	r8, r16
     d18:	0a 2c       	mov	r0, r10
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <_fpadd_parts+0xcc>
     d1c:	96 94       	lsr	r9
     d1e:	87 94       	ror	r8
     d20:	77 94       	ror	r7
     d22:	67 94       	ror	r6
     d24:	0a 94       	dec	r0
     d26:	d2 f7       	brpl	.-12     	; 0xd1c <_fpadd_parts+0xc4>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	0a 2c       	mov	r0, r10
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <_fpadd_parts+0xe4>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	0a 94       	dec	r0
     d3e:	d2 f7       	brpl	.-12     	; 0xd34 <_fpadd_parts+0xdc>
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	a1 09       	sbc	r26, r1
     d44:	b1 09       	sbc	r27, r1
     d46:	8e 21       	and	r24, r14
     d48:	9f 21       	and	r25, r15
     d4a:	a0 23       	and	r26, r16
     d4c:	b1 23       	and	r27, r17
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	e3 94       	inc	r14
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	a1 05       	cpc	r26, r1
     d5a:	b1 05       	cpc	r27, r1
     d5c:	19 f4       	brne	.+6      	; 0xd64 <_fpadd_parts+0x10c>
     d5e:	ee 24       	eor	r14, r14
     d60:	ff 24       	eor	r15, r15
     d62:	87 01       	movw	r16, r14
     d64:	e6 28       	or	r14, r6
     d66:	f7 28       	or	r15, r7
     d68:	08 29       	or	r16, r8
     d6a:	19 29       	or	r17, r9
     d6c:	3c c0       	rjmp	.+120    	; 0xde6 <_fpadd_parts+0x18e>
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	d1 f1       	breq	.+116    	; 0xde6 <_fpadd_parts+0x18e>
     d72:	ca 0c       	add	r12, r10
     d74:	db 1c       	adc	r13, r11
     d76:	39 01       	movw	r6, r18
     d78:	4a 01       	movw	r8, r20
     d7a:	0a 2c       	mov	r0, r10
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <_fpadd_parts+0x12e>
     d7e:	96 94       	lsr	r9
     d80:	87 94       	ror	r8
     d82:	77 94       	ror	r7
     d84:	67 94       	ror	r6
     d86:	0a 94       	dec	r0
     d88:	d2 f7       	brpl	.-12     	; 0xd7e <_fpadd_parts+0x126>
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	0a 2c       	mov	r0, r10
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <_fpadd_parts+0x146>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	aa 1f       	adc	r26, r26
     d9c:	bb 1f       	adc	r27, r27
     d9e:	0a 94       	dec	r0
     da0:	d2 f7       	brpl	.-12     	; 0xd96 <_fpadd_parts+0x13e>
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	a1 09       	sbc	r26, r1
     da6:	b1 09       	sbc	r27, r1
     da8:	82 23       	and	r24, r18
     daa:	93 23       	and	r25, r19
     dac:	a4 23       	and	r26, r20
     dae:	b5 23       	and	r27, r21
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	a1 05       	cpc	r26, r1
     dbc:	b1 05       	cpc	r27, r1
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <_fpadd_parts+0x16e>
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	a9 01       	movw	r20, r18
     dc6:	26 29       	or	r18, r6
     dc8:	37 29       	or	r19, r7
     dca:	48 29       	or	r20, r8
     dcc:	59 29       	or	r21, r9
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <_fpadd_parts+0x18e>
     dd0:	6c 14       	cp	r6, r12
     dd2:	7d 04       	cpc	r7, r13
     dd4:	24 f4       	brge	.+8      	; 0xdde <_fpadd_parts+0x186>
     dd6:	ee 24       	eor	r14, r14
     dd8:	ff 24       	eor	r15, r15
     dda:	87 01       	movw	r16, r14
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <_fpadd_parts+0x18e>
     dde:	63 01       	movw	r12, r6
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	a9 01       	movw	r20, r18
     de6:	81 81       	ldd	r24, Z+1	; 0x01
     de8:	fb 01       	movw	r30, r22
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	89 17       	cp	r24, r25
     dee:	09 f4       	brne	.+2      	; 0xdf2 <_fpadd_parts+0x19a>
     df0:	45 c0       	rjmp	.+138    	; 0xe7c <_fpadd_parts+0x224>
     df2:	88 23       	and	r24, r24
     df4:	49 f0       	breq	.+18     	; 0xe08 <_fpadd_parts+0x1b0>
     df6:	d8 01       	movw	r26, r16
     df8:	c7 01       	movw	r24, r14
     dfa:	82 1b       	sub	r24, r18
     dfc:	93 0b       	sbc	r25, r19
     dfe:	a4 0b       	sbc	r26, r20
     e00:	b5 0b       	sbc	r27, r21
     e02:	9c 01       	movw	r18, r24
     e04:	ad 01       	movw	r20, r26
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <_fpadd_parts+0x1b8>
     e08:	2e 19       	sub	r18, r14
     e0a:	3f 09       	sbc	r19, r15
     e0c:	40 0b       	sbc	r20, r16
     e0e:	51 0b       	sbc	r21, r17
     e10:	57 fd       	sbrc	r21, 7
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <_fpadd_parts+0x1c4>
     e14:	19 82       	std	Y+1, r1	; 0x01
     e16:	db 82       	std	Y+3, r13	; 0x03
     e18:	ca 82       	std	Y+2, r12	; 0x02
     e1a:	0b c0       	rjmp	.+22     	; 0xe32 <_fpadd_parts+0x1da>
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	89 83       	std	Y+1, r24	; 0x01
     e20:	db 82       	std	Y+3, r13	; 0x03
     e22:	ca 82       	std	Y+2, r12	; 0x02
     e24:	50 95       	com	r21
     e26:	40 95       	com	r20
     e28:	30 95       	com	r19
     e2a:	21 95       	neg	r18
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
     e2e:	4f 4f       	sbci	r20, 0xFF	; 255
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
     e32:	2c 83       	std	Y+4, r18	; 0x04
     e34:	3d 83       	std	Y+5, r19	; 0x05
     e36:	4e 83       	std	Y+6, r20	; 0x06
     e38:	5f 83       	std	Y+7, r21	; 0x07
     e3a:	0d c0       	rjmp	.+26     	; 0xe56 <_fpadd_parts+0x1fe>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	aa 1f       	adc	r26, r26
     e42:	bb 1f       	adc	r27, r27
     e44:	8c 83       	std	Y+4, r24	; 0x04
     e46:	9d 83       	std	Y+5, r25	; 0x05
     e48:	ae 83       	std	Y+6, r26	; 0x06
     e4a:	bf 83       	std	Y+7, r27	; 0x07
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	9b 81       	ldd	r25, Y+3	; 0x03
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	9b 83       	std	Y+3, r25	; 0x03
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	9d 81       	ldd	r25, Y+5	; 0x05
     e5a:	ae 81       	ldd	r26, Y+6	; 0x06
     e5c:	bf 81       	ldd	r27, Y+7	; 0x07
     e5e:	9c 01       	movw	r18, r24
     e60:	ad 01       	movw	r20, r26
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	30 40       	sbci	r19, 0x00	; 0
     e66:	40 40       	sbci	r20, 0x00	; 0
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	2f 3f       	cpi	r18, 0xFF	; 255
     e6c:	ef ef       	ldi	r30, 0xFF	; 255
     e6e:	3e 07       	cpc	r19, r30
     e70:	ef ef       	ldi	r30, 0xFF	; 255
     e72:	4e 07       	cpc	r20, r30
     e74:	ef e3       	ldi	r30, 0x3F	; 63
     e76:	5e 07       	cpc	r21, r30
     e78:	08 f3       	brcs	.-62     	; 0xe3c <_fpadd_parts+0x1e4>
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <_fpadd_parts+0x23a>
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	db 82       	std	Y+3, r13	; 0x03
     e80:	ca 82       	std	Y+2, r12	; 0x02
     e82:	2e 0d       	add	r18, r14
     e84:	3f 1d       	adc	r19, r15
     e86:	40 1f       	adc	r20, r16
     e88:	51 1f       	adc	r21, r17
     e8a:	2c 83       	std	Y+4, r18	; 0x04
     e8c:	3d 83       	std	Y+5, r19	; 0x05
     e8e:	4e 83       	std	Y+6, r20	; 0x06
     e90:	5f 83       	std	Y+7, r21	; 0x07
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	88 83       	st	Y, r24
     e96:	2c 81       	ldd	r18, Y+4	; 0x04
     e98:	3d 81       	ldd	r19, Y+5	; 0x05
     e9a:	4e 81       	ldd	r20, Y+6	; 0x06
     e9c:	5f 81       	ldd	r21, Y+7	; 0x07
     e9e:	57 ff       	sbrs	r21, 7
     ea0:	1d c0       	rjmp	.+58     	; 0xedc <_fpadd_parts+0x284>
     ea2:	da 01       	movw	r26, r20
     ea4:	c9 01       	movw	r24, r18
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	a0 70       	andi	r26, 0x00	; 0
     eac:	b0 70       	andi	r27, 0x00	; 0
     eae:	56 95       	lsr	r21
     eb0:	47 95       	ror	r20
     eb2:	37 95       	ror	r19
     eb4:	27 95       	ror	r18
     eb6:	82 2b       	or	r24, r18
     eb8:	93 2b       	or	r25, r19
     eba:	a4 2b       	or	r26, r20
     ebc:	b5 2b       	or	r27, r21
     ebe:	8c 83       	std	Y+4, r24	; 0x04
     ec0:	9d 83       	std	Y+5, r25	; 0x05
     ec2:	ae 83       	std	Y+6, r26	; 0x06
     ec4:	bf 83       	std	Y+7, r27	; 0x07
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	9b 83       	std	Y+3, r25	; 0x03
     ece:	8a 83       	std	Y+2, r24	; 0x02
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <_fpadd_parts+0x284>
     ed2:	ea e7       	ldi	r30, 0x7A	; 122
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	03 c0       	rjmp	.+6      	; 0xede <_fpadd_parts+0x286>
     ed8:	fb 01       	movw	r30, r22
     eda:	01 c0       	rjmp	.+2      	; 0xede <_fpadd_parts+0x286>
     edc:	fe 01       	movw	r30, r28
     ede:	cf 01       	movw	r24, r30
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	ee e0       	ldi	r30, 0x0E	; 14
     ee6:	c6 c3       	rjmp	.+1932   	; 0x1674 <__epilogue_restores__+0x8>

00000ee8 <__addsf3>:
     ee8:	a0 e2       	ldi	r26, 0x20	; 32
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e9 e7       	ldi	r30, 0x79	; 121
     eee:	f7 e0       	ldi	r31, 0x07	; 7
     ef0:	ad c3       	rjmp	.+1882   	; 0x164c <__prologue_saves__+0x18>
     ef2:	69 83       	std	Y+1, r22	; 0x01
     ef4:	7a 83       	std	Y+2, r23	; 0x02
     ef6:	8b 83       	std	Y+3, r24	; 0x03
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	2d 83       	std	Y+5, r18	; 0x05
     efc:	3e 83       	std	Y+6, r19	; 0x06
     efe:	4f 83       	std	Y+7, r20	; 0x07
     f00:	58 87       	std	Y+8, r21	; 0x08
     f02:	89 e0       	ldi	r24, 0x09	; 9
     f04:	e8 2e       	mov	r14, r24
     f06:	f1 2c       	mov	r15, r1
     f08:	ec 0e       	add	r14, r28
     f0a:	fd 1e       	adc	r15, r29
     f0c:	ce 01       	movw	r24, r28
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	b7 01       	movw	r22, r14
     f12:	ce d2       	rcall	.+1436   	; 0x14b0 <__unpack_f>
     f14:	8e 01       	movw	r16, r28
     f16:	0f 5e       	subi	r16, 0xEF	; 239
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	ce 01       	movw	r24, r28
     f1c:	05 96       	adiw	r24, 0x05	; 5
     f1e:	b8 01       	movw	r22, r16
     f20:	c7 d2       	rcall	.+1422   	; 0x14b0 <__unpack_f>
     f22:	c7 01       	movw	r24, r14
     f24:	b8 01       	movw	r22, r16
     f26:	ae 01       	movw	r20, r28
     f28:	47 5e       	subi	r20, 0xE7	; 231
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	95 de       	rcall	.-726    	; 0xc58 <_fpadd_parts>
     f2e:	f3 d1       	rcall	.+998    	; 0x1316 <__pack_f>
     f30:	a0 96       	adiw	r28, 0x20	; 32
     f32:	e6 e0       	ldi	r30, 0x06	; 6
     f34:	a7 c3       	rjmp	.+1870   	; 0x1684 <__epilogue_restores__+0x18>

00000f36 <__subsf3>:
     f36:	a0 e2       	ldi	r26, 0x20	; 32
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e0 ea       	ldi	r30, 0xA0	; 160
     f3c:	f7 e0       	ldi	r31, 0x07	; 7
     f3e:	86 c3       	rjmp	.+1804   	; 0x164c <__prologue_saves__+0x18>
     f40:	69 83       	std	Y+1, r22	; 0x01
     f42:	7a 83       	std	Y+2, r23	; 0x02
     f44:	8b 83       	std	Y+3, r24	; 0x03
     f46:	9c 83       	std	Y+4, r25	; 0x04
     f48:	2d 83       	std	Y+5, r18	; 0x05
     f4a:	3e 83       	std	Y+6, r19	; 0x06
     f4c:	4f 83       	std	Y+7, r20	; 0x07
     f4e:	58 87       	std	Y+8, r21	; 0x08
     f50:	8e 01       	movw	r16, r28
     f52:	07 5f       	subi	r16, 0xF7	; 247
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	b8 01       	movw	r22, r16
     f5c:	a9 d2       	rcall	.+1362   	; 0x14b0 <__unpack_f>
     f5e:	91 e1       	ldi	r25, 0x11	; 17
     f60:	e9 2e       	mov	r14, r25
     f62:	f1 2c       	mov	r15, r1
     f64:	ec 0e       	add	r14, r28
     f66:	fd 1e       	adc	r15, r29
     f68:	ce 01       	movw	r24, r28
     f6a:	05 96       	adiw	r24, 0x05	; 5
     f6c:	b7 01       	movw	r22, r14
     f6e:	a0 d2       	rcall	.+1344   	; 0x14b0 <__unpack_f>
     f70:	8a 89       	ldd	r24, Y+18	; 0x12
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	89 27       	eor	r24, r25
     f76:	8a 8b       	std	Y+18, r24	; 0x12
     f78:	c8 01       	movw	r24, r16
     f7a:	b7 01       	movw	r22, r14
     f7c:	ae 01       	movw	r20, r28
     f7e:	47 5e       	subi	r20, 0xE7	; 231
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	6a de       	rcall	.-812    	; 0xc58 <_fpadd_parts>
     f84:	c8 d1       	rcall	.+912    	; 0x1316 <__pack_f>
     f86:	a0 96       	adiw	r28, 0x20	; 32
     f88:	e6 e0       	ldi	r30, 0x06	; 6
     f8a:	7c c3       	rjmp	.+1784   	; 0x1684 <__epilogue_restores__+0x18>

00000f8c <__mulsf3>:
     f8c:	a0 e2       	ldi	r26, 0x20	; 32
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb ec       	ldi	r30, 0xCB	; 203
     f92:	f7 e0       	ldi	r31, 0x07	; 7
     f94:	4f c3       	rjmp	.+1694   	; 0x1634 <__prologue_saves__>
     f96:	69 83       	std	Y+1, r22	; 0x01
     f98:	7a 83       	std	Y+2, r23	; 0x02
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	9c 83       	std	Y+4, r25	; 0x04
     f9e:	2d 83       	std	Y+5, r18	; 0x05
     fa0:	3e 83       	std	Y+6, r19	; 0x06
     fa2:	4f 83       	std	Y+7, r20	; 0x07
     fa4:	58 87       	std	Y+8, r21	; 0x08
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	be 01       	movw	r22, r28
     fac:	67 5f       	subi	r22, 0xF7	; 247
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	7f d2       	rcall	.+1278   	; 0x14b0 <__unpack_f>
     fb2:	ce 01       	movw	r24, r28
     fb4:	05 96       	adiw	r24, 0x05	; 5
     fb6:	be 01       	movw	r22, r28
     fb8:	6f 5e       	subi	r22, 0xEF	; 239
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	79 d2       	rcall	.+1266   	; 0x14b0 <__unpack_f>
     fbe:	99 85       	ldd	r25, Y+9	; 0x09
     fc0:	92 30       	cpi	r25, 0x02	; 2
     fc2:	78 f0       	brcs	.+30     	; 0xfe2 <__mulsf3+0x56>
     fc4:	89 89       	ldd	r24, Y+17	; 0x11
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	c0 f0       	brcs	.+48     	; 0xffa <__mulsf3+0x6e>
     fca:	94 30       	cpi	r25, 0x04	; 4
     fcc:	19 f4       	brne	.+6      	; 0xfd4 <__mulsf3+0x48>
     fce:	82 30       	cpi	r24, 0x02	; 2
     fd0:	41 f4       	brne	.+16     	; 0xfe2 <__mulsf3+0x56>
     fd2:	cb c0       	rjmp	.+406    	; 0x116a <__mulsf3+0x1de>
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	19 f4       	brne	.+6      	; 0xfde <__mulsf3+0x52>
     fd8:	92 30       	cpi	r25, 0x02	; 2
     fda:	79 f4       	brne	.+30     	; 0xffa <__mulsf3+0x6e>
     fdc:	c6 c0       	rjmp	.+396    	; 0x116a <__mulsf3+0x1de>
     fde:	92 30       	cpi	r25, 0x02	; 2
     fe0:	51 f4       	brne	.+20     	; 0xff6 <__mulsf3+0x6a>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	2a 85       	ldd	r18, Y+10	; 0x0a
     fe6:	9a 89       	ldd	r25, Y+18	; 0x12
     fe8:	29 17       	cp	r18, r25
     fea:	09 f4       	brne	.+2      	; 0xfee <__mulsf3+0x62>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	8a 87       	std	Y+10, r24	; 0x0a
     ff0:	ce 01       	movw	r24, r28
     ff2:	09 96       	adiw	r24, 0x09	; 9
     ff4:	bc c0       	rjmp	.+376    	; 0x116e <__mulsf3+0x1e2>
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	51 f4       	brne	.+20     	; 0x100e <__mulsf3+0x82>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	2a 85       	ldd	r18, Y+10	; 0x0a
     ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    1000:	29 17       	cp	r18, r25
    1002:	09 f4       	brne	.+2      	; 0x1006 <__mulsf3+0x7a>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	8a 8b       	std	Y+18, r24	; 0x12
    1008:	ce 01       	movw	r24, r28
    100a:	41 96       	adiw	r24, 0x11	; 17
    100c:	b0 c0       	rjmp	.+352    	; 0x116e <__mulsf3+0x1e2>
    100e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1010:	7e 84       	ldd	r7, Y+14	; 0x0e
    1012:	8f 84       	ldd	r8, Y+15	; 0x0f
    1014:	98 88       	ldd	r9, Y+16	; 0x10
    1016:	ed 88       	ldd	r14, Y+21	; 0x15
    1018:	fe 88       	ldd	r15, Y+22	; 0x16
    101a:	0f 89       	ldd	r16, Y+23	; 0x17
    101c:	18 8d       	ldd	r17, Y+24	; 0x18
    101e:	e0 e2       	ldi	r30, 0x20	; 32
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	dc 01       	movw	r26, r24
    1028:	aa 24       	eor	r10, r10
    102a:	bb 24       	eor	r11, r11
    102c:	65 01       	movw	r12, r10
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	b3 01       	movw	r22, r6
    1036:	61 70       	andi	r22, 0x01	; 1
    1038:	70 70       	andi	r23, 0x00	; 0
    103a:	61 15       	cp	r22, r1
    103c:	71 05       	cpc	r23, r1
    103e:	d1 f0       	breq	.+52     	; 0x1074 <__mulsf3+0xe8>
    1040:	2e 0d       	add	r18, r14
    1042:	3f 1d       	adc	r19, r15
    1044:	40 1f       	adc	r20, r16
    1046:	51 1f       	adc	r21, r17
    1048:	15 01       	movw	r2, r10
    104a:	26 01       	movw	r4, r12
    104c:	28 0e       	add	r2, r24
    104e:	39 1e       	adc	r3, r25
    1050:	4a 1e       	adc	r4, r26
    1052:	5b 1e       	adc	r5, r27
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e0       	ldi	r26, 0x00	; 0
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	2e 15       	cp	r18, r14
    105e:	3f 05       	cpc	r19, r15
    1060:	40 07       	cpc	r20, r16
    1062:	51 07       	cpc	r21, r17
    1064:	18 f0       	brcs	.+6      	; 0x106c <__mulsf3+0xe0>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	dc 01       	movw	r26, r24
    106c:	82 0d       	add	r24, r2
    106e:	93 1d       	adc	r25, r3
    1070:	a4 1d       	adc	r26, r4
    1072:	b5 1d       	adc	r27, r5
    1074:	aa 0c       	add	r10, r10
    1076:	bb 1c       	adc	r11, r11
    1078:	cc 1c       	adc	r12, r12
    107a:	dd 1c       	adc	r13, r13
    107c:	17 ff       	sbrs	r17, 7
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <__mulsf3+0x106>
    1080:	61 e0       	ldi	r22, 0x01	; 1
    1082:	26 2e       	mov	r2, r22
    1084:	31 2c       	mov	r3, r1
    1086:	41 2c       	mov	r4, r1
    1088:	51 2c       	mov	r5, r1
    108a:	a2 28       	or	r10, r2
    108c:	b3 28       	or	r11, r3
    108e:	c4 28       	or	r12, r4
    1090:	d5 28       	or	r13, r5
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	49 f0       	breq	.+18     	; 0x10a8 <__mulsf3+0x11c>
    1096:	ee 0c       	add	r14, r14
    1098:	ff 1c       	adc	r15, r15
    109a:	00 1f       	adc	r16, r16
    109c:	11 1f       	adc	r17, r17
    109e:	96 94       	lsr	r9
    10a0:	87 94       	ror	r8
    10a2:	77 94       	ror	r7
    10a4:	67 94       	ror	r6
    10a6:	c6 cf       	rjmp	.-116    	; 0x1034 <__mulsf3+0xa8>
    10a8:	6b 89       	ldd	r22, Y+19	; 0x13
    10aa:	7c 89       	ldd	r23, Y+20	; 0x14
    10ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    10ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    10b0:	6e 0f       	add	r22, r30
    10b2:	7f 1f       	adc	r23, r31
    10b4:	6e 5f       	subi	r22, 0xFE	; 254
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	7c 8f       	std	Y+28, r23	; 0x1c
    10ba:	6b 8f       	std	Y+27, r22	; 0x1b
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	ea 85       	ldd	r30, Y+10	; 0x0a
    10c0:	7a 89       	ldd	r23, Y+18	; 0x12
    10c2:	e7 17       	cp	r30, r23
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <__mulsf3+0x13c>
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	6a 8f       	std	Y+26, r22	; 0x1a
    10ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    10cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    10ce:	10 c0       	rjmp	.+32     	; 0x10f0 <__mulsf3+0x164>
    10d0:	fc 01       	movw	r30, r24
    10d2:	e1 70       	andi	r30, 0x01	; 1
    10d4:	f0 70       	andi	r31, 0x00	; 0
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	29 f0       	breq	.+10     	; 0x10e4 <__mulsf3+0x158>
    10da:	56 95       	lsr	r21
    10dc:	47 95       	ror	r20
    10de:	37 95       	ror	r19
    10e0:	27 95       	ror	r18
    10e2:	50 68       	ori	r21, 0x80	; 128
    10e4:	b6 95       	lsr	r27
    10e6:	a7 95       	ror	r26
    10e8:	97 95       	ror	r25
    10ea:	87 95       	ror	r24
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	b7 fd       	sbrc	r27, 7
    10f2:	ee cf       	rjmp	.-36     	; 0x10d0 <__mulsf3+0x144>
    10f4:	0c c0       	rjmp	.+24     	; 0x110e <__mulsf3+0x182>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	aa 1f       	adc	r26, r26
    10fc:	bb 1f       	adc	r27, r27
    10fe:	57 fd       	sbrc	r21, 7
    1100:	81 60       	ori	r24, 0x01	; 1
    1102:	22 0f       	add	r18, r18
    1104:	33 1f       	adc	r19, r19
    1106:	44 1f       	adc	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	61 50       	subi	r22, 0x01	; 1
    110c:	70 40       	sbci	r23, 0x00	; 0
    110e:	80 30       	cpi	r24, 0x00	; 0
    1110:	e0 e0       	ldi	r30, 0x00	; 0
    1112:	9e 07       	cpc	r25, r30
    1114:	e0 e0       	ldi	r30, 0x00	; 0
    1116:	ae 07       	cpc	r26, r30
    1118:	e0 e4       	ldi	r30, 0x40	; 64
    111a:	be 07       	cpc	r27, r30
    111c:	60 f3       	brcs	.-40     	; 0x10f6 <__mulsf3+0x16a>
    111e:	6b 8f       	std	Y+27, r22	; 0x1b
    1120:	7c 8f       	std	Y+28, r23	; 0x1c
    1122:	6f e7       	ldi	r22, 0x7F	; 127
    1124:	e6 2e       	mov	r14, r22
    1126:	f1 2c       	mov	r15, r1
    1128:	01 2d       	mov	r16, r1
    112a:	11 2d       	mov	r17, r1
    112c:	e8 22       	and	r14, r24
    112e:	f9 22       	and	r15, r25
    1130:	0a 23       	and	r16, r26
    1132:	1b 23       	and	r17, r27
    1134:	60 e4       	ldi	r22, 0x40	; 64
    1136:	e6 16       	cp	r14, r22
    1138:	f1 04       	cpc	r15, r1
    113a:	01 05       	cpc	r16, r1
    113c:	11 05       	cpc	r17, r1
    113e:	61 f4       	brne	.+24     	; 0x1158 <__mulsf3+0x1cc>
    1140:	87 fd       	sbrc	r24, 7
    1142:	0a c0       	rjmp	.+20     	; 0x1158 <__mulsf3+0x1cc>
    1144:	21 15       	cp	r18, r1
    1146:	31 05       	cpc	r19, r1
    1148:	41 05       	cpc	r20, r1
    114a:	51 05       	cpc	r21, r1
    114c:	29 f0       	breq	.+10     	; 0x1158 <__mulsf3+0x1cc>
    114e:	80 5c       	subi	r24, 0xC0	; 192
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	af 4f       	sbci	r26, 0xFF	; 255
    1154:	bf 4f       	sbci	r27, 0xFF	; 255
    1156:	80 78       	andi	r24, 0x80	; 128
    1158:	8d 8f       	std	Y+29, r24	; 0x1d
    115a:	9e 8f       	std	Y+30, r25	; 0x1e
    115c:	af 8f       	std	Y+31, r26	; 0x1f
    115e:	b8 a3       	std	Y+32, r27	; 0x20
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	89 8f       	std	Y+25, r24	; 0x19
    1164:	ce 01       	movw	r24, r28
    1166:	49 96       	adiw	r24, 0x19	; 25
    1168:	02 c0       	rjmp	.+4      	; 0x116e <__mulsf3+0x1e2>
    116a:	8a e7       	ldi	r24, 0x7A	; 122
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	d3 d0       	rcall	.+422    	; 0x1316 <__pack_f>
    1170:	a0 96       	adiw	r28, 0x20	; 32
    1172:	e2 e1       	ldi	r30, 0x12	; 18
    1174:	7b c2       	rjmp	.+1270   	; 0x166c <__epilogue_restores__>

00001176 <__gtsf2>:
    1176:	a8 e1       	ldi	r26, 0x18	; 24
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e0 ec       	ldi	r30, 0xC0	; 192
    117c:	f8 e0       	ldi	r31, 0x08	; 8
    117e:	66 c2       	rjmp	.+1228   	; 0x164c <__prologue_saves__+0x18>
    1180:	69 83       	std	Y+1, r22	; 0x01
    1182:	7a 83       	std	Y+2, r23	; 0x02
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	9c 83       	std	Y+4, r25	; 0x04
    1188:	2d 83       	std	Y+5, r18	; 0x05
    118a:	3e 83       	std	Y+6, r19	; 0x06
    118c:	4f 83       	std	Y+7, r20	; 0x07
    118e:	58 87       	std	Y+8, r21	; 0x08
    1190:	8e 01       	movw	r16, r28
    1192:	07 5f       	subi	r16, 0xF7	; 247
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	b8 01       	movw	r22, r16
    119c:	89 d1       	rcall	.+786    	; 0x14b0 <__unpack_f>
    119e:	81 e1       	ldi	r24, 0x11	; 17
    11a0:	e8 2e       	mov	r14, r24
    11a2:	f1 2c       	mov	r15, r1
    11a4:	ec 0e       	add	r14, r28
    11a6:	fd 1e       	adc	r15, r29
    11a8:	ce 01       	movw	r24, r28
    11aa:	05 96       	adiw	r24, 0x05	; 5
    11ac:	b7 01       	movw	r22, r14
    11ae:	80 d1       	rcall	.+768    	; 0x14b0 <__unpack_f>
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <__gtsf2+0x4e>
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__gtsf2+0x4e>
    11bc:	c8 01       	movw	r24, r16
    11be:	b7 01       	movw	r22, r14
    11c0:	e0 d1       	rcall	.+960    	; 0x1582 <__fpcmp_parts_f>
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <__gtsf2+0x50>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	68 96       	adiw	r28, 0x18	; 24
    11c8:	e6 e0       	ldi	r30, 0x06	; 6
    11ca:	5c c2       	rjmp	.+1208   	; 0x1684 <__epilogue_restores__+0x18>

000011cc <__gesf2>:
    11cc:	a8 e1       	ldi	r26, 0x18	; 24
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	eb ee       	ldi	r30, 0xEB	; 235
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	3b c2       	rjmp	.+1142   	; 0x164c <__prologue_saves__+0x18>
    11d6:	69 83       	std	Y+1, r22	; 0x01
    11d8:	7a 83       	std	Y+2, r23	; 0x02
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	2d 83       	std	Y+5, r18	; 0x05
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	4f 83       	std	Y+7, r20	; 0x07
    11e4:	58 87       	std	Y+8, r21	; 0x08
    11e6:	8e 01       	movw	r16, r28
    11e8:	07 5f       	subi	r16, 0xF7	; 247
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	b8 01       	movw	r22, r16
    11f2:	5e d1       	rcall	.+700    	; 0x14b0 <__unpack_f>
    11f4:	81 e1       	ldi	r24, 0x11	; 17
    11f6:	e8 2e       	mov	r14, r24
    11f8:	f1 2c       	mov	r15, r1
    11fa:	ec 0e       	add	r14, r28
    11fc:	fd 1e       	adc	r15, r29
    11fe:	ce 01       	movw	r24, r28
    1200:	05 96       	adiw	r24, 0x05	; 5
    1202:	b7 01       	movw	r22, r14
    1204:	55 d1       	rcall	.+682    	; 0x14b0 <__unpack_f>
    1206:	89 85       	ldd	r24, Y+9	; 0x09
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	38 f0       	brcs	.+14     	; 0x121a <__gesf2+0x4e>
    120c:	89 89       	ldd	r24, Y+17	; 0x11
    120e:	82 30       	cpi	r24, 0x02	; 2
    1210:	20 f0       	brcs	.+8      	; 0x121a <__gesf2+0x4e>
    1212:	c8 01       	movw	r24, r16
    1214:	b7 01       	movw	r22, r14
    1216:	b5 d1       	rcall	.+874    	; 0x1582 <__fpcmp_parts_f>
    1218:	01 c0       	rjmp	.+2      	; 0x121c <__gesf2+0x50>
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	68 96       	adiw	r28, 0x18	; 24
    121e:	e6 e0       	ldi	r30, 0x06	; 6
    1220:	31 c2       	rjmp	.+1122   	; 0x1684 <__epilogue_restores__+0x18>

00001222 <__ltsf2>:
    1222:	a8 e1       	ldi	r26, 0x18	; 24
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e6 e1       	ldi	r30, 0x16	; 22
    1228:	f9 e0       	ldi	r31, 0x09	; 9
    122a:	10 c2       	rjmp	.+1056   	; 0x164c <__prologue_saves__+0x18>
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	7a 83       	std	Y+2, r23	; 0x02
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	2d 83       	std	Y+5, r18	; 0x05
    1236:	3e 83       	std	Y+6, r19	; 0x06
    1238:	4f 83       	std	Y+7, r20	; 0x07
    123a:	58 87       	std	Y+8, r21	; 0x08
    123c:	8e 01       	movw	r16, r28
    123e:	07 5f       	subi	r16, 0xF7	; 247
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	b8 01       	movw	r22, r16
    1248:	33 d1       	rcall	.+614    	; 0x14b0 <__unpack_f>
    124a:	81 e1       	ldi	r24, 0x11	; 17
    124c:	e8 2e       	mov	r14, r24
    124e:	f1 2c       	mov	r15, r1
    1250:	ec 0e       	add	r14, r28
    1252:	fd 1e       	adc	r15, r29
    1254:	ce 01       	movw	r24, r28
    1256:	05 96       	adiw	r24, 0x05	; 5
    1258:	b7 01       	movw	r22, r14
    125a:	2a d1       	rcall	.+596    	; 0x14b0 <__unpack_f>
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	38 f0       	brcs	.+14     	; 0x1270 <__ltsf2+0x4e>
    1262:	89 89       	ldd	r24, Y+17	; 0x11
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	20 f0       	brcs	.+8      	; 0x1270 <__ltsf2+0x4e>
    1268:	c8 01       	movw	r24, r16
    126a:	b7 01       	movw	r22, r14
    126c:	8a d1       	rcall	.+788    	; 0x1582 <__fpcmp_parts_f>
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <__ltsf2+0x50>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	68 96       	adiw	r28, 0x18	; 24
    1274:	e6 e0       	ldi	r30, 0x06	; 6
    1276:	06 c2       	rjmp	.+1036   	; 0x1684 <__epilogue_restores__+0x18>

00001278 <__fixsfsi>:
    1278:	ac e0       	ldi	r26, 0x0C	; 12
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e1 e4       	ldi	r30, 0x41	; 65
    127e:	f9 e0       	ldi	r31, 0x09	; 9
    1280:	e9 c1       	rjmp	.+978    	; 0x1654 <__prologue_saves__+0x20>
    1282:	69 83       	std	Y+1, r22	; 0x01
    1284:	7a 83       	std	Y+2, r23	; 0x02
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	9c 83       	std	Y+4, r25	; 0x04
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	be 01       	movw	r22, r28
    1290:	6b 5f       	subi	r22, 0xFB	; 251
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	0d d1       	rcall	.+538    	; 0x14b0 <__unpack_f>
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	81 f1       	breq	.+96     	; 0x12fc <__fixsfsi+0x84>
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	70 f1       	brcs	.+92     	; 0x12fc <__fixsfsi+0x84>
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	21 f4       	brne	.+8      	; 0x12ac <__fixsfsi+0x34>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	88 23       	and	r24, r24
    12a8:	69 f1       	breq	.+90     	; 0x1304 <__fixsfsi+0x8c>
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <__fixsfsi+0x48>
    12ac:	2f 81       	ldd	r18, Y+7	; 0x07
    12ae:	38 85       	ldd	r19, Y+8	; 0x08
    12b0:	37 fd       	sbrc	r19, 7
    12b2:	24 c0       	rjmp	.+72     	; 0x12fc <__fixsfsi+0x84>
    12b4:	6e 81       	ldd	r22, Y+6	; 0x06
    12b6:	2f 31       	cpi	r18, 0x1F	; 31
    12b8:	31 05       	cpc	r19, r1
    12ba:	3c f0       	brlt	.+14     	; 0x12ca <__fixsfsi+0x52>
    12bc:	66 23       	and	r22, r22
    12be:	11 f1       	breq	.+68     	; 0x1304 <__fixsfsi+0x8c>
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e8       	ldi	r21, 0x80	; 128
    12c8:	21 c0       	rjmp	.+66     	; 0x130c <__fixsfsi+0x94>
    12ca:	8e e1       	ldi	r24, 0x1E	; 30
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	82 1b       	sub	r24, r18
    12d0:	93 0b       	sbc	r25, r19
    12d2:	29 85       	ldd	r18, Y+9	; 0x09
    12d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12d6:	4b 85       	ldd	r20, Y+11	; 0x0b
    12d8:	5c 85       	ldd	r21, Y+12	; 0x0c
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <__fixsfsi+0x6c>
    12dc:	56 95       	lsr	r21
    12de:	47 95       	ror	r20
    12e0:	37 95       	ror	r19
    12e2:	27 95       	ror	r18
    12e4:	8a 95       	dec	r24
    12e6:	d2 f7       	brpl	.-12     	; 0x12dc <__fixsfsi+0x64>
    12e8:	66 23       	and	r22, r22
    12ea:	81 f0       	breq	.+32     	; 0x130c <__fixsfsi+0x94>
    12ec:	50 95       	com	r21
    12ee:	40 95       	com	r20
    12f0:	30 95       	com	r19
    12f2:	21 95       	neg	r18
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	4f 4f       	sbci	r20, 0xFF	; 255
    12f8:	5f 4f       	sbci	r21, 0xFF	; 255
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <__fixsfsi+0x94>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	a9 01       	movw	r20, r18
    1302:	04 c0       	rjmp	.+8      	; 0x130c <__fixsfsi+0x94>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f ef       	ldi	r20, 0xFF	; 255
    130a:	5f e7       	ldi	r21, 0x7F	; 127
    130c:	b9 01       	movw	r22, r18
    130e:	ca 01       	movw	r24, r20
    1310:	2c 96       	adiw	r28, 0x0c	; 12
    1312:	e2 e0       	ldi	r30, 0x02	; 2
    1314:	bb c1       	rjmp	.+886    	; 0x168c <__epilogue_restores__+0x20>

00001316 <__pack_f>:
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	fc 01       	movw	r30, r24
    1324:	24 81       	ldd	r18, Z+4	; 0x04
    1326:	35 81       	ldd	r19, Z+5	; 0x05
    1328:	46 81       	ldd	r20, Z+6	; 0x06
    132a:	57 81       	ldd	r21, Z+7	; 0x07
    132c:	61 81       	ldd	r22, Z+1	; 0x01
    132e:	80 81       	ld	r24, Z
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	20 f4       	brcc	.+8      	; 0x133c <__pack_f+0x26>
    1334:	40 61       	ori	r20, 0x10	; 16
    1336:	ef ef       	ldi	r30, 0xFF	; 255
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	a3 c0       	rjmp	.+326    	; 0x1482 <__pack_f+0x16c>
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	09 f4       	brne	.+2      	; 0x1342 <__pack_f+0x2c>
    1340:	9b c0       	rjmp	.+310    	; 0x1478 <__pack_f+0x162>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	09 f4       	brne	.+2      	; 0x1348 <__pack_f+0x32>
    1346:	92 c0       	rjmp	.+292    	; 0x146c <__pack_f+0x156>
    1348:	21 15       	cp	r18, r1
    134a:	31 05       	cpc	r19, r1
    134c:	41 05       	cpc	r20, r1
    134e:	51 05       	cpc	r21, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <__pack_f+0x3e>
    1352:	8f c0       	rjmp	.+286    	; 0x1472 <__pack_f+0x15c>
    1354:	02 80       	ldd	r0, Z+2	; 0x02
    1356:	f3 81       	ldd	r31, Z+3	; 0x03
    1358:	e0 2d       	mov	r30, r0
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	e2 38       	cpi	r30, 0x82	; 130
    135e:	f8 07       	cpc	r31, r24
    1360:	0c f0       	brlt	.+2      	; 0x1364 <__pack_f+0x4e>
    1362:	5a c0       	rjmp	.+180    	; 0x1418 <__pack_f+0x102>
    1364:	c2 e8       	ldi	r28, 0x82	; 130
    1366:	df ef       	ldi	r29, 0xFF	; 255
    1368:	ce 1b       	sub	r28, r30
    136a:	df 0b       	sbc	r29, r31
    136c:	ca 31       	cpi	r28, 0x1A	; 26
    136e:	d1 05       	cpc	r29, r1
    1370:	6c f5       	brge	.+90     	; 0x13cc <__pack_f+0xb6>
    1372:	79 01       	movw	r14, r18
    1374:	8a 01       	movw	r16, r20
    1376:	0c 2e       	mov	r0, r28
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <__pack_f+0x6c>
    137a:	16 95       	lsr	r17
    137c:	07 95       	ror	r16
    137e:	f7 94       	ror	r15
    1380:	e7 94       	ror	r14
    1382:	0a 94       	dec	r0
    1384:	d2 f7       	brpl	.-12     	; 0x137a <__pack_f+0x64>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	0c 2e       	mov	r0, r28
    1390:	04 c0       	rjmp	.+8      	; 0x139a <__pack_f+0x84>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	0a 94       	dec	r0
    139c:	d2 f7       	brpl	.-12     	; 0x1392 <__pack_f+0x7c>
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	a1 09       	sbc	r26, r1
    13a2:	b1 09       	sbc	r27, r1
    13a4:	82 23       	and	r24, r18
    13a6:	93 23       	and	r25, r19
    13a8:	a4 23       	and	r26, r20
    13aa:	b5 23       	and	r27, r21
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	a1 05       	cpc	r26, r1
    13b8:	b1 05       	cpc	r27, r1
    13ba:	19 f4       	brne	.+6      	; 0x13c2 <__pack_f+0xac>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	2e 29       	or	r18, r14
    13c4:	3f 29       	or	r19, r15
    13c6:	40 2b       	or	r20, r16
    13c8:	51 2b       	or	r21, r17
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <__pack_f+0xbc>
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	da 01       	movw	r26, r20
    13d4:	c9 01       	movw	r24, r18
    13d6:	8f 77       	andi	r24, 0x7F	; 127
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	a0 70       	andi	r26, 0x00	; 0
    13dc:	b0 70       	andi	r27, 0x00	; 0
    13de:	80 34       	cpi	r24, 0x40	; 64
    13e0:	91 05       	cpc	r25, r1
    13e2:	a1 05       	cpc	r26, r1
    13e4:	b1 05       	cpc	r27, r1
    13e6:	39 f4       	brne	.+14     	; 0x13f6 <__pack_f+0xe0>
    13e8:	27 ff       	sbrs	r18, 7
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <__pack_f+0xe8>
    13ec:	20 5c       	subi	r18, 0xC0	; 192
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	4f 4f       	sbci	r20, 0xFF	; 255
    13f2:	5f 4f       	sbci	r21, 0xFF	; 255
    13f4:	04 c0       	rjmp	.+8      	; 0x13fe <__pack_f+0xe8>
    13f6:	21 5c       	subi	r18, 0xC1	; 193
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	4f 4f       	sbci	r20, 0xFF	; 255
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	e1 e0       	ldi	r30, 0x01	; 1
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	20 30       	cpi	r18, 0x00	; 0
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	38 07       	cpc	r19, r24
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	48 07       	cpc	r20, r24
    140c:	80 e4       	ldi	r24, 0x40	; 64
    140e:	58 07       	cpc	r21, r24
    1410:	28 f5       	brcc	.+74     	; 0x145c <__pack_f+0x146>
    1412:	e0 e0       	ldi	r30, 0x00	; 0
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	22 c0       	rjmp	.+68     	; 0x145c <__pack_f+0x146>
    1418:	e0 38       	cpi	r30, 0x80	; 128
    141a:	f1 05       	cpc	r31, r1
    141c:	6c f5       	brge	.+90     	; 0x1478 <__pack_f+0x162>
    141e:	e1 58       	subi	r30, 0x81	; 129
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	da 01       	movw	r26, r20
    1424:	c9 01       	movw	r24, r18
    1426:	8f 77       	andi	r24, 0x7F	; 127
    1428:	90 70       	andi	r25, 0x00	; 0
    142a:	a0 70       	andi	r26, 0x00	; 0
    142c:	b0 70       	andi	r27, 0x00	; 0
    142e:	80 34       	cpi	r24, 0x40	; 64
    1430:	91 05       	cpc	r25, r1
    1432:	a1 05       	cpc	r26, r1
    1434:	b1 05       	cpc	r27, r1
    1436:	39 f4       	brne	.+14     	; 0x1446 <__pack_f+0x130>
    1438:	27 ff       	sbrs	r18, 7
    143a:	09 c0       	rjmp	.+18     	; 0x144e <__pack_f+0x138>
    143c:	20 5c       	subi	r18, 0xC0	; 192
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	4f 4f       	sbci	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	04 c0       	rjmp	.+8      	; 0x144e <__pack_f+0x138>
    1446:	21 5c       	subi	r18, 0xC1	; 193
    1448:	3f 4f       	sbci	r19, 0xFF	; 255
    144a:	4f 4f       	sbci	r20, 0xFF	; 255
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	57 ff       	sbrs	r21, 7
    1450:	05 c0       	rjmp	.+10     	; 0x145c <__pack_f+0x146>
    1452:	56 95       	lsr	r21
    1454:	47 95       	ror	r20
    1456:	37 95       	ror	r19
    1458:	27 95       	ror	r18
    145a:	31 96       	adiw	r30, 0x01	; 1
    145c:	87 e0       	ldi	r24, 0x07	; 7
    145e:	56 95       	lsr	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	8a 95       	dec	r24
    1468:	d1 f7       	brne	.-12     	; 0x145e <__pack_f+0x148>
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <__pack_f+0x16c>
    146c:	e0 e0       	ldi	r30, 0x00	; 0
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	05 c0       	rjmp	.+10     	; 0x147c <__pack_f+0x166>
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <__pack_f+0x16c>
    1478:	ef ef       	ldi	r30, 0xFF	; 255
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	a9 01       	movw	r20, r18
    1482:	8e 2f       	mov	r24, r30
    1484:	87 95       	ror	r24
    1486:	88 27       	eor	r24, r24
    1488:	87 95       	ror	r24
    148a:	94 2f       	mov	r25, r20
    148c:	9f 77       	andi	r25, 0x7F	; 127
    148e:	67 95       	ror	r22
    1490:	66 27       	eor	r22, r22
    1492:	67 95       	ror	r22
    1494:	e6 95       	lsr	r30
    1496:	e2 2e       	mov	r14, r18
    1498:	a9 2f       	mov	r26, r25
    149a:	a8 2b       	or	r26, r24
    149c:	fe 2f       	mov	r31, r30
    149e:	f6 2b       	or	r31, r22
    14a0:	62 2f       	mov	r22, r18
    14a2:	73 2f       	mov	r23, r19
    14a4:	8a 2f       	mov	r24, r26
    14a6:	9f 2f       	mov	r25, r31
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	e6 e0       	ldi	r30, 0x06	; 6
    14ae:	ea c0       	rjmp	.+468    	; 0x1684 <__epilogue_restores__+0x18>

000014b0 <__unpack_f>:
    14b0:	dc 01       	movw	r26, r24
    14b2:	fb 01       	movw	r30, r22
    14b4:	2c 91       	ld	r18, X
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	3c 91       	ld	r19, X
    14ba:	11 97       	sbiw	r26, 0x01	; 1
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	8c 91       	ld	r24, X
    14c0:	12 97       	sbiw	r26, 0x02	; 2
    14c2:	48 2f       	mov	r20, r24
    14c4:	4f 77       	andi	r20, 0x7F	; 127
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	98 2f       	mov	r25, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	99 27       	eor	r25, r25
    14ce:	99 1f       	adc	r25, r25
    14d0:	13 96       	adiw	r26, 0x03	; 3
    14d2:	6c 91       	ld	r22, X
    14d4:	13 97       	sbiw	r26, 0x03	; 3
    14d6:	86 2f       	mov	r24, r22
    14d8:	88 0f       	add	r24, r24
    14da:	89 2b       	or	r24, r25
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	66 1f       	adc	r22, r22
    14e0:	66 27       	eor	r22, r22
    14e2:	66 1f       	adc	r22, r22
    14e4:	61 83       	std	Z+1, r22	; 0x01
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	39 f5       	brne	.+78     	; 0x1538 <__unpack_f+0x88>
    14ea:	21 15       	cp	r18, r1
    14ec:	31 05       	cpc	r19, r1
    14ee:	41 05       	cpc	r20, r1
    14f0:	51 05       	cpc	r21, r1
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__unpack_f+0x48>
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	29 c0       	rjmp	.+82     	; 0x154a <__unpack_f+0x9a>
    14f8:	82 e8       	ldi	r24, 0x82	; 130
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	93 83       	std	Z+3, r25	; 0x03
    14fe:	82 83       	std	Z+2, r24	; 0x02
    1500:	67 e0       	ldi	r22, 0x07	; 7
    1502:	22 0f       	add	r18, r18
    1504:	33 1f       	adc	r19, r19
    1506:	44 1f       	adc	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	6a 95       	dec	r22
    150c:	d1 f7       	brne	.-12     	; 0x1502 <__unpack_f+0x52>
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	80 83       	st	Z, r24
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <__unpack_f+0x76>
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	44 1f       	adc	r20, r20
    151a:	55 1f       	adc	r21, r21
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	93 83       	std	Z+3, r25	; 0x03
    1524:	82 83       	std	Z+2, r24	; 0x02
    1526:	20 30       	cpi	r18, 0x00	; 0
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	38 07       	cpc	r19, r24
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	48 07       	cpc	r20, r24
    1530:	80 e4       	ldi	r24, 0x40	; 64
    1532:	58 07       	cpc	r21, r24
    1534:	78 f3       	brcs	.-34     	; 0x1514 <__unpack_f+0x64>
    1536:	20 c0       	rjmp	.+64     	; 0x1578 <__unpack_f+0xc8>
    1538:	8f 3f       	cpi	r24, 0xFF	; 255
    153a:	91 05       	cpc	r25, r1
    153c:	79 f4       	brne	.+30     	; 0x155c <__unpack_f+0xac>
    153e:	21 15       	cp	r18, r1
    1540:	31 05       	cpc	r19, r1
    1542:	41 05       	cpc	r20, r1
    1544:	51 05       	cpc	r21, r1
    1546:	19 f4       	brne	.+6      	; 0x154e <__unpack_f+0x9e>
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	80 83       	st	Z, r24
    154c:	08 95       	ret
    154e:	44 ff       	sbrs	r20, 4
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <__unpack_f+0xa8>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24
    1556:	10 c0       	rjmp	.+32     	; 0x1578 <__unpack_f+0xc8>
    1558:	10 82       	st	Z, r1
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <__unpack_f+0xc8>
    155c:	8f 57       	subi	r24, 0x7F	; 127
    155e:	90 40       	sbci	r25, 0x00	; 0
    1560:	93 83       	std	Z+3, r25	; 0x03
    1562:	82 83       	std	Z+2, r24	; 0x02
    1564:	83 e0       	ldi	r24, 0x03	; 3
    1566:	80 83       	st	Z, r24
    1568:	87 e0       	ldi	r24, 0x07	; 7
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	44 1f       	adc	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	8a 95       	dec	r24
    1574:	d1 f7       	brne	.-12     	; 0x156a <__unpack_f+0xba>
    1576:	50 64       	ori	r21, 0x40	; 64
    1578:	24 83       	std	Z+4, r18	; 0x04
    157a:	35 83       	std	Z+5, r19	; 0x05
    157c:	46 83       	std	Z+6, r20	; 0x06
    157e:	57 83       	std	Z+7, r21	; 0x07
    1580:	08 95       	ret

00001582 <__fpcmp_parts_f>:
    1582:	fc 01       	movw	r30, r24
    1584:	db 01       	movw	r26, r22
    1586:	90 81       	ld	r25, Z
    1588:	92 30       	cpi	r25, 0x02	; 2
    158a:	08 f4       	brcc	.+2      	; 0x158e <__fpcmp_parts_f+0xc>
    158c:	49 c0       	rjmp	.+146    	; 0x1620 <__fpcmp_parts_f+0x9e>
    158e:	8c 91       	ld	r24, X
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__fpcmp_parts_f+0x14>
    1594:	45 c0       	rjmp	.+138    	; 0x1620 <__fpcmp_parts_f+0x9e>
    1596:	94 30       	cpi	r25, 0x04	; 4
    1598:	51 f4       	brne	.+20     	; 0x15ae <__fpcmp_parts_f+0x2c>
    159a:	61 81       	ldd	r22, Z+1	; 0x01
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	b1 f5       	brne	.+108    	; 0x160c <__fpcmp_parts_f+0x8a>
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	2c 91       	ld	r18, X
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	26 1b       	sub	r18, r22
    15aa:	31 09       	sbc	r19, r1
    15ac:	41 c0       	rjmp	.+130    	; 0x1630 <__fpcmp_parts_f+0xae>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	21 f0       	breq	.+8      	; 0x15ba <__fpcmp_parts_f+0x38>
    15b2:	92 30       	cpi	r25, 0x02	; 2
    15b4:	41 f4       	brne	.+16     	; 0x15c6 <__fpcmp_parts_f+0x44>
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	b1 f1       	breq	.+108    	; 0x1626 <__fpcmp_parts_f+0xa4>
    15ba:	11 96       	adiw	r26, 0x01	; 1
    15bc:	8c 91       	ld	r24, X
    15be:	11 97       	sbiw	r26, 0x01	; 1
    15c0:	88 23       	and	r24, r24
    15c2:	a1 f1       	breq	.+104    	; 0x162c <__fpcmp_parts_f+0xaa>
    15c4:	2d c0       	rjmp	.+90     	; 0x1620 <__fpcmp_parts_f+0x9e>
    15c6:	61 81       	ldd	r22, Z+1	; 0x01
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	01 f1       	breq	.+64     	; 0x160c <__fpcmp_parts_f+0x8a>
    15cc:	11 96       	adiw	r26, 0x01	; 1
    15ce:	8c 91       	ld	r24, X
    15d0:	11 97       	sbiw	r26, 0x01	; 1
    15d2:	68 17       	cp	r22, r24
    15d4:	d9 f4       	brne	.+54     	; 0x160c <__fpcmp_parts_f+0x8a>
    15d6:	22 81       	ldd	r18, Z+2	; 0x02
    15d8:	33 81       	ldd	r19, Z+3	; 0x03
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	8d 91       	ld	r24, X+
    15de:	9c 91       	ld	r25, X
    15e0:	13 97       	sbiw	r26, 0x03	; 3
    15e2:	82 17       	cp	r24, r18
    15e4:	93 07       	cpc	r25, r19
    15e6:	94 f0       	brlt	.+36     	; 0x160c <__fpcmp_parts_f+0x8a>
    15e8:	28 17       	cp	r18, r24
    15ea:	39 07       	cpc	r19, r25
    15ec:	bc f0       	brlt	.+46     	; 0x161c <__fpcmp_parts_f+0x9a>
    15ee:	24 81       	ldd	r18, Z+4	; 0x04
    15f0:	35 81       	ldd	r19, Z+5	; 0x05
    15f2:	46 81       	ldd	r20, Z+6	; 0x06
    15f4:	57 81       	ldd	r21, Z+7	; 0x07
    15f6:	14 96       	adiw	r26, 0x04	; 4
    15f8:	8d 91       	ld	r24, X+
    15fa:	9d 91       	ld	r25, X+
    15fc:	0d 90       	ld	r0, X+
    15fe:	bc 91       	ld	r27, X
    1600:	a0 2d       	mov	r26, r0
    1602:	82 17       	cp	r24, r18
    1604:	93 07       	cpc	r25, r19
    1606:	a4 07       	cpc	r26, r20
    1608:	b5 07       	cpc	r27, r21
    160a:	18 f4       	brcc	.+6      	; 0x1612 <__fpcmp_parts_f+0x90>
    160c:	66 23       	and	r22, r22
    160e:	41 f0       	breq	.+16     	; 0x1620 <__fpcmp_parts_f+0x9e>
    1610:	0d c0       	rjmp	.+26     	; 0x162c <__fpcmp_parts_f+0xaa>
    1612:	28 17       	cp	r18, r24
    1614:	39 07       	cpc	r19, r25
    1616:	4a 07       	cpc	r20, r26
    1618:	5b 07       	cpc	r21, r27
    161a:	28 f4       	brcc	.+10     	; 0x1626 <__fpcmp_parts_f+0xa4>
    161c:	66 23       	and	r22, r22
    161e:	31 f0       	breq	.+12     	; 0x162c <__fpcmp_parts_f+0xaa>
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <__fpcmp_parts_f+0xae>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <__fpcmp_parts_f+0xae>
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	c9 01       	movw	r24, r18
    1632:	08 95       	ret

00001634 <__prologue_saves__>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	ca 1b       	sub	r28, r26
    165e:	db 0b       	sbc	r29, r27
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	09 94       	ijmp

0000166c <__epilogue_restores__>:
    166c:	2a 88       	ldd	r2, Y+18	; 0x12
    166e:	39 88       	ldd	r3, Y+17	; 0x11
    1670:	48 88       	ldd	r4, Y+16	; 0x10
    1672:	5f 84       	ldd	r5, Y+15	; 0x0f
    1674:	6e 84       	ldd	r6, Y+14	; 0x0e
    1676:	7d 84       	ldd	r7, Y+13	; 0x0d
    1678:	8c 84       	ldd	r8, Y+12	; 0x0c
    167a:	9b 84       	ldd	r9, Y+11	; 0x0b
    167c:	aa 84       	ldd	r10, Y+10	; 0x0a
    167e:	b9 84       	ldd	r11, Y+9	; 0x09
    1680:	c8 84       	ldd	r12, Y+8	; 0x08
    1682:	df 80       	ldd	r13, Y+7	; 0x07
    1684:	ee 80       	ldd	r14, Y+6	; 0x06
    1686:	fd 80       	ldd	r15, Y+5	; 0x05
    1688:	0c 81       	ldd	r16, Y+4	; 0x04
    168a:	1b 81       	ldd	r17, Y+3	; 0x03
    168c:	aa 81       	ldd	r26, Y+2	; 0x02
    168e:	b9 81       	ldd	r27, Y+1	; 0x01
    1690:	ce 0f       	add	r28, r30
    1692:	d1 1d       	adc	r29, r1
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	ed 01       	movw	r28, r26
    16a0:	08 95       	ret

000016a2 <memcpy>:
    16a2:	fb 01       	movw	r30, r22
    16a4:	dc 01       	movw	r26, r24
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <memcpy+0xa>
    16a8:	01 90       	ld	r0, Z+
    16aa:	0d 92       	st	X+, r0
    16ac:	41 50       	subi	r20, 0x01	; 1
    16ae:	50 40       	sbci	r21, 0x00	; 0
    16b0:	d8 f7       	brcc	.-10     	; 0x16a8 <memcpy+0x6>
    16b2:	08 95       	ret

000016b4 <_exit>:
    16b4:	f8 94       	cli

000016b6 <__stop_program>:
    16b6:	ff cf       	rjmp	.-2      	; 0x16b6 <__stop_program>


Coursework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001f7e  00002012  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000c2  008000c2  00002074  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00002d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bf  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ed6  00000000  00000000  000036d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000181e  00000000  00000000  000065a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d17  00000000  00000000  00007dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000aae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007d0  00000000  00000000  0000aef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000124f  00000000  00000000  0000b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000732  00000000  00000000  0000c90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  0000d041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	52 c0       	rjmp	.+164    	; 0xa6 <__ctors_end>
       2:	66 c1       	rjmp	.+716    	; 0x2d0 <__vector_1>
       4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
       6:	6a c0       	rjmp	.+212    	; 0xdc <__bad_interrupt>
       8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
       a:	68 c0       	rjmp	.+208    	; 0xdc <__bad_interrupt>
       c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
       e:	66 c0       	rjmp	.+204    	; 0xdc <__bad_interrupt>
      10:	bc c0       	rjmp	.+376    	; 0x18a <__vector_8>
      12:	90 c0       	rjmp	.+288    	; 0x134 <__vector_9>
      14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
      16:	62 c0       	rjmp	.+196    	; 0xdc <__bad_interrupt>
      18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
      1a:	60 c0       	rjmp	.+192    	; 0xdc <__bad_interrupt>
      1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
      1e:	5e c0       	rjmp	.+188    	; 0xdc <__bad_interrupt>
      20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
      22:	5c c0       	rjmp	.+184    	; 0xdc <__bad_interrupt>
      24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
      26:	52 c3       	rjmp	.+1700   	; 0x6cc <char_to_code+0xd0>
      28:	56 c3       	rjmp	.+1708   	; 0x6d6 <char_to_code+0xda>
      2a:	55 c3       	rjmp	.+1706   	; 0x6d6 <char_to_code+0xda>
      2c:	54 c3       	rjmp	.+1704   	; 0x6d6 <char_to_code+0xda>
      2e:	53 c3       	rjmp	.+1702   	; 0x6d6 <char_to_code+0xda>
      30:	52 c3       	rjmp	.+1700   	; 0x6d6 <char_to_code+0xda>
      32:	51 c3       	rjmp	.+1698   	; 0x6d6 <char_to_code+0xda>
      34:	50 c3       	rjmp	.+1696   	; 0x6d6 <char_to_code+0xda>
      36:	4f c3       	rjmp	.+1694   	; 0x6d6 <char_to_code+0xda>
      38:	4e c3       	rjmp	.+1692   	; 0x6d6 <char_to_code+0xda>
      3a:	4d c3       	rjmp	.+1690   	; 0x6d6 <char_to_code+0xda>
      3c:	4c c3       	rjmp	.+1688   	; 0x6d6 <char_to_code+0xda>
      3e:	4b c3       	rjmp	.+1686   	; 0x6d6 <char_to_code+0xda>
      40:	fa c2       	rjmp	.+1524   	; 0x636 <char_to_code+0x3a>
      42:	49 c3       	rjmp	.+1682   	; 0x6d6 <char_to_code+0xda>
      44:	48 c3       	rjmp	.+1680   	; 0x6d6 <char_to_code+0xda>
      46:	01 c3       	rjmp	.+1538   	; 0x64a <char_to_code+0x4e>
      48:	05 c3       	rjmp	.+1546   	; 0x654 <char_to_code+0x58>
      4a:	09 c3       	rjmp	.+1554   	; 0x65e <char_to_code+0x62>
      4c:	0d c3       	rjmp	.+1562   	; 0x668 <char_to_code+0x6c>
      4e:	11 c3       	rjmp	.+1570   	; 0x672 <char_to_code+0x76>
      50:	15 c3       	rjmp	.+1578   	; 0x67c <char_to_code+0x80>
      52:	19 c3       	rjmp	.+1586   	; 0x686 <char_to_code+0x8a>
      54:	1d c3       	rjmp	.+1594   	; 0x690 <char_to_code+0x94>
      56:	21 c3       	rjmp	.+1602   	; 0x69a <char_to_code+0x9e>
      58:	25 c3       	rjmp	.+1610   	; 0x6a4 <char_to_code+0xa8>
      5a:	3d c3       	rjmp	.+1658   	; 0x6d6 <char_to_code+0xda>
      5c:	3c c3       	rjmp	.+1656   	; 0x6d6 <char_to_code+0xda>
      5e:	3b c3       	rjmp	.+1654   	; 0x6d6 <char_to_code+0xda>
      60:	3a c3       	rjmp	.+1652   	; 0x6d6 <char_to_code+0xda>
      62:	39 c3       	rjmp	.+1650   	; 0x6d6 <char_to_code+0xda>
      64:	38 c3       	rjmp	.+1648   	; 0x6d6 <char_to_code+0xda>
      66:	37 c3       	rjmp	.+1646   	; 0x6d6 <char_to_code+0xda>
      68:	36 c3       	rjmp	.+1644   	; 0x6d6 <char_to_code+0xda>
      6a:	35 c3       	rjmp	.+1642   	; 0x6d6 <char_to_code+0xda>
      6c:	20 c3       	rjmp	.+1600   	; 0x6ae <char_to_code+0xb2>
      6e:	33 c3       	rjmp	.+1638   	; 0x6d6 <char_to_code+0xda>
      70:	32 c3       	rjmp	.+1636   	; 0x6d6 <char_to_code+0xda>
      72:	31 c3       	rjmp	.+1634   	; 0x6d6 <char_to_code+0xda>
      74:	30 c3       	rjmp	.+1632   	; 0x6d6 <char_to_code+0xda>
      76:	20 c3       	rjmp	.+1600   	; 0x6b8 <char_to_code+0xbc>
      78:	2e c3       	rjmp	.+1628   	; 0x6d6 <char_to_code+0xda>
      7a:	2d c3       	rjmp	.+1626   	; 0x6d6 <char_to_code+0xda>
      7c:	2c c3       	rjmp	.+1624   	; 0x6d6 <char_to_code+0xda>
      7e:	21 c3       	rjmp	.+1602   	; 0x6c2 <char_to_code+0xc6>
      80:	2a c3       	rjmp	.+1620   	; 0x6d6 <char_to_code+0xda>
      82:	29 c3       	rjmp	.+1618   	; 0x6d6 <char_to_code+0xda>
      84:	28 c3       	rjmp	.+1616   	; 0x6d6 <char_to_code+0xda>
      86:	27 c3       	rjmp	.+1614   	; 0x6d6 <char_to_code+0xda>
      88:	26 c3       	rjmp	.+1612   	; 0x6d6 <char_to_code+0xda>
      8a:	25 c3       	rjmp	.+1610   	; 0x6d6 <char_to_code+0xda>
      8c:	24 c3       	rjmp	.+1608   	; 0x6d6 <char_to_code+0xda>
      8e:	23 c3       	rjmp	.+1606   	; 0x6d6 <char_to_code+0xda>
      90:	22 c3       	rjmp	.+1604   	; 0x6d6 <char_to_code+0xda>
      92:	21 c3       	rjmp	.+1602   	; 0x6d6 <char_to_code+0xda>
      94:	20 c3       	rjmp	.+1600   	; 0x6d6 <char_to_code+0xda>
      96:	1f c3       	rjmp	.+1598   	; 0x6d6 <char_to_code+0xda>
      98:	1e c3       	rjmp	.+1596   	; 0x6d6 <char_to_code+0xda>
      9a:	1d c3       	rjmp	.+1594   	; 0x6d6 <char_to_code+0xda>
      9c:	1c c3       	rjmp	.+1592   	; 0x6d6 <char_to_code+0xda>
      9e:	1b c3       	rjmp	.+1590   	; 0x6d6 <char_to_code+0xda>
      a0:	1a c3       	rjmp	.+1588   	; 0x6d6 <char_to_code+0xda>
      a2:	19 c3       	rjmp	.+1586   	; 0x6d6 <char_to_code+0xda>
      a4:	cd c2       	rjmp	.+1434   	; 0x640 <char_to_code+0x44>

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf e5       	ldi	r28, 0x5F	; 95
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	10 e0       	ldi	r17, 0x00	; 0
      b4:	a0 e6       	ldi	r26, 0x60	; 96
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	ee e7       	ldi	r30, 0x7E	; 126
      ba:	ff e1       	ldi	r31, 0x1F	; 31
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a2 3c       	cpi	r26, 0xC2	; 194
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
      c8:	10 e0       	ldi	r17, 0x00	; 0
      ca:	a2 ec       	ldi	r26, 0xC2	; 194
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a9 3c       	cpi	r26, 0xC9	; 201
      d4:	b1 07       	cpc	r27, r17
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	5f d1       	rcall	.+702    	; 0x398 <main>
      da:	4f cf       	rjmp	.-354    	; 0xffffff7a <__eeprom_end+0xff7eff7a>

000000dc <__bad_interrupt>:
      dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <set_up_ports>:
int timer1_divider = 0; //timer1 divider
unsigned int address = 0; // eeprom start address
int timer_temp_divider = 0;
int should_update_temp = 1;
//Настройка портов
void set_up_ports(void) {
      de:	df 93       	push	r29
      e0:	cf 93       	push	r28
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
  //Эти пины настроены на вывод. Вывод идет на A,B,C,D,E,F 7-сегментного индикатора
	DDRB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);
      e6:	87 e3       	ldi	r24, 0x37	; 55
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	27 e3       	ldi	r18, 0x37	; 55
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	f9 01       	movw	r30, r18
      f0:	20 81       	ld	r18, Z
      f2:	2f 63       	ori	r18, 0x3F	; 63
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
  //Этот пин служит для вывода G на 7-сегментный индикатор
  DDRD |= (1<<PD3);
      f8:	81 e3       	ldi	r24, 0x31	; 49
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	21 e3       	ldi	r18, 0x31	; 49
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	f9 01       	movw	r30, r18
     102:	20 81       	ld	r18, Z
     104:	28 60       	ori	r18, 0x08	; 8
     106:	fc 01       	movw	r30, r24
     108:	20 83       	st	Z, r18
  //Эти пины служат для выбора одного из четырех 7-сегментных индикаторов
	DDRC |= (1<<PC0) | (1<<PC1) | (1<<PC2) | (1<<PC3);
     10a:	84 e3       	ldi	r24, 0x34	; 52
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	24 e3       	ldi	r18, 0x34	; 52
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	f9 01       	movw	r30, r18
     114:	20 81       	ld	r18, Z
     116:	2f 60       	ori	r18, 0x0F	; 15
     118:	fc 01       	movw	r30, r24
     11a:	20 83       	st	Z, r18
  // Настройка i2c. PC4,5 на вывод.
  DDRC |= (1 << PC4) | (1 << PC5);
     11c:	84 e3       	ldi	r24, 0x34	; 52
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	24 e3       	ldi	r18, 0x34	; 52
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	f9 01       	movw	r30, r18
     126:	20 81       	ld	r18, Z
     128:	20 63       	ori	r18, 0x30	; 48
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
} 
     12e:	cf 91       	pop	r28
     130:	df 91       	pop	r29
     132:	08 95       	ret

00000134 <__vector_9>:

//Обработчик прерывания переполнения таймера
ISR(TIMER0_OVF_vect) {
     134:	1f 92       	push	r1
     136:	0f 92       	push	r0
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	0f 92       	push	r0
     13c:	11 24       	eor	r1, r1
     13e:	2f 93       	push	r18
     140:	3f 93       	push	r19
     142:	4f 93       	push	r20
     144:	5f 93       	push	r21
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	af 93       	push	r26
     150:	bf 93       	push	r27
     152:	ef 93       	push	r30
     154:	ff 93       	push	r31
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
	printDisplay(display);
     15e:	8b ea       	ldi	r24, 0xAB	; 171
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	a4 d3       	rcall	.+1864   	; 0x8ac <printDisplay>
}
     164:	cf 91       	pop	r28
     166:	df 91       	pop	r29
     168:	ff 91       	pop	r31
     16a:	ef 91       	pop	r30
     16c:	bf 91       	pop	r27
     16e:	af 91       	pop	r26
     170:	9f 91       	pop	r25
     172:	8f 91       	pop	r24
     174:	7f 91       	pop	r23
     176:	6f 91       	pop	r22
     178:	5f 91       	pop	r21
     17a:	4f 91       	pop	r20
     17c:	3f 91       	pop	r19
     17e:	2f 91       	pop	r18
     180:	0f 90       	pop	r0
     182:	0f be       	out	0x3f, r0	; 63
     184:	0f 90       	pop	r0
     186:	1f 90       	pop	r1
     188:	18 95       	reti

0000018a <__vector_8>:

ISR(TIMER1_OVF_vect) {
     18a:	1f 92       	push	r1
     18c:	0f 92       	push	r0
     18e:	0f b6       	in	r0, 0x3f	; 63
     190:	0f 92       	push	r0
     192:	11 24       	eor	r1, r1
     194:	2f 93       	push	r18
     196:	3f 93       	push	r19
     198:	4f 93       	push	r20
     19a:	5f 93       	push	r21
     19c:	6f 93       	push	r22
     19e:	7f 93       	push	r23
     1a0:	8f 93       	push	r24
     1a2:	9f 93       	push	r25
     1a4:	af 93       	push	r26
     1a6:	bf 93       	push	r27
     1a8:	ef 93       	push	r30
     1aa:	ff 93       	push	r31
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	0f 92       	push	r0
     1b2:	cd b7       	in	r28, 0x3d	; 61
     1b4:	de b7       	in	r29, 0x3e	; 62
  if (state == Register) {
     1b6:	80 91 c2 00 	lds	r24, 0x00C2
     1ba:	88 23       	and	r24, r24
     1bc:	f1 f4       	brne	.+60     	; 0x1fa <__vector_8+0x70>
    //Если значение timer1_divider меньше 56, то 15 минут еще не прошло
    if (timer1_divider < 56) {
     1be:	80 91 c3 00 	lds	r24, 0x00C3
     1c2:	90 91 c4 00 	lds	r25, 0x00C4
     1c6:	88 33       	cpi	r24, 0x38	; 56
     1c8:	91 05       	cpc	r25, r1
     1ca:	54 f4       	brge	.+20     	; 0x1e0 <__vector_8+0x56>
      timer1_divider++;
     1cc:	80 91 c3 00 	lds	r24, 0x00C3
     1d0:	90 91 c4 00 	lds	r25, 0x00C4
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	90 93 c4 00 	sts	0x00C4, r25
     1da:	80 93 c3 00 	sts	0x00C3, r24
     1de:	0d c0       	rjmp	.+26     	; 0x1fa <__vector_8+0x70>
    } else {
      //Значение timer1_divider достигло 56 => настало время записать данные в EEPROM
      signed char temp = getTemperature();
     1e0:	8b d4       	rcall	.+2326   	; 0xaf8 <getTemperature>
     1e2:	89 83       	std	Y+1, r24	; 0x01
      EEWriteByte(address, temp);
     1e4:	80 91 c5 00 	lds	r24, 0x00C5
     1e8:	90 91 c6 00 	lds	r25, 0x00C6
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	62 2f       	mov	r22, r18
     1f0:	1f d6       	rcall	.+3134   	; 0xe30 <EEWriteByte>
      timer1_divider = 0;
     1f2:	10 92 c4 00 	sts	0x00C4, r1
     1f6:	10 92 c3 00 	sts	0x00C3, r1
    }
  }

  if (timer_temp_divider < 4) {
     1fa:	80 91 c7 00 	lds	r24, 0x00C7
     1fe:	90 91 c8 00 	lds	r25, 0x00C8
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	91 05       	cpc	r25, r1
     206:	54 f4       	brge	.+20     	; 0x21c <__vector_8+0x92>
    timer_temp_divider++;
     208:	80 91 c7 00 	lds	r24, 0x00C7
     20c:	90 91 c8 00 	lds	r25, 0x00C8
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 c8 00 	sts	0x00C8, r25
     216:	80 93 c7 00 	sts	0x00C7, r24
     21a:	0a c0       	rjmp	.+20     	; 0x230 <__vector_8+0xa6>
  } else {
    should_update_temp = 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	90 93 61 00 	sts	0x0061, r25
     224:	80 93 60 00 	sts	0x0060, r24
    timer_temp_divider = 0;
     228:	10 92 c8 00 	sts	0x00C8, r1
     22c:	10 92 c7 00 	sts	0x00C7, r1
  }
}
     230:	0f 90       	pop	r0
     232:	cf 91       	pop	r28
     234:	df 91       	pop	r29
     236:	ff 91       	pop	r31
     238:	ef 91       	pop	r30
     23a:	bf 91       	pop	r27
     23c:	af 91       	pop	r26
     23e:	9f 91       	pop	r25
     240:	8f 91       	pop	r24
     242:	7f 91       	pop	r23
     244:	6f 91       	pop	r22
     246:	5f 91       	pop	r21
     248:	4f 91       	pop	r20
     24a:	3f 91       	pop	r19
     24c:	2f 91       	pop	r18
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <handle_buttons>:

void handle_buttons(unsigned char button_number) {
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	0f 92       	push	r0
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	89 83       	std	Y+1, r24	; 0x01
  // unsigned char button_number = number_key_pressed();

  switch (button_number) {
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	88 2f       	mov	r24, r24
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	81 30       	cpi	r24, 0x01	; 1
     26c:	91 05       	cpc	r25, r1
     26e:	81 f0       	breq	.+32     	; 0x290 <handle_buttons+0x38>
     270:	82 30       	cpi	r24, 0x02	; 2
     272:	91 05       	cpc	r25, r1
     274:	d9 f0       	breq	.+54     	; 0x2ac <handle_buttons+0x54>
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	31 f5       	brne	.+76     	; 0x2c6 <handle_buttons+0x6e>
    case 0:
    strcpy(display, "0000");
     27a:	8b ea       	ldi	r24, 0xAB	; 171
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	22 e6       	ldi	r18, 0x62	; 98
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	b9 01       	movw	r22, r18
     284:	45 e0       	ldi	r20, 0x05	; 5
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	d7 db       	rcall	.-2130   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
    state = Register;
     28a:	10 92 c2 00 	sts	0x00C2, r1
    break;
     28e:	1c c0       	rjmp	.+56     	; 0x2c8 <handle_buttons+0x70>

    case 1:
    strcpy(display, "1111");
     290:	8b ea       	ldi	r24, 0xAB	; 171
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	27 e6       	ldi	r18, 0x67	; 103
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	b9 01       	movw	r22, r18
     29a:	45 e0       	ldi	r20, 0x05	; 5
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	cc db       	rcall	.-2152   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
    UART_println("TRANSMIT BUTTON CLICKED");
     2a0:	8c e6       	ldi	r24, 0x6C	; 108
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	77 d6       	rcall	.+3310   	; 0xf94 <UART_println>
    state = Register;
     2a6:	10 92 c2 00 	sts	0x00C2, r1
    break;
     2aa:	0e c0       	rjmp	.+28     	; 0x2c8 <handle_buttons+0x70>

    case 2:
    strcpy(display, "2222");
     2ac:	8b ea       	ldi	r24, 0xAB	; 171
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	24 e8       	ldi	r18, 0x84	; 132
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	b9 01       	movw	r22, r18
     2b6:	45 e0       	ldi	r20, 0x05	; 5
     2b8:	50 e0       	ldi	r21, 0x00	; 0
     2ba:	be db       	rcall	.-2180   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
    state = TURBO;
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	80 93 c2 00 	sts	0x00C2, r24
    break;
     2c2:	00 00       	nop
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <handle_buttons+0x70>

    default:
    break;
     2c6:	00 00       	nop
  };
}
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <__vector_1>:

ISR(INT0_vect) {
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	11 24       	eor	r1, r1
     2da:	2f 93       	push	r18
     2dc:	3f 93       	push	r19
     2de:	4f 93       	push	r20
     2e0:	5f 93       	push	r21
     2e2:	6f 93       	push	r22
     2e4:	7f 93       	push	r23
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	0f 92       	push	r0
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
  unsigned char button_number = number_key_pressed();
     2fc:	f8 d2       	rcall	.+1520   	; 0x8ee <number_key_pressed>
     2fe:	89 83       	std	Y+1, r24	; 0x01
  handle_buttons(button_number);
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	aa df       	rcall	.-172    	; 0x258 <handle_buttons>
}
     304:	0f 90       	pop	r0
     306:	cf 91       	pop	r28
     308:	df 91       	pop	r29
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
     316:	7f 91       	pop	r23
     318:	6f 91       	pop	r22
     31a:	5f 91       	pop	r21
     31c:	4f 91       	pop	r20
     31e:	3f 91       	pop	r19
     320:	2f 91       	pop	r18
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
     326:	0f 90       	pop	r0
     328:	1f 90       	pop	r1
     32a:	18 95       	reti

0000032c <timer_init>:

//Инициализация таймера
void timer_init() {
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	cd b7       	in	r28, 0x3d	; 61
     332:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TOIE0) | (1 << TOIE1) | (1 << TOIE2);
     334:	89 e5       	ldi	r24, 0x59	; 89
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	29 e5       	ldi	r18, 0x59	; 89
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	f9 01       	movw	r30, r18
     33e:	20 81       	ld	r18, Z
     340:	25 64       	ori	r18, 0x45	; 69
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
	TCCR0 = (1 << CS02);
     346:	83 e5       	ldi	r24, 0x53	; 83
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	24 e0       	ldi	r18, 0x04	; 4
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
  TCCR1B = (1 << CS12) | (1 << CS10);
     350:	8e e4       	ldi	r24, 0x4E	; 78
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	25 e0       	ldi	r18, 0x05	; 5
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
  // TCNT1 = 32768;
}
     35a:	cf 91       	pop	r28
     35c:	df 91       	pop	r29
     35e:	08 95       	ret

00000360 <init>:

void init() {
     360:	df 93       	push	r29
     362:	cf 93       	push	r28
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
  // cli();
  set_up_ports();
     368:	ba de       	rcall	.-652    	; 0xde <set_up_ports>
  timer_init();
     36a:	e0 df       	rcall	.-64     	; 0x32c <timer_init>

  GICR |= (1 << INT0);
     36c:	8b e5       	ldi	r24, 0x5B	; 91
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	2b e5       	ldi	r18, 0x5B	; 91
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	f9 01       	movw	r30, r18
     376:	20 81       	ld	r18, Z
     378:	20 64       	ori	r18, 0x40	; 64
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
  MCUCR |= (1 << ISC00) | (1 << ISC01);
     37e:	85 e5       	ldi	r24, 0x55	; 85
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	25 e5       	ldi	r18, 0x55	; 85
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	f9 01       	movw	r30, r18
     388:	20 81       	ld	r18, Z
     38a:	23 60       	ori	r18, 0x03	; 3
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
  sei();
     390:	78 94       	sei
  // cli();
}
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <main>:


int main(void) {
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	df 93       	push	r29
     39e:	cf 93       	push	r28
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	e0 97       	sbiw	r28, 0x30	; 48
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
  init();
     3b0:	d7 df       	rcall	.-82     	; 0x360 <init>
  ds1621_init();
     3b2:	1a d3       	rcall	.+1588   	; 0x9e8 <ds1621_init>
  EEOpen();
     3b4:	37 d5       	rcall	.+2670   	; 0xe24 <EEOpen>
  USART_init(UBRR);
     3b6:	89 e1       	ldi	r24, 0x19	; 25
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	ce d5       	rcall	.+2972   	; 0xf58 <USART_init>
  DDRD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     3bc:	81 e3       	ldi	r24, 0x31	; 49
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	21 e3       	ldi	r18, 0x31	; 49
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	20 6e       	ori	r18, 0xE0	; 224
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
  PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     3ce:	82 e3       	ldi	r24, 0x32	; 50
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	22 e3       	ldi	r18, 0x32	; 50
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	f9 01       	movw	r30, r18
     3d8:	20 81       	ld	r18, Z
     3da:	20 6e       	ori	r18, 0xE0	; 224
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
	while(1) {
    if (should_update_temp) {
     3e0:	80 91 60 00 	lds	r24, 0x0060
     3e4:	90 91 61 00 	lds	r25, 0x0061
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	41 f1       	breq	.+80     	; 0x43c <main+0xa4>
      signed int temp = getTemperature();
     3ec:	85 d3       	rcall	.+1802   	; 0xaf8 <getTemperature>
     3ee:	99 27       	eor	r25, r25
     3f0:	87 fd       	sbrc	r24, 7
     3f2:	90 95       	com	r25
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	89 83       	std	Y+1, r24	; 0x01
      sprintf(display, "%4d", temp);
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <main+0x62>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <main+0x64>
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <main+0x66>
     3fe:	8d b7       	in	r24, 0x3d	; 61
     400:	9e b7       	in	r25, 0x3e	; 62
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	2b ea       	ldi	r18, 0xAB	; 171
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	31 83       	std	Z+1, r19	; 0x01
     40c:	20 83       	st	Z, r18
     40e:	29 e8       	ldi	r18, 0x89	; 137
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	33 83       	std	Z+3, r19	; 0x03
     416:	22 83       	std	Z+2, r18	; 0x02
     418:	29 81       	ldd	r18, Y+1	; 0x01
     41a:	3a 81       	ldd	r19, Y+2	; 0x02
     41c:	fc 01       	movw	r30, r24
     41e:	35 83       	std	Z+5, r19	; 0x05
     420:	24 83       	std	Z+4, r18	; 0x04
     422:	13 db       	rcall	.-2522   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
     424:	8d b7       	in	r24, 0x3d	; 61
     426:	9e b7       	in	r25, 0x3e	; 62
     428:	06 96       	adiw	r24, 0x06	; 6
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	9e bf       	out	0x3e, r25	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	8d bf       	out	0x3d, r24	; 61
      should_update_temp = 0;
     434:	10 92 61 00 	sts	0x0061, r1
     438:	10 92 60 00 	sts	0x0060, r1
    }

    if (state == TURBO) {
     43c:	80 91 c2 00 	lds	r24, 0x00C2
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	09 f0       	breq	.+2      	; 0x446 <main+0xae>
     444:	60 c0       	rjmp	.+192    	; 0x506 <__stack+0xa7>
      signed int temp = getTemperature();
     446:	58 d3       	rcall	.+1712   	; 0xaf8 <getTemperature>
     448:	99 27       	eor	r25, r25
     44a:	87 fd       	sbrc	r24, 7
     44c:	90 95       	com	r25
     44e:	9c 83       	std	Y+4, r25	; 0x04
     450:	8b 83       	std	Y+3, r24	; 0x03

      if (EEWriteByte(address, temp) == 0 ) {
     452:	80 91 c5 00 	lds	r24, 0x00C5
     456:	90 91 c6 00 	lds	r25, 0x00C6
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	62 2f       	mov	r22, r18
     45e:	e8 d4       	rcall	.+2512   	; 0xe30 <EEWriteByte>
     460:	88 23       	and	r24, r24
     462:	41 f4       	brne	.+16     	; 0x474 <__stack+0x15>
        strcpy(display, "0001");
     464:	8b ea       	ldi	r24, 0xAB	; 171
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	2d e8       	ldi	r18, 0x8D	; 141
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	b9 01       	movw	r22, r18
     46e:	45 e0       	ldi	r20, 0x05	; 5
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	e2 da       	rcall	.-2620   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
      }
      address++;
     474:	80 91 c5 00 	lds	r24, 0x00C5
     478:	90 91 c6 00 	lds	r25, 0x00C6
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	80 93 c5 00 	sts	0x00C5, r24
      sprintf(display, "%4d", temp);
     486:	00 d0       	rcall	.+0      	; 0x488 <__stack+0x29>
     488:	00 d0       	rcall	.+0      	; 0x48a <__stack+0x2b>
     48a:	00 d0       	rcall	.+0      	; 0x48c <__stack+0x2d>
     48c:	8d b7       	in	r24, 0x3d	; 61
     48e:	9e b7       	in	r25, 0x3e	; 62
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	2b ea       	ldi	r18, 0xAB	; 171
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	31 83       	std	Z+1, r19	; 0x01
     49a:	20 83       	st	Z, r18
     49c:	29 e8       	ldi	r18, 0x89	; 137
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	fc 01       	movw	r30, r24
     4a2:	33 83       	std	Z+3, r19	; 0x03
     4a4:	22 83       	std	Z+2, r18	; 0x02
     4a6:	2b 81       	ldd	r18, Y+3	; 0x03
     4a8:	3c 81       	ldd	r19, Y+4	; 0x04
     4aa:	fc 01       	movw	r30, r24
     4ac:	35 83       	std	Z+5, r19	; 0x05
     4ae:	24 83       	std	Z+4, r18	; 0x04
     4b0:	cc da       	rcall	.-2664   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
     4b2:	8d b7       	in	r24, 0x3d	; 61
     4b4:	9e b7       	in	r25, 0x3e	; 62
     4b6:	06 96       	adiw	r24, 0x06	; 6
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	9e bf       	out	0x3e, r25	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	8d bf       	out	0x3d, r24	; 61
      char str[30];
      sprintf(str, "current temperature: %4d", temp);
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <__stack+0x65>
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <__stack+0x67>
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <__stack+0x69>
     4c8:	8d b7       	in	r24, 0x3d	; 61
     4ca:	9e b7       	in	r25, 0x3e	; 62
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	9e 01       	movw	r18, r28
     4d0:	2d 5e       	subi	r18, 0xED	; 237
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	fc 01       	movw	r30, r24
     4d6:	31 83       	std	Z+1, r19	; 0x01
     4d8:	20 83       	st	Z, r18
     4da:	22 e9       	ldi	r18, 0x92	; 146
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	33 83       	std	Z+3, r19	; 0x03
     4e2:	22 83       	std	Z+2, r18	; 0x02
     4e4:	2b 81       	ldd	r18, Y+3	; 0x03
     4e6:	3c 81       	ldd	r19, Y+4	; 0x04
     4e8:	fc 01       	movw	r30, r24
     4ea:	35 83       	std	Z+5, r19	; 0x05
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	ad da       	rcall	.-2726   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
     4f0:	8d b7       	in	r24, 0x3d	; 61
     4f2:	9e b7       	in	r25, 0x3e	; 62
     4f4:	06 96       	adiw	r24, 0x06	; 6
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	9e bf       	out	0x3e, r25	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	8d bf       	out	0x3d, r24	; 61
      UART_println(str);
     500:	ce 01       	movw	r24, r28
     502:	43 96       	adiw	r24, 0x13	; 19
     504:	47 d5       	rcall	.+2702   	; 0xf94 <UART_println>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	a0 e8       	ldi	r26, 0x80	; 128
     50c:	bf e3       	ldi	r27, 0x3F	; 63
     50e:	8d 83       	std	Y+5, r24	; 0x05
     510:	9e 83       	std	Y+6, r25	; 0x06
     512:	af 83       	std	Y+7, r26	; 0x07
     514:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     516:	6d 81       	ldd	r22, Y+5	; 0x05
     518:	7e 81       	ldd	r23, Y+6	; 0x06
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	4a e7       	ldi	r20, 0x7A	; 122
     524:	54 e4       	ldi	r21, 0x44	; 68
     526:	fd d6       	rcall	.+3578   	; 0x1322 <__mulsf3>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	89 87       	std	Y+9, r24	; 0x09
     52e:	9a 87       	std	Y+10, r25	; 0x0a
     530:	ab 87       	std	Y+11, r26	; 0x0b
     532:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     534:	11 e0       	ldi	r17, 0x01	; 1
     536:	69 85       	ldd	r22, Y+9	; 0x09
     538:	7a 85       	ldd	r23, Y+10	; 0x0a
     53a:	8b 85       	ldd	r24, Y+11	; 0x0b
     53c:	9c 85       	ldd	r25, Y+12	; 0x0c
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	40 e8       	ldi	r20, 0x80	; 128
     544:	5f e3       	ldi	r21, 0x3F	; 63
     546:	38 d8       	rcall	.-3984   	; 0xfffff5b8 <__eeprom_end+0xff7ef5b8>
     548:	88 23       	and	r24, r24
     54a:	0c f0       	brlt	.+2      	; 0x54e <__stack+0xef>
     54c:	10 e0       	ldi	r17, 0x00	; 0
     54e:	11 23       	and	r17, r17
     550:	29 f0       	breq	.+10     	; 0x55c <__stack+0xfd>
		__ticks = 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	9e 87       	std	Y+14, r25	; 0x0e
     558:	8d 87       	std	Y+13, r24	; 0x0d
     55a:	42 c0       	rjmp	.+132    	; 0x5e0 <__stack+0x181>
	else if (__tmp > 65535)
     55c:	11 e0       	ldi	r17, 0x01	; 1
     55e:	69 85       	ldd	r22, Y+9	; 0x09
     560:	7a 85       	ldd	r23, Y+10	; 0x0a
     562:	8b 85       	ldd	r24, Y+11	; 0x0b
     564:	9c 85       	ldd	r25, Y+12	; 0x0c
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	3f ef       	ldi	r19, 0xFF	; 255
     56a:	4f e7       	ldi	r20, 0x7F	; 127
     56c:	57 e4       	ldi	r21, 0x47	; 71
     56e:	ce d7       	rcall	.+3996   	; 0x150c <__gtsf2>
     570:	18 16       	cp	r1, r24
     572:	0c f0       	brlt	.+2      	; 0x576 <__stack+0x117>
     574:	10 e0       	ldi	r17, 0x00	; 0
     576:	11 23       	and	r17, r17
     578:	51 f1       	breq	.+84     	; 0x5ce <__stack+0x16f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     57a:	6d 81       	ldd	r22, Y+5	; 0x05
     57c:	7e 81       	ldd	r23, Y+6	; 0x06
     57e:	8f 81       	ldd	r24, Y+7	; 0x07
     580:	98 85       	ldd	r25, Y+8	; 0x08
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	40 e2       	ldi	r20, 0x20	; 32
     588:	51 e4       	ldi	r21, 0x41	; 65
     58a:	cb d6       	rcall	.+3478   	; 0x1322 <__mulsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	bc 01       	movw	r22, r24
     592:	cd 01       	movw	r24, r26
     594:	04 d5       	rcall	.+2568   	; 0xf9e <__fixunssfsi>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9e 87       	std	Y+14, r25	; 0x0e
     59c:	8d 87       	std	Y+13, r24	; 0x0d
     59e:	12 c0       	rjmp	.+36     	; 0x5c4 <__stack+0x165>
     5a0:	84 e6       	ldi	r24, 0x64	; 100
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	98 8b       	std	Y+16, r25	; 0x10
     5a6:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a8:	8f 85       	ldd	r24, Y+15	; 0x0f
     5aa:	98 89       	ldd	r25, Y+16	; 0x10
     5ac:	8c 01       	movw	r16, r24
     5ae:	f8 01       	movw	r30, r16
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__stack+0x151>
     5b4:	8f 01       	movw	r16, r30
     5b6:	18 8b       	std	Y+16, r17	; 0x10
     5b8:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ba:	8d 85       	ldd	r24, Y+13	; 0x0d
     5bc:	9e 85       	ldd	r25, Y+14	; 0x0e
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	9e 87       	std	Y+14, r25	; 0x0e
     5c2:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     5c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	51 f7       	brne	.-44     	; 0x5a0 <__stack+0x141>
    }
    // UART_println("Hello, USER");
    _delay_ms(1);
	}
     5cc:	09 cf       	rjmp	.-494    	; 0x3e0 <main+0x48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5ce:	69 85       	ldd	r22, Y+9	; 0x09
     5d0:	7a 85       	ldd	r23, Y+10	; 0x0a
     5d2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5d4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5d6:	e3 d4       	rcall	.+2502   	; 0xf9e <__fixunssfsi>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	9e 87       	std	Y+14, r25	; 0x0e
     5de:	8d 87       	std	Y+13, r24	; 0x0d
     5e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5e2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5e4:	9a 8b       	std	Y+18, r25	; 0x12
     5e6:	89 8b       	std	Y+17, r24	; 0x11
     5e8:	89 89       	ldd	r24, Y+17	; 0x11
     5ea:	9a 89       	ldd	r25, Y+18	; 0x12
     5ec:	8c 01       	movw	r16, r24
     5ee:	c8 01       	movw	r24, r16
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <__stack+0x191>
     5f4:	8c 01       	movw	r16, r24
     5f6:	1a 8b       	std	Y+18, r17	; 0x12
     5f8:	09 8b       	std	Y+17, r16	; 0x11
     5fa:	f2 ce       	rjmp	.-540    	; 0x3e0 <main+0x48>

000005fc <char_to_code>:
#include "display_handler.h"

char display[] = "    ";

unsigned int char_to_code(char symbol) {
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	00 d0       	rcall	.+0      	; 0x602 <char_to_code+0x6>
     602:	0f 92       	push	r0
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int code;
    switch (symbol) {
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	88 2f       	mov	r24, r24
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	aa 27       	eor	r26, r26
     612:	97 fd       	sbrc	r25, 7
     614:	a0 95       	com	r26
     616:	ba 2f       	mov	r27, r26
     618:	40 e2       	ldi	r20, 0x20	; 32
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	2f e3       	ldi	r18, 0x3F	; 63
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	84 1b       	sub	r24, r20
     622:	95 0b       	sbc	r25, r21
     624:	28 17       	cp	r18, r24
     626:	39 07       	cpc	r19, r25
     628:	08 f4       	brcc	.+2      	; 0x62c <char_to_code+0x30>
     62a:	55 c0       	rjmp	.+170    	; 0x6d6 <char_to_code+0xda>
     62c:	8d 5e       	subi	r24, 0xED	; 237
     62e:	9f 4f       	sbci	r25, 0xFF	; 255
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	08 95       	ret
        case '-':
            code = 0b10111111;
     636:	8f eb       	ldi	r24, 0xBF	; 191
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
            break;
     63e:	4f c0       	rjmp	.+158    	; 0x6de <char_to_code+0xe2>
        case '_':
            code = 0b11110111;
     640:	87 ef       	ldi	r24, 0xF7	; 247
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
            break;
     648:	4a c0       	rjmp	.+148    	; 0x6de <char_to_code+0xe2>
        case '0':
            code = 0b11000000;
     64a:	80 ec       	ldi	r24, 0xC0	; 192
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	9a 83       	std	Y+2, r25	; 0x02
     650:	89 83       	std	Y+1, r24	; 0x01
            break;
     652:	45 c0       	rjmp	.+138    	; 0x6de <char_to_code+0xe2>
        case '1':
            code = 0b11111001;
     654:	89 ef       	ldi	r24, 0xF9	; 249
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01
            break;
     65c:	40 c0       	rjmp	.+128    	; 0x6de <char_to_code+0xe2>
        case '2':
            code = 0b10100100;
     65e:	84 ea       	ldi	r24, 0xA4	; 164
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9a 83       	std	Y+2, r25	; 0x02
     664:	89 83       	std	Y+1, r24	; 0x01
            break;
     666:	3b c0       	rjmp	.+118    	; 0x6de <char_to_code+0xe2>
        case '3':
            code = 0b10110000;
     668:	80 eb       	ldi	r24, 0xB0	; 176
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	9a 83       	std	Y+2, r25	; 0x02
     66e:	89 83       	std	Y+1, r24	; 0x01
            break;
     670:	36 c0       	rjmp	.+108    	; 0x6de <char_to_code+0xe2>
        case '4':
            code = 0b10011001;
     672:	89 e9       	ldi	r24, 0x99	; 153
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
            break;
     67a:	31 c0       	rjmp	.+98     	; 0x6de <char_to_code+0xe2>
        case '5':
            code = 0b10010010;
     67c:	82 e9       	ldi	r24, 0x92	; 146
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9a 83       	std	Y+2, r25	; 0x02
     682:	89 83       	std	Y+1, r24	; 0x01
            break;
     684:	2c c0       	rjmp	.+88     	; 0x6de <char_to_code+0xe2>
        case '6':
            code = 0b10000010;
     686:	82 e8       	ldi	r24, 0x82	; 130
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
            break;
     68e:	27 c0       	rjmp	.+78     	; 0x6de <char_to_code+0xe2>
        case '7':
            code = 0b11111000;
     690:	88 ef       	ldi	r24, 0xF8	; 248
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	89 83       	std	Y+1, r24	; 0x01
            break;
     698:	22 c0       	rjmp	.+68     	; 0x6de <char_to_code+0xe2>
        case '8':
            code = 0b10000000;
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9a 83       	std	Y+2, r25	; 0x02
     6a0:	89 83       	std	Y+1, r24	; 0x01
            break;
     6a2:	1d c0       	rjmp	.+58     	; 0x6de <char_to_code+0xe2>
        case '9':
            code = 0b10010000;
     6a4:	80 e9       	ldi	r24, 0x90	; 144
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	9a 83       	std	Y+2, r25	; 0x02
     6aa:	89 83       	std	Y+1, r24	; 0x01
            break;
     6ac:	18 c0       	rjmp	.+48     	; 0x6de <char_to_code+0xe2>
        case 'C':
            code = 0b11000110;
     6ae:	86 ec       	ldi	r24, 0xC6	; 198
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9a 83       	std	Y+2, r25	; 0x02
     6b4:	89 83       	std	Y+1, r24	; 0x01
            break;
     6b6:	13 c0       	rjmp	.+38     	; 0x6de <char_to_code+0xe2>
        case 'H':
            code = 0b10001001;
     6b8:	89 e8       	ldi	r24, 0x89	; 137
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
            break;
     6c0:	0e c0       	rjmp	.+28     	; 0x6de <char_to_code+0xe2>
        case 'L':
            code = 0b11000111;
     6c2:	87 ec       	ldi	r24, 0xC7	; 199
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
            break;
     6ca:	09 c0       	rjmp	.+18     	; 0x6de <char_to_code+0xe2>
        case ' ':
            code = 0b11111111;
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	9a 83       	std	Y+2, r25	; 0x02
     6d2:	89 83       	std	Y+1, r24	; 0x01
            break;
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <char_to_code+0xe2>
        default:
            code = 0xff;
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
    };
    return code;
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	cf 91       	pop	r28
     6ea:	df 91       	pop	r29
     6ec:	08 95       	ret

000006ee <send_digit_to_display>:

void send_digit_to_display(unsigned int number, char digit) {
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	63 97       	sbiw	r28, 0x13	; 19
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	9a 8b       	std	Y+18, r25	; 0x12
     708:	89 8b       	std	Y+17, r24	; 0x11
     70a:	6b 8b       	std	Y+19, r22	; 0x13
    unsigned int displayDigit = char_to_code(digit);
     70c:	8b 89       	ldd	r24, Y+19	; 0x13
     70e:	76 df       	rcall	.-276    	; 0x5fc <char_to_code>
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
    PORTB |= (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<< PB3) | (1<<PB4) | (1<<PB5);//clr data pin
     714:	88 e3       	ldi	r24, 0x38	; 56
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	28 e3       	ldi	r18, 0x38	; 56
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	f9 01       	movw	r30, r18
     71e:	20 81       	ld	r18, Z
     720:	2f 63       	ori	r18, 0x3F	; 63
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
    PORTD |= (1<<PD3);// clr data pin
     726:	82 e3       	ldi	r24, 0x32	; 50
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	22 e3       	ldi	r18, 0x32	; 50
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	f9 01       	movw	r30, r18
     730:	20 81       	ld	r18, Z
     732:	28 60       	ori	r18, 0x08	; 8
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
    
    PORTC &= ~((1<<PC0) | (1<<PC1) | (1<<PC2) | (1<< PC3));// clr addr
     738:	85 e3       	ldi	r24, 0x35	; 53
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	25 e3       	ldi	r18, 0x35	; 53
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	20 7f       	andi	r18, 0xF0	; 240
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
    PORTC |= (1 << number); // set addr
     74a:	85 e3       	ldi	r24, 0x35	; 53
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	25 e3       	ldi	r18, 0x35	; 53
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	62 2f       	mov	r22, r18
     758:	49 89       	ldd	r20, Y+17	; 0x11
     75a:	5a 89       	ldd	r21, Y+18	; 0x12
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	02 c0       	rjmp	.+4      	; 0x766 <send_digit_to_display+0x78>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	4a 95       	dec	r20
     768:	e2 f7       	brpl	.-8      	; 0x762 <send_digit_to_display+0x74>
     76a:	26 2b       	or	r18, r22
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18
    
    PORTB = displayDigit; // set data1
     770:	88 e3       	ldi	r24, 0x38	; 56
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
     77a:	82 e3       	ldi	r24, 0x32	; 50
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	22 e3       	ldi	r18, 0x32	; 50
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	40 81       	ld	r20, Z
     786:	29 81       	ldd	r18, Y+1	; 0x01
     788:	3a 81       	ldd	r19, Y+2	; 0x02
     78a:	36 95       	lsr	r19
     78c:	27 95       	ror	r18
     78e:	36 95       	lsr	r19
     790:	27 95       	ror	r18
     792:	36 95       	lsr	r19
     794:	27 95       	ror	r18
     796:	20 95       	com	r18
     798:	28 70       	andi	r18, 0x08	; 8
     79a:	20 95       	com	r18
     79c:	24 23       	and	r18, r20
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	a0 e8       	ldi	r26, 0x80	; 128
     7a8:	bf e3       	ldi	r27, 0x3F	; 63
     7aa:	8b 83       	std	Y+3, r24	; 0x03
     7ac:	9c 83       	std	Y+4, r25	; 0x04
     7ae:	ad 83       	std	Y+5, r26	; 0x05
     7b0:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     7b2:	6b 81       	ldd	r22, Y+3	; 0x03
     7b4:	7c 81       	ldd	r23, Y+4	; 0x04
     7b6:	8d 81       	ldd	r24, Y+5	; 0x05
     7b8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	4a e7       	ldi	r20, 0x7A	; 122
     7c0:	54 e4       	ldi	r21, 0x44	; 68
     7c2:	af d5       	rcall	.+2910   	; 0x1322 <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	8f 83       	std	Y+7, r24	; 0x07
     7ca:	98 87       	std	Y+8, r25	; 0x08
     7cc:	a9 87       	std	Y+9, r26	; 0x09
     7ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     7d0:	11 e0       	ldi	r17, 0x01	; 1
     7d2:	6f 81       	ldd	r22, Y+7	; 0x07
     7d4:	78 85       	ldd	r23, Y+8	; 0x08
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e8       	ldi	r20, 0x80	; 128
     7e0:	5f e3       	ldi	r21, 0x3F	; 63
     7e2:	ea d6       	rcall	.+3540   	; 0x15b8 <__ltsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <send_digit_to_display+0xfc>
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	11 23       	and	r17, r17
     7ec:	29 f0       	breq	.+10     	; 0x7f8 <send_digit_to_display+0x10a>
		__ticks = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	9c 87       	std	Y+12, r25	; 0x0c
     7f4:	8b 87       	std	Y+11, r24	; 0x0b
     7f6:	42 c0       	rjmp	.+132    	; 0x87c <send_digit_to_display+0x18e>
	else if (__tmp > 65535)
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	6f 81       	ldd	r22, Y+7	; 0x07
     7fc:	78 85       	ldd	r23, Y+8	; 0x08
     7fe:	89 85       	ldd	r24, Y+9	; 0x09
     800:	9a 85       	ldd	r25, Y+10	; 0x0a
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	3f ef       	ldi	r19, 0xFF	; 255
     806:	4f e7       	ldi	r20, 0x7F	; 127
     808:	57 e4       	ldi	r21, 0x47	; 71
     80a:	80 d6       	rcall	.+3328   	; 0x150c <__gtsf2>
     80c:	18 16       	cp	r1, r24
     80e:	0c f0       	brlt	.+2      	; 0x812 <send_digit_to_display+0x124>
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	11 23       	and	r17, r17
     814:	51 f1       	breq	.+84     	; 0x86a <send_digit_to_display+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     816:	6b 81       	ldd	r22, Y+3	; 0x03
     818:	7c 81       	ldd	r23, Y+4	; 0x04
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	9e 81       	ldd	r25, Y+6	; 0x06
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e2       	ldi	r20, 0x20	; 32
     824:	51 e4       	ldi	r21, 0x41	; 65
     826:	7d d5       	rcall	.+2810   	; 0x1322 <__mulsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	b6 d3       	rcall	.+1900   	; 0xf9e <__fixunssfsi>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	9c 87       	std	Y+12, r25	; 0x0c
     838:	8b 87       	std	Y+11, r24	; 0x0b
     83a:	12 c0       	rjmp	.+36     	; 0x860 <send_digit_to_display+0x172>
     83c:	84 e6       	ldi	r24, 0x64	; 100
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	9e 87       	std	Y+14, r25	; 0x0e
     842:	8d 87       	std	Y+13, r24	; 0x0d
     844:	8d 85       	ldd	r24, Y+13	; 0x0d
     846:	9e 85       	ldd	r25, Y+14	; 0x0e
     848:	8c 01       	movw	r16, r24
     84a:	c8 01       	movw	r24, r16
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <send_digit_to_display+0x15e>
     850:	8c 01       	movw	r16, r24
     852:	1e 87       	std	Y+14, r17	; 0x0e
     854:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     856:	8b 85       	ldd	r24, Y+11	; 0x0b
     858:	9c 85       	ldd	r25, Y+12	; 0x0c
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	9c 87       	std	Y+12, r25	; 0x0c
     85e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     860:	8b 85       	ldd	r24, Y+11	; 0x0b
     862:	9c 85       	ldd	r25, Y+12	; 0x0c
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	51 f7       	brne	.-44     	; 0x83c <send_digit_to_display+0x14e>
     868:	16 c0       	rjmp	.+44     	; 0x896 <send_digit_to_display+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     86a:	6f 81       	ldd	r22, Y+7	; 0x07
     86c:	78 85       	ldd	r23, Y+8	; 0x08
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	9a 85       	ldd	r25, Y+10	; 0x0a
     872:	95 d3       	rcall	.+1834   	; 0xf9e <__fixunssfsi>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	9c 87       	std	Y+12, r25	; 0x0c
     87a:	8b 87       	std	Y+11, r24	; 0x0b
     87c:	8b 85       	ldd	r24, Y+11	; 0x0b
     87e:	9c 85       	ldd	r25, Y+12	; 0x0c
     880:	98 8b       	std	Y+16, r25	; 0x10
     882:	8f 87       	std	Y+15, r24	; 0x0f
     884:	8f 85       	ldd	r24, Y+15	; 0x0f
     886:	98 89       	ldd	r25, Y+16	; 0x10
     888:	8c 01       	movw	r16, r24
     88a:	f8 01       	movw	r30, r16
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <send_digit_to_display+0x19e>
     890:	8f 01       	movw	r16, r30
     892:	18 8b       	std	Y+16, r17	; 0x10
     894:	0f 87       	std	Y+15, r16	; 0x0f
    _delay_ms(1);
}
     896:	63 96       	adiw	r28, 0x13	; 19
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	cf 91       	pop	r28
     8a4:	df 91       	pop	r29
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	08 95       	ret

000008ac <printDisplay>:

void printDisplay() {
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <printDisplay+0x6>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
    for (short int i = 0; i < 4; ++i) {
     8b6:	1a 82       	std	Y+2, r1	; 0x02
     8b8:	19 82       	std	Y+1, r1	; 0x01
     8ba:	0f c0       	rjmp	.+30     	; 0x8da <printDisplay+0x2e>
        send_digit_to_display(i, display[i]);
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	9a 81       	ldd	r25, Y+2	; 0x02
     8c0:	29 81       	ldd	r18, Y+1	; 0x01
     8c2:	3a 81       	ldd	r19, Y+2	; 0x02
     8c4:	25 55       	subi	r18, 0x55	; 85
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	62 2f       	mov	r22, r18
     8ce:	0f df       	rcall	.-482    	; 0x6ee <send_digit_to_display>
    PORTD &= ~((1<<PD3) & (~(displayDigit>>3))); // set data2
    _delay_ms(1);
}

void printDisplay() {
    for (short int i = 0; i < 4; ++i) {
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	9a 81       	ldd	r25, Y+2	; 0x02
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	9a 83       	std	Y+2, r25	; 0x02
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	9a 81       	ldd	r25, Y+2	; 0x02
     8de:	84 30       	cpi	r24, 0x04	; 4
     8e0:	91 05       	cpc	r25, r1
     8e2:	64 f3       	brlt	.-40     	; 0x8bc <printDisplay+0x10>
        send_digit_to_display(i, display[i]);
    }
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	cf 91       	pop	r28
     8ea:	df 91       	pop	r29
     8ec:	08 95       	ret

000008ee <number_key_pressed>:
#include "button_handler.h"
unsigned char number_key_pressed(void) {
     8ee:	df 93       	push	r29
     8f0:	cf 93       	push	r28
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     8f6:	82 e3       	ldi	r24, 0x32	; 50
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	22 e3       	ldi	r18, 0x32	; 50
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	2f 71       	andi	r18, 0x1F	; 31
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
  PORTD |= (1 << PD5);
     908:	82 e3       	ldi	r24, 0x32	; 50
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	22 e3       	ldi	r18, 0x32	; 50
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	f9 01       	movw	r30, r18
     912:	20 81       	ld	r18, Z
     914:	20 62       	ori	r18, 0x20	; 32
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     91a:	80 e3       	ldi	r24, 0x30	; 48
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	80 81       	ld	r24, Z
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	84 70       	andi	r24, 0x04	; 4
     928:	90 70       	andi	r25, 0x00	; 0
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	59 f0       	breq	.+22     	; 0x944 <number_key_pressed+0x56>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     92e:	82 e3       	ldi	r24, 0x32	; 50
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	22 e3       	ldi	r18, 0x32	; 50
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	f9 01       	movw	r30, r18
     938:	20 81       	ld	r18, Z
     93a:	20 6e       	ori	r18, 0xE0	; 224
     93c:	fc 01       	movw	r30, r24
     93e:	20 83       	st	Z, r18
    return 0;
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	4f c0       	rjmp	.+158    	; 0x9e2 <number_key_pressed+0xf4>
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     944:	82 e3       	ldi	r24, 0x32	; 50
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	22 e3       	ldi	r18, 0x32	; 50
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	f9 01       	movw	r30, r18
     94e:	20 81       	ld	r18, Z
     950:	2f 71       	andi	r18, 0x1F	; 31
     952:	fc 01       	movw	r30, r24
     954:	20 83       	st	Z, r18
  PORTD |= (1 << PD6);
     956:	82 e3       	ldi	r24, 0x32	; 50
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	22 e3       	ldi	r18, 0x32	; 50
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	20 64       	ori	r18, 0x40	; 64
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     968:	80 e3       	ldi	r24, 0x30	; 48
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	fc 01       	movw	r30, r24
     96e:	80 81       	ld	r24, Z
     970:	88 2f       	mov	r24, r24
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	84 70       	andi	r24, 0x04	; 4
     976:	90 70       	andi	r25, 0x00	; 0
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	59 f0       	breq	.+22     	; 0x992 <number_key_pressed+0xa4>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     97c:	82 e3       	ldi	r24, 0x32	; 50
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	22 e3       	ldi	r18, 0x32	; 50
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	20 6e       	ori	r18, 0xE0	; 224
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
    return 1;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	28 c0       	rjmp	.+80     	; 0x9e2 <number_key_pressed+0xf4>
  }
  PORTD &= ~((1 << PD5) | (1 << PD6) | (1 << PD7));
     992:	82 e3       	ldi	r24, 0x32	; 50
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	22 e3       	ldi	r18, 0x32	; 50
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	2f 71       	andi	r18, 0x1F	; 31
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
  PORTD |= (1 << PD7);
     9a4:	82 e3       	ldi	r24, 0x32	; 50
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	22 e3       	ldi	r18, 0x32	; 50
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	20 68       	ori	r18, 0x80	; 128
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
  if (PIND & (1 << PD2)) {
     9b6:	80 e3       	ldi	r24, 0x30	; 48
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	80 81       	ld	r24, Z
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	84 70       	andi	r24, 0x04	; 4
     9c4:	90 70       	andi	r25, 0x00	; 0
     9c6:	00 97       	sbiw	r24, 0x00	; 0
     9c8:	59 f0       	breq	.+22     	; 0x9e0 <number_key_pressed+0xf2>
    PORTD |= (1 << PD5) | (1 << PD6) | (1 << PD7);
     9ca:	82 e3       	ldi	r24, 0x32	; 50
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	22 e3       	ldi	r18, 0x32	; 50
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	20 6e       	ori	r18, 0xE0	; 224
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
    return 2;
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <number_key_pressed+0xf4>
  // }

  // if (!isButton2) {
  //   return 2;
  // }
  return 42;
     9e0:	8a e2       	ldi	r24, 0x2A	; 42
}
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <ds1621_init>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_init()
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	0f 92       	push	r0
     9ee:	cd b7       	in	r28, 0x3d	; 61
     9f0:	de b7       	in	r29, 0x3e	; 62
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     9f2:	17 d1       	rcall	.+558    	; 0xc22 <i2c_start>
     9f4:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     9f6:	89 81       	ldd	r24, Y+1	; 0x01
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	11 f4       	brne	.+4      	; 0xa00 <ds1621_init+0x18>
   {
   	 i2c_stop();
     9fc:	07 d2       	rcall	.+1038   	; 0xe0c <i2c_stop>
  	 return;
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     a00:	80 e9       	ldi	r24, 0x90	; 144
     a02:	51 d1       	rcall	.+674    	; 0xca6 <i2c_sendAddress>
     a04:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	11 f4       	brne	.+4      	; 0xa10 <ds1621_init+0x28>
   {
  	 i2c_stop();
     a0c:	ff d1       	rcall	.+1022   	; 0xe0c <i2c_stop>
  	 return;
     a0e:	11 c0       	rjmp	.+34     	; 0xa32 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(ACCESS_CONFIG);
     a10:	8c ea       	ldi	r24, 0xAC	; 172
     a12:	83 d1       	rcall	.+774    	; 0xd1a <i2c_sendData>
     a14:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	81 30       	cpi	r24, 0x01	; 1
     a1a:	11 f4       	brne	.+4      	; 0xa20 <ds1621_init+0x38>
   {
  	 i2c_stop();
     a1c:	f7 d1       	rcall	.+1006   	; 0xe0c <i2c_stop>
  	 return;
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <ds1621_init+0x4a>
   } 
   
   errorStatus = i2c_sendData(0x03);   //commmand to set o/ppolarity high, single shot conversion
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	7b d1       	rcall	.+758    	; 0xd1a <i2c_sendData>
     a24:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	11 f4       	brne	.+4      	; 0xa30 <ds1621_init+0x48>
   {
  	 i2c_stop();
     a2c:	ef d1       	rcall	.+990    	; 0xe0c <i2c_stop>
	 return;
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <ds1621_init+0x4a>
   } 

   i2c_stop();
     a30:	ed d1       	rcall	.+986    	; 0xe0c <i2c_stop>
}
     a32:	0f 90       	pop	r0
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	08 95       	ret

00000a3a <ds1621_sendCommand>:

//******************************************************************
//Function to send command
//******************************************************************    
void ds1621_sendCommand(unsigned char command)
{
     a3a:	df 93       	push	r29
     a3c:	cf 93       	push	r28
     a3e:	00 d0       	rcall	.+0      	; 0xa40 <ds1621_sendCommand+0x6>
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     a46:	ed d0       	rcall	.+474    	; 0xc22 <i2c_start>
     a48:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	11 f4       	brne	.+4      	; 0xa54 <ds1621_sendCommand+0x1a>
   {
   	 i2c_stop();
     a50:	dd d1       	rcall	.+954    	; 0xe0c <i2c_stop>
	 return;
     a52:	11 c0       	rjmp	.+34     	; 0xa76 <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     a54:	80 e9       	ldi	r24, 0x90	; 144
     a56:	27 d1       	rcall	.+590    	; 0xca6 <i2c_sendAddress>
     a58:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	11 f4       	brne	.+4      	; 0xa64 <ds1621_sendCommand+0x2a>
   {
	 i2c_stop();
     a60:	d5 d1       	rcall	.+938    	; 0xe0c <i2c_stop>
	 return;
     a62:	09 c0       	rjmp	.+18     	; 0xa76 <ds1621_sendCommand+0x3c>
   } 
   
   errorStatus = i2c_sendData(command);
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	59 d1       	rcall	.+690    	; 0xd1a <i2c_sendData>
     a68:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	11 f4       	brne	.+4      	; 0xa74 <ds1621_sendCommand+0x3a>
   {
	 i2c_stop();
     a70:	cd d1       	rcall	.+922    	; 0xe0c <i2c_stop>
	 return;
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <ds1621_sendCommand+0x3c>
   } 

   i2c_stop();
     a74:	cb d1       	rcall	.+918    	; 0xe0c <i2c_stop>
}
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	08 95       	ret

00000a80 <ds1621_readValue>:
//******************************************************************
//Function to read 
//******************************************************************    

unsigned char ds1621_readValue(unsigned char value)
{
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	00 d0       	rcall	.+0      	; 0xa86 <ds1621_readValue+0x6>
     a86:	0f 92       	push	r0
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	8b 83       	std	Y+3, r24	; 0x03
  unsigned char errorStatus, data;
  
  errorStatus = i2c_start();
     a8e:	c9 d0       	rcall	.+402    	; 0xc22 <i2c_start>
     a90:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	19 f4       	brne	.+6      	; 0xa9e <ds1621_readValue+0x1e>
   {
   	 i2c_stop();
     a98:	b9 d1       	rcall	.+882    	; 0xe0c <i2c_stop>
	 return (0);
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendAddress(DS1621_W);
     a9e:	80 e9       	ldi	r24, 0x90	; 144
     aa0:	02 d1       	rcall	.+516    	; 0xca6 <i2c_sendAddress>
     aa2:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	19 f4       	brne	.+6      	; 0xab0 <ds1621_readValue+0x30>
   {
	 i2c_stop();
     aaa:	b0 d1       	rcall	.+864    	; 0xe0c <i2c_stop>
	 return (0);
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	1e c0       	rjmp	.+60     	; 0xaec <ds1621_readValue+0x6c>
   } 
   
   errorStatus = i2c_sendData(value);
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	33 d1       	rcall	.+614    	; 0xd1a <i2c_sendData>
     ab4:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	19 f4       	brne	.+6      	; 0xac2 <ds1621_readValue+0x42>
   {
	 i2c_stop();
     abc:	a7 d1       	rcall	.+846    	; 0xe0c <i2c_stop>
	 return (0);
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	15 c0       	rjmp	.+42     	; 0xaec <ds1621_readValue+0x6c>
   } 

    errorStatus = i2c_repeatStart();
     ac2:	d0 d0       	rcall	.+416    	; 0xc64 <i2c_repeatStart>
     ac4:	89 83       	std	Y+1, r24	; 0x01
   if(errorStatus == 1)
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	19 f4       	brne	.+6      	; 0xad2 <ds1621_readValue+0x52>
   {
   	 i2c_stop();
     acc:	9f d1       	rcall	.+830    	; 0xe0c <i2c_stop>
	 return (0);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <ds1621_readValue+0x6c>
   } 
   
    errorStatus = i2c_sendAddress(DS1621_R);
     ad2:	81 e9       	ldi	r24, 0x91	; 145
     ad4:	e8 d0       	rcall	.+464    	; 0xca6 <i2c_sendAddress>
     ad6:	89 83       	std	Y+1, r24	; 0x01
   
   if(errorStatus == 1)
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	19 f4       	brne	.+6      	; 0xae4 <ds1621_readValue+0x64>
   {
	 i2c_stop();
     ade:	96 d1       	rcall	.+812    	; 0xe0c <i2c_stop>
	 return (0);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <ds1621_readValue+0x6c>
   } 
 
   data = i2c_receiveData_NACK(); 
     ae4:	6b d1       	rcall	.+726    	; 0xdbc <i2c_receiveData_NACK>
     ae6:	8a 83       	std	Y+2, r24	; 0x02
   
   i2c_stop();
     ae8:	91 d1       	rcall	.+802    	; 0xe0c <i2c_stop>
   
   return (data);
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
}	  
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <getTemperature>:

//******************************************************************
//Function to read 
//******************************************************************    
signed char getTemperature(void)
{ 
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	df 93       	push	r29
     afe:	cf 93       	push	r28
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	2e 97       	sbiw	r28, 0x0e	; 14
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
  ds1621_sendCommand ( START_CONVERT );
     b10:	8e ee       	ldi	r24, 0xEE	; 238
     b12:	93 df       	rcall	.-218    	; 0xa3a <ds1621_sendCommand>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	aa e7       	ldi	r26, 0x7A	; 122
     b1a:	b4 e4       	ldi	r27, 0x44	; 68
     b1c:	89 83       	std	Y+1, r24	; 0x01
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	ab 83       	std	Y+3, r26	; 0x03
     b22:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     b24:	69 81       	ldd	r22, Y+1	; 0x01
     b26:	7a 81       	ldd	r23, Y+2	; 0x02
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	4a e7       	ldi	r20, 0x7A	; 122
     b32:	54 e4       	ldi	r21, 0x44	; 68
     b34:	f6 d3       	rcall	.+2028   	; 0x1322 <__mulsf3>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	8d 83       	std	Y+5, r24	; 0x05
     b3c:	9e 83       	std	Y+6, r25	; 0x06
     b3e:	af 83       	std	Y+7, r26	; 0x07
     b40:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     b42:	11 e0       	ldi	r17, 0x01	; 1
     b44:	6d 81       	ldd	r22, Y+5	; 0x05
     b46:	7e 81       	ldd	r23, Y+6	; 0x06
     b48:	8f 81       	ldd	r24, Y+7	; 0x07
     b4a:	98 85       	ldd	r25, Y+8	; 0x08
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e8       	ldi	r20, 0x80	; 128
     b52:	5f e3       	ldi	r21, 0x3F	; 63
     b54:	31 d5       	rcall	.+2658   	; 0x15b8 <__ltsf2>
     b56:	88 23       	and	r24, r24
     b58:	0c f0       	brlt	.+2      	; 0xb5c <getTemperature+0x64>
     b5a:	10 e0       	ldi	r17, 0x00	; 0
     b5c:	11 23       	and	r17, r17
     b5e:	29 f0       	breq	.+10     	; 0xb6a <getTemperature+0x72>
		__ticks = 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9a 87       	std	Y+10, r25	; 0x0a
     b66:	89 87       	std	Y+9, r24	; 0x09
     b68:	42 c0       	rjmp	.+132    	; 0xbee <getTemperature+0xf6>
	else if (__tmp > 65535)
     b6a:	11 e0       	ldi	r17, 0x01	; 1
     b6c:	6d 81       	ldd	r22, Y+5	; 0x05
     b6e:	7e 81       	ldd	r23, Y+6	; 0x06
     b70:	8f 81       	ldd	r24, Y+7	; 0x07
     b72:	98 85       	ldd	r25, Y+8	; 0x08
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	3f ef       	ldi	r19, 0xFF	; 255
     b78:	4f e7       	ldi	r20, 0x7F	; 127
     b7a:	57 e4       	ldi	r21, 0x47	; 71
     b7c:	c7 d4       	rcall	.+2446   	; 0x150c <__gtsf2>
     b7e:	18 16       	cp	r1, r24
     b80:	0c f0       	brlt	.+2      	; 0xb84 <getTemperature+0x8c>
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	11 23       	and	r17, r17
     b86:	51 f1       	breq	.+84     	; 0xbdc <getTemperature+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b88:	69 81       	ldd	r22, Y+1	; 0x01
     b8a:	7a 81       	ldd	r23, Y+2	; 0x02
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e2       	ldi	r20, 0x20	; 32
     b96:	51 e4       	ldi	r21, 0x41	; 65
     b98:	c4 d3       	rcall	.+1928   	; 0x1322 <__mulsf3>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	bc 01       	movw	r22, r24
     ba0:	cd 01       	movw	r24, r26
     ba2:	fd d1       	rcall	.+1018   	; 0xf9e <__fixunssfsi>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	9a 87       	std	Y+10, r25	; 0x0a
     baa:	89 87       	std	Y+9, r24	; 0x09
     bac:	12 c0       	rjmp	.+36     	; 0xbd2 <getTemperature+0xda>
     bae:	84 e6       	ldi	r24, 0x64	; 100
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9c 87       	std	Y+12, r25	; 0x0c
     bb4:	8b 87       	std	Y+11, r24	; 0x0b
     bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bba:	8c 01       	movw	r16, r24
     bbc:	c8 01       	movw	r24, r16
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <getTemperature+0xc6>
     bc2:	8c 01       	movw	r16, r24
     bc4:	1c 87       	std	Y+12, r17	; 0x0c
     bc6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9a 87       	std	Y+10, r25	; 0x0a
     bd0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bd2:	89 85       	ldd	r24, Y+9	; 0x09
     bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	51 f7       	brne	.-44     	; 0xbae <getTemperature+0xb6>
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <getTemperature+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bdc:	6d 81       	ldd	r22, Y+5	; 0x05
     bde:	7e 81       	ldd	r23, Y+6	; 0x06
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	dc d1       	rcall	.+952    	; 0xf9e <__fixunssfsi>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	9a 87       	std	Y+10, r25	; 0x0a
     bec:	89 87       	std	Y+9, r24	; 0x09
     bee:	89 85       	ldd	r24, Y+9	; 0x09
     bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf2:	9e 87       	std	Y+14, r25	; 0x0e
     bf4:	8d 87       	std	Y+13, r24	; 0x0d
     bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfa:	8c 01       	movw	r16, r24
     bfc:	c8 01       	movw	r24, r16
     bfe:	01 97       	sbiw	r24, 0x01	; 1
     c00:	f1 f7       	brne	.-4      	; 0xbfe <getTemperature+0x106>
     c02:	8c 01       	movw	r16, r24
     c04:	1e 87       	std	Y+14, r17	; 0x0e
     c06:	0d 87       	std	Y+13, r16	; 0x0d
  
  _delay_ms(1000);
  
  return ds1621_readValue ( READ_TEMP );
     c08:	8a ea       	ldi	r24, 0xAA	; 170
     c0a:	3a df       	rcall	.-396    	; 0xa80 <ds1621_readValue>
     c0c:	2e 96       	adiw	r28, 0x0e	; 14
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <i2c_start>:
#include <avr/io.h>
#include "i2c_routines.h"
//*************************************************
// Function to start i2c communication
//*************************************************
unsigned char i2c_start(void) {
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     c2a:	86 e5       	ldi	r24, 0x56	; 86
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	24 ea       	ldi	r18, 0xA4	; 164
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     c34:	00 00       	nop
     c36:	86 e5       	ldi	r24, 0x56	; 86
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	88 23       	and	r24, r24
     c40:	d4 f7       	brge	.-12     	; 0xc36 <i2c_start+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == START)  // Check value of TWI Status Register
     c42:	81 e2       	ldi	r24, 0x21	; 33
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	88 7f       	andi	r24, 0xF8	; 248
     c50:	90 70       	andi	r25, 0x00	; 0
     c52:	88 30       	cpi	r24, 0x08	; 8
     c54:	91 05       	cpc	r25, r1
     c56:	11 f4       	brne	.+4      	; 0xc5c <i2c_start+0x3a>
    return (0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <i2c_start+0x3c>
  else
    return (1);
     c5c:	81 e0       	ldi	r24, 0x01	; 1
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <i2c_repeatStart>:

//*************************************************
// Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void) {
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);  // Send START condition
     c6c:	86 e5       	ldi	r24, 0x56	; 86
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	24 ea       	ldi	r18, 0xA4	; 164
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
  while (!(TWCR & (1 << TWINT)))
     c76:	00 00       	nop
     c78:	86 e5       	ldi	r24, 0x56	; 86
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	d4 f7       	brge	.-12     	; 0xc78 <i2c_repeatStart+0x14>
    ;  // Wait for TWINT flag set. This indicates that the
  // START condition has been transmitted
  if ((TWSR & 0xF8) == REPEAT_START)  // Check value of TWI Status Register
     c84:	81 e2       	ldi	r24, 0x21	; 33
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	88 7f       	andi	r24, 0xF8	; 248
     c92:	90 70       	andi	r25, 0x00	; 0
     c94:	80 31       	cpi	r24, 0x10	; 16
     c96:	91 05       	cpc	r25, r1
     c98:	11 f4       	brne	.+4      	; 0xc9e <i2c_repeatStart+0x3a>
    return (0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <i2c_repeatStart+0x3c>
  else
    return (1);
     c9e:	81 e0       	ldi	r24, 0x01	; 1
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <i2c_sendAddress>:
//**************************************************
// Function to transmit address of the slave
//**************************************************
unsigned char i2c_sendAddress(unsigned char address) {
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <i2c_sendAddress+0x6>
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char STATUS;

  if ((address & 0x01) == 0)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	81 70       	andi	r24, 0x01	; 1
     cba:	90 70       	andi	r25, 0x00	; 0
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <i2c_sendAddress+0x20>
    STATUS = MT_SLA_ACK;
     cc0:	88 e1       	ldi	r24, 0x18	; 24
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <i2c_sendAddress+0x24>
  else
    STATUS = MR_SLA_ACK;
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	89 83       	std	Y+1, r24	; 0x01

  TWDR = address;
     cca:	83 e2       	ldi	r24, 0x23	; 35
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	2a 81       	ldd	r18, Y+2	; 0x02
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     cd4:	86 e5       	ldi	r24, 0x56	; 86
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	24 e8       	ldi	r18, 0x84	; 132
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of address
  while (!(TWCR & (1 << TWINT)))
     cde:	00 00       	nop
     ce0:	86 e5       	ldi	r24, 0x56	; 86
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	88 23       	and	r24, r24
     cea:	d4 f7       	brge	.-12     	; 0xce0 <i2c_sendAddress+0x3a>
    ;  // Wait for TWINT flag set. This indicates that the
  // SLA+W has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) == STATUS)  // Check value of TWI Status Register
     cec:	81 e2       	ldi	r24, 0x21	; 33
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	80 81       	ld	r24, Z
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9c 01       	movw	r18, r24
     cfa:	28 7f       	andi	r18, 0xF8	; 248
     cfc:	30 70       	andi	r19, 0x00	; 0
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	28 17       	cp	r18, r24
     d06:	39 07       	cpc	r19, r25
     d08:	11 f4       	brne	.+4      	; 0xd0e <i2c_sendAddress+0x68>
    return (0);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <i2c_sendAddress+0x6a>
  else
    return (1);
     d0e:	81 e0       	ldi	r24, 0x01	; 1
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	cf 91       	pop	r28
     d16:	df 91       	pop	r29
     d18:	08 95       	ret

00000d1a <i2c_sendData>:

//**************************************************
// Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data) {
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
  TWDR = data;
     d26:	83 e2       	ldi	r24, 0x23	; 35
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	29 81       	ldd	r18, Y+1	; 0x01
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
  TWCR = (1 << TWINT) |
     d30:	86 e5       	ldi	r24, 0x56	; 86
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	24 e8       	ldi	r18, 0x84	; 132
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
         (1 << TWEN);  // Load SLA_W into TWDR Register. Clear TWINT bit
  // in TWCR to start transmission of data
  while (!(TWCR & (1 << TWINT)))
     d3a:	00 00       	nop
     d3c:	86 e5       	ldi	r24, 0x56	; 86
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	88 23       	and	r24, r24
     d46:	d4 f7       	brge	.-12     	; 0xd3c <i2c_sendData+0x22>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been transmitted, and
  // ACK/NACK has been received.
  if ((TWSR & 0xF8) != MT_DATA_ACK)  // Check value of TWI Status Register
     d48:	81 e2       	ldi	r24, 0x21	; 33
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	88 7f       	andi	r24, 0xF8	; 248
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	88 32       	cpi	r24, 0x28	; 40
     d5a:	91 05       	cpc	r25, r1
     d5c:	11 f0       	breq	.+4      	; 0xd62 <i2c_sendData+0x48>
    return (1);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	01 c0       	rjmp	.+2      	; 0xd64 <i2c_sendData+0x4a>
  else
    return (0);
     d62:	80 e0       	ldi	r24, 0x00	; 0
}
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <i2c_receiveData_ACK>:

//*****************************************************
// Function to receive a data byte and send ACKnowledge
//*****************************************************
unsigned char i2c_receiveData_ACK(void) {
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWEA) | (1 << TWINT) | (1 << TWEN);
     d76:	86 e5       	ldi	r24, 0x56	; 86
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	24 ec       	ldi	r18, 0xC4	; 196
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     d80:	00 00       	nop
     d82:	86 e5       	ldi	r24, 0x56	; 86
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	fc 01       	movw	r30, r24
     d88:	80 81       	ld	r24, Z
     d8a:	88 23       	and	r24, r24
     d8c:	d4 f7       	brge	.-12     	; 0xd82 <i2c_receiveData_ACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)  // Check value of TWI Status Register
     d8e:	81 e2       	ldi	r24, 0x21	; 33
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	88 7f       	andi	r24, 0xF8	; 248
     d9c:	90 70       	andi	r25, 0x00	; 0
     d9e:	80 35       	cpi	r24, 0x50	; 80
     da0:	91 05       	cpc	r25, r1
     da2:	11 f0       	breq	.+4      	; 0xda8 <i2c_receiveData_ACK+0x3c>
    return (ERROR_CODE);
     da4:	8e e7       	ldi	r24, 0x7E	; 126
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <i2c_receiveData_ACK+0x48>

  data = TWDR;
     da8:	83 e2       	ldi	r24, 0x23	; 35
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	80 81       	ld	r24, Z
     db0:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
}
     db4:	0f 90       	pop	r0
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <i2c_receiveData_NACK>:

//******************************************************************
// Function to receive the last data byte (no acknowledge from master
//******************************************************************
unsigned char i2c_receiveData_NACK(void) {
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
  unsigned char data;

  TWCR = (1 << TWINT) | (1 << TWEN);
     dc6:	86 e5       	ldi	r24, 0x56	; 86
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	24 e8       	ldi	r18, 0x84	; 132
     dcc:	fc 01       	movw	r30, r24
     dce:	20 83       	st	Z, r18

  while (!(TWCR & (1 << TWINT)))
     dd0:	00 00       	nop
     dd2:	86 e5       	ldi	r24, 0x56	; 86
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	88 23       	and	r24, r24
     ddc:	d4 f7       	brge	.-12     	; 0xdd2 <i2c_receiveData_NACK+0x16>
    ;  // Wait for TWINT flag set. This indicates that the
  // data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)  // Check value of TWI Status Register
     dde:	81 e2       	ldi	r24, 0x21	; 33
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	fc 01       	movw	r30, r24
     de4:	80 81       	ld	r24, Z
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	88 7f       	andi	r24, 0xF8	; 248
     dec:	90 70       	andi	r25, 0x00	; 0
     dee:	88 35       	cpi	r24, 0x58	; 88
     df0:	91 05       	cpc	r25, r1
     df2:	11 f0       	breq	.+4      	; 0xdf8 <i2c_receiveData_NACK+0x3c>
    return (ERROR_CODE);
     df4:	8e e7       	ldi	r24, 0x7E	; 126
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <i2c_receiveData_NACK+0x48>

  data = TWDR;
     df8:	83 e2       	ldi	r24, 0x23	; 35
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	fc 01       	movw	r30, r24
     dfe:	80 81       	ld	r24, Z
     e00:	89 83       	std	Y+1, r24	; 0x01
  return (data);
     e02:	89 81       	ldd	r24, Y+1	; 0x01
}
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <i2c_stop>:
//**************************************************
// Function to end the i2c communication
//*************************************************
void i2c_stop(void) {
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);  // Transmit STOP condition
     e14:	86 e5       	ldi	r24, 0x56	; 86
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	24 e9       	ldi	r18, 0x94	; 148
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <EEOpen>:
#include "24c64.h"

void EEOpen()
{
	//Set up TWI Module
	TWBR = 5;
     e24:	85 e0       	ldi	r24, 0x05	; 5
     e26:	80 b9       	out	0x00, r24	; 0
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));
     e28:	81 b1       	in	r24, 0x01	; 1
     e2a:	8c 7f       	andi	r24, 0xFC	; 252
     e2c:	81 b9       	out	0x01, r24	; 1

}
     e2e:	08 95       	ret

00000e30 <EEWriteByte>:
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e30:	54 ea       	ldi	r21, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     e32:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     e34:	34 e8       	ldi	r19, 0x84	; 132
uint8_t EEWriteByte(uint16_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e36:	56 bf       	out	0x36, r21	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     e38:	06 b6       	in	r0, 0x36	; 54
     e3a:	07 fe       	sbrs	r0, 7
     e3c:	fd cf       	rjmp	.-6      	; 0xe38 <EEWriteByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     e3e:	21 b1       	in	r18, 0x01	; 1
     e40:	28 7f       	andi	r18, 0xF8	; 248
     e42:	28 30       	cpi	r18, 0x08	; 8
     e44:	a1 f5       	brne	.+104    	; 0xeae <EEWriteByte+0x7e>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     e46:	43 b9       	out	0x03, r20	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     e48:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     e4a:	06 b6       	in	r0, 0x36	; 54
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <EEWriteByte+0x1a>
	
	}while((TWSR & 0xF8) != 0x18);
     e50:	21 b1       	in	r18, 0x01	; 1
     e52:	28 7f       	andi	r18, 0xF8	; 248
     e54:	28 31       	cpi	r18, 0x18	; 24
     e56:	79 f7       	brne	.-34     	; 0xe36 <EEWriteByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
     e58:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     e5a:	94 e8       	ldi	r25, 0x84	; 132
     e5c:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     e5e:	06 b6       	in	r0, 0x36	; 54
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <EEWriteByte+0x2e>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     e64:	91 b1       	in	r25, 0x01	; 1
     e66:	98 7f       	andi	r25, 0xF8	; 248
     e68:	98 32       	cpi	r25, 0x28	; 40
     e6a:	09 f5       	brne	.+66     	; 0xeae <EEWriteByte+0x7e>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     e6c:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     e6e:	84 e8       	ldi	r24, 0x84	; 132
     e70:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     e72:	06 b6       	in	r0, 0x36	; 54
     e74:	07 fe       	sbrs	r0, 7
     e76:	fd cf       	rjmp	.-6      	; 0xe72 <EEWriteByte+0x42>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     e78:	81 b1       	in	r24, 0x01	; 1
     e7a:	88 7f       	andi	r24, 0xF8	; 248
     e7c:	88 32       	cpi	r24, 0x28	; 40
     e7e:	b9 f4       	brne	.+46     	; 0xeae <EEWriteByte+0x7e>
		return FALSE;

	//Now write DATA
	TWDR=(data);
     e80:	63 b9       	out	0x03, r22	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     e82:	84 e8       	ldi	r24, 0x84	; 132
     e84:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     e86:	06 b6       	in	r0, 0x36	; 54
     e88:	07 fe       	sbrs	r0, 7
     e8a:	fd cf       	rjmp	.-6      	; 0xe86 <EEWriteByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     e8c:	81 b1       	in	r24, 0x01	; 1
     e8e:	88 7f       	andi	r24, 0xF8	; 248
     e90:	88 32       	cpi	r24, 0x28	; 40
     e92:	79 f4       	brne	.+30     	; 0xeb2 <EEWriteByte+0x82>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     e94:	84 e9       	ldi	r24, 0x94	; 148
     e96:	86 bf       	out	0x36, r24	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     e98:	06 b6       	in	r0, 0x36	; 54
     e9a:	04 fc       	sbrc	r0, 4
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <EEWriteByte+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e9e:	8f ed       	ldi	r24, 0xDF	; 223
     ea0:	9e e2       	ldi	r25, 0x2E	; 46
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <EEWriteByte+0x72>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <EEWriteByte+0x78>
     ea8:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
     eb4:	08 95       	ret

00000eb6 <EEReadByte>:

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     eb6:	54 ea       	ldi	r21, 0xA4	; 164
		if((TWSR & 0xF8) != 0x08)
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     eb8:	40 ea       	ldi	r20, 0xA0	; 160

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     eba:	34 e8       	ldi	r19, 0x84	; 132

	//Initiate a Dummy Write Sequence to start Random Read
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     ebc:	56 bf       	out	0x36, r21	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     ebe:	06 b6       	in	r0, 0x36	; 54
     ec0:	07 fe       	sbrs	r0, 7
     ec2:	fd cf       	rjmp	.-6      	; 0xebe <EEReadByte+0x8>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     ec4:	21 b1       	in	r18, 0x01	; 1
     ec6:	28 7f       	andi	r18, 0xF8	; 248
     ec8:	28 30       	cpi	r18, 0x08	; 8
     eca:	09 f0       	breq	.+2      	; 0xece <EEReadByte+0x18>
     ecc:	41 c0       	rjmp	.+130    	; 0xf50 <EEReadByte+0x9a>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR=0b10100000;	
     ece:	43 b9       	out	0x03, r20	; 3

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     ed0:	36 bf       	out	0x36, r19	; 54

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     ed2:	06 b6       	in	r0, 0x36	; 54
     ed4:	07 fe       	sbrs	r0, 7
     ed6:	fd cf       	rjmp	.-6      	; 0xed2 <EEReadByte+0x1c>
	
	}while((TWSR & 0xF8) != 0x18);
     ed8:	21 b1       	in	r18, 0x01	; 1
     eda:	28 7f       	andi	r18, 0xF8	; 248
     edc:	28 31       	cpi	r18, 0x18	; 24
     ede:	71 f7       	brne	.-36     	; 0xebc <EEReadByte+0x6>
		

	//Now write ADDRH
	TWDR=(address>>8);
     ee0:	93 b9       	out	0x03, r25	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     ee2:	94 e8       	ldi	r25, 0x84	; 132
     ee4:	96 bf       	out	0x36, r25	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     ee6:	06 b6       	in	r0, 0x36	; 54
     ee8:	07 fe       	sbrs	r0, 7
     eea:	fd cf       	rjmp	.-6      	; 0xee6 <EEReadByte+0x30>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     eec:	91 b1       	in	r25, 0x01	; 1
     eee:	98 7f       	andi	r25, 0xF8	; 248
     ef0:	98 32       	cpi	r25, 0x28	; 40
     ef2:	71 f5       	brne	.+92     	; 0xf50 <EEReadByte+0x9a>
		return FALSE;

	//Now write ADDRL
	TWDR=(address);
     ef4:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     ef6:	84 e8       	ldi	r24, 0x84	; 132
     ef8:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     efa:	06 b6       	in	r0, 0x36	; 54
     efc:	07 fe       	sbrs	r0, 7
     efe:	fd cf       	rjmp	.-6      	; 0xefa <EEReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     f00:	81 b1       	in	r24, 0x01	; 1
     f02:	88 7f       	andi	r24, 0xF8	; 248
     f04:	88 32       	cpi	r24, 0x28	; 40
     f06:	21 f5       	brne	.+72     	; 0xf50 <EEReadByte+0x9a>
	//*************************DUMMY WRITE SEQUENCE END **********************


	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f08:	84 ea       	ldi	r24, 0xA4	; 164
     f0a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     f0c:	06 b6       	in	r0, 0x36	; 54
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <EEReadByte+0x56>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     f12:	81 b1       	in	r24, 0x01	; 1
     f14:	88 7f       	andi	r24, 0xF8	; 248
     f16:	80 31       	cpi	r24, 0x10	; 16
     f18:	d9 f4       	brne	.+54     	; 0xf50 <EEReadByte+0x9a>
		return FALSE;

	//Now write SLA+R
	//EEPROM @ 00h
	TWDR=0b10100001;	
     f1a:	81 ea       	ldi	r24, 0xA1	; 161
     f1c:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     f1e:	84 e8       	ldi	r24, 0x84	; 132
     f20:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     f22:	06 b6       	in	r0, 0x36	; 54
     f24:	07 fe       	sbrs	r0, 7
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <EEReadByte+0x6c>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     f28:	81 b1       	in	r24, 0x01	; 1
     f2a:	88 7f       	andi	r24, 0xF8	; 248
     f2c:	80 34       	cpi	r24, 0x40	; 64
     f2e:	81 f4       	brne	.+32     	; 0xf50 <EEReadByte+0x9a>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	86 bf       	out	0x36, r24	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     f34:	06 b6       	in	r0, 0x36	; 54
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <EEReadByte+0x7e>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     f3a:	81 b1       	in	r24, 0x01	; 1
     f3c:	88 7f       	andi	r24, 0xF8	; 248
     f3e:	88 35       	cpi	r24, 0x58	; 88
     f40:	49 f4       	brne	.+18     	; 0xf54 <EEReadByte+0x9e>
		return FALSE;

	//Read the data
	data=TWDR;
     f42:	83 b1       	in	r24, 0x03	; 3

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     f44:	94 e9       	ldi	r25, 0x94	; 148
     f46:	96 bf       	out	0x36, r25	; 54
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     f48:	06 b6       	in	r0, 0x36	; 54
     f4a:	04 fc       	sbrc	r0, 4
     f4c:	fd cf       	rjmp	.-6      	; 0xf48 <EEReadByte+0x92>
     f4e:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     f54:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     f56:	08 95       	ret

00000f58 <USART_init>:
#include "uart.h"
#include <avr/io.h>

void USART_init(unsigned int ubrr) {
    //Настройка скорости
    UBRRH = (unsigned char)(ubrr >> 8);
     f58:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char)ubrr;
     f5a:	89 b9       	out	0x09, r24	; 9
    // 8 бит данных, 1 стоповый бит, без контроля четности
    UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     f5c:	86 e8       	ldi	r24, 0x86	; 134
     f5e:	80 bd       	out	0x20, r24	; 32
    UCSRB = (1 << TXEN);
     f60:	88 e0       	ldi	r24, 0x08	; 8
     f62:	8a b9       	out	0x0a, r24	; 10
}
     f64:	08 95       	ret

00000f66 <USART_transmit>:

void USART_transmit(char data) {
    while (!(UCSRA & (1 << UDRE))); //Ждём опустошения буффера
     f66:	5d 9b       	sbis	0x0b, 5	; 11
     f68:	fe cf       	rjmp	.-4      	; 0xf66 <USART_transmit>
    UDR = data;
     f6a:	8c b9       	out	0x0c, r24	; 12
}
     f6c:	08 95       	ret

00000f6e <UART_print>:

void UART_print(char* str) {
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	e8 2e       	mov	r14, r24
     f78:	e7 01       	movw	r28, r14
     f7a:	7e 01       	movw	r14, r28
     f7c:	f9 2e       	mov	r15, r25
     f7e:	e7 01       	movw	r28, r14
    int i = 0;
    while (str[i] != 0x00) {
     f80:	01 c0       	rjmp	.+2      	; 0xf84 <UART_print+0x16>
        USART_transmit(str[i++]);
     f82:	f1 df       	rcall	.-30     	; 0xf66 <USART_transmit>
    UDR = data;
}

void UART_print(char* str) {
    int i = 0;
    while (str[i] != 0x00) {
     f84:	89 91       	ld	r24, Y+
     f86:	88 23       	and	r24, r24
     f88:	e1 f7       	brne	.-8      	; 0xf82 <UART_print+0x14>
        USART_transmit(str[i++]);
    }
}
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <UART_println>:

void UART_println(char* str) {
    UART_print(str);
     f94:	ec df       	rcall	.-40     	; 0xf6e <UART_print>
    UART_print("\r\n");
     f96:	86 eb       	ldi	r24, 0xB6	; 182
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	e9 df       	rcall	.-46     	; 0xf6e <UART_print>
}
     f9c:	08 95       	ret

00000f9e <__fixunssfsi>:
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	7b 01       	movw	r14, r22
     fa8:	8c 01       	movw	r16, r24
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	5f e4       	ldi	r21, 0x4F	; 79
     fb2:	d7 d2       	rcall	.+1454   	; 0x1562 <__gesf2>
     fb4:	87 fd       	sbrc	r24, 7
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <__fixunssfsi+0x38>
     fb8:	c8 01       	movw	r24, r16
     fba:	b7 01       	movw	r22, r14
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	5f e4       	ldi	r21, 0x4F	; 79
     fc4:	83 d1       	rcall	.+774    	; 0x12cc <__subsf3>
     fc6:	23 d3       	rcall	.+1606   	; 0x160e <__fixsfsi>
     fc8:	9b 01       	movw	r18, r22
     fca:	ac 01       	movw	r20, r24
     fcc:	20 50       	subi	r18, 0x00	; 0
     fce:	30 40       	sbci	r19, 0x00	; 0
     fd0:	40 40       	sbci	r20, 0x00	; 0
     fd2:	50 48       	sbci	r21, 0x80	; 128
     fd4:	05 c0       	rjmp	.+10     	; 0xfe0 <__fixunssfsi+0x42>
     fd6:	c8 01       	movw	r24, r16
     fd8:	b7 01       	movw	r22, r14
     fda:	19 d3       	rcall	.+1586   	; 0x160e <__fixsfsi>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	b9 01       	movw	r22, r18
     fe2:	ca 01       	movw	r24, r20
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <_fpadd_parts>:
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ec ef       	ldi	r30, 0xFC	; 252
     ff4:	f7 e0       	ldi	r31, 0x07	; 7
     ff6:	ed c4       	rjmp	.+2522   	; 0x19d2 <__prologue_saves__+0x8>
     ff8:	fc 01       	movw	r30, r24
     ffa:	ea 01       	movw	r28, r20
     ffc:	80 81       	ld	r24, Z
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	08 f4       	brcc	.+2      	; 0x1004 <_fpadd_parts+0x16>
    1002:	38 c1       	rjmp	.+624    	; 0x1274 <_fpadd_parts+0x286>
    1004:	db 01       	movw	r26, r22
    1006:	9c 91       	ld	r25, X
    1008:	92 30       	cpi	r25, 0x02	; 2
    100a:	08 f4       	brcc	.+2      	; 0x100e <_fpadd_parts+0x20>
    100c:	30 c1       	rjmp	.+608    	; 0x126e <_fpadd_parts+0x280>
    100e:	84 30       	cpi	r24, 0x04	; 4
    1010:	59 f4       	brne	.+22     	; 0x1028 <_fpadd_parts+0x3a>
    1012:	94 30       	cpi	r25, 0x04	; 4
    1014:	09 f0       	breq	.+2      	; 0x1018 <_fpadd_parts+0x2a>
    1016:	2e c1       	rjmp	.+604    	; 0x1274 <_fpadd_parts+0x286>
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	8c 91       	ld	r24, X
    101e:	11 97       	sbiw	r26, 0x01	; 1
    1020:	98 17       	cp	r25, r24
    1022:	09 f0       	breq	.+2      	; 0x1026 <_fpadd_parts+0x38>
    1024:	21 c1       	rjmp	.+578    	; 0x1268 <_fpadd_parts+0x27a>
    1026:	26 c1       	rjmp	.+588    	; 0x1274 <_fpadd_parts+0x286>
    1028:	94 30       	cpi	r25, 0x04	; 4
    102a:	09 f4       	brne	.+2      	; 0x102e <_fpadd_parts+0x40>
    102c:	20 c1       	rjmp	.+576    	; 0x126e <_fpadd_parts+0x280>
    102e:	92 30       	cpi	r25, 0x02	; 2
    1030:	b1 f4       	brne	.+44     	; 0x105e <_fpadd_parts+0x70>
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	09 f0       	breq	.+2      	; 0x1038 <_fpadd_parts+0x4a>
    1036:	1e c1       	rjmp	.+572    	; 0x1274 <_fpadd_parts+0x286>
    1038:	ca 01       	movw	r24, r20
    103a:	af 01       	movw	r20, r30
    103c:	28 e0       	ldi	r18, 0x08	; 8
    103e:	da 01       	movw	r26, r20
    1040:	0d 90       	ld	r0, X+
    1042:	ad 01       	movw	r20, r26
    1044:	dc 01       	movw	r26, r24
    1046:	0d 92       	st	X+, r0
    1048:	cd 01       	movw	r24, r26
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	c1 f7       	brne	.-16     	; 0x103e <_fpadd_parts+0x50>
    104e:	db 01       	movw	r26, r22
    1050:	11 96       	adiw	r26, 0x01	; 1
    1052:	8c 91       	ld	r24, X
    1054:	11 97       	sbiw	r26, 0x01	; 1
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	89 23       	and	r24, r25
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	0a c1       	rjmp	.+532    	; 0x1272 <_fpadd_parts+0x284>
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	09 f4       	brne	.+2      	; 0x1064 <_fpadd_parts+0x76>
    1062:	05 c1       	rjmp	.+522    	; 0x126e <_fpadd_parts+0x280>
    1064:	c2 80       	ldd	r12, Z+2	; 0x02
    1066:	d3 80       	ldd	r13, Z+3	; 0x03
    1068:	db 01       	movw	r26, r22
    106a:	12 96       	adiw	r26, 0x02	; 2
    106c:	6d 90       	ld	r6, X+
    106e:	7c 90       	ld	r7, X
    1070:	13 97       	sbiw	r26, 0x03	; 3
    1072:	24 81       	ldd	r18, Z+4	; 0x04
    1074:	35 81       	ldd	r19, Z+5	; 0x05
    1076:	46 81       	ldd	r20, Z+6	; 0x06
    1078:	57 81       	ldd	r21, Z+7	; 0x07
    107a:	14 96       	adiw	r26, 0x04	; 4
    107c:	ed 90       	ld	r14, X+
    107e:	fd 90       	ld	r15, X+
    1080:	0d 91       	ld	r16, X+
    1082:	1c 91       	ld	r17, X
    1084:	17 97       	sbiw	r26, 0x07	; 7
    1086:	c6 01       	movw	r24, r12
    1088:	86 19       	sub	r24, r6
    108a:	97 09       	sbc	r25, r7
    108c:	5c 01       	movw	r10, r24
    108e:	97 ff       	sbrs	r25, 7
    1090:	04 c0       	rjmp	.+8      	; 0x109a <_fpadd_parts+0xac>
    1092:	aa 24       	eor	r10, r10
    1094:	bb 24       	eor	r11, r11
    1096:	a8 1a       	sub	r10, r24
    1098:	b9 0a       	sbc	r11, r25
    109a:	b0 e2       	ldi	r27, 0x20	; 32
    109c:	ab 16       	cp	r10, r27
    109e:	b1 04       	cpc	r11, r1
    10a0:	0c f0       	brlt	.+2      	; 0x10a4 <_fpadd_parts+0xb6>
    10a2:	61 c0       	rjmp	.+194    	; 0x1166 <_fpadd_parts+0x178>
    10a4:	18 16       	cp	r1, r24
    10a6:	19 06       	cpc	r1, r25
    10a8:	6c f5       	brge	.+90     	; 0x1104 <_fpadd_parts+0x116>
    10aa:	37 01       	movw	r6, r14
    10ac:	48 01       	movw	r8, r16
    10ae:	0a 2c       	mov	r0, r10
    10b0:	04 c0       	rjmp	.+8      	; 0x10ba <_fpadd_parts+0xcc>
    10b2:	96 94       	lsr	r9
    10b4:	87 94       	ror	r8
    10b6:	77 94       	ror	r7
    10b8:	67 94       	ror	r6
    10ba:	0a 94       	dec	r0
    10bc:	d2 f7       	brpl	.-12     	; 0x10b2 <_fpadd_parts+0xc4>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	0a 2c       	mov	r0, r10
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <_fpadd_parts+0xe4>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	aa 1f       	adc	r26, r26
    10d0:	bb 1f       	adc	r27, r27
    10d2:	0a 94       	dec	r0
    10d4:	d2 f7       	brpl	.-12     	; 0x10ca <_fpadd_parts+0xdc>
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	a1 09       	sbc	r26, r1
    10da:	b1 09       	sbc	r27, r1
    10dc:	8e 21       	and	r24, r14
    10de:	9f 21       	and	r25, r15
    10e0:	a0 23       	and	r26, r16
    10e2:	b1 23       	and	r27, r17
    10e4:	ee 24       	eor	r14, r14
    10e6:	ff 24       	eor	r15, r15
    10e8:	87 01       	movw	r16, r14
    10ea:	e3 94       	inc	r14
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	a1 05       	cpc	r26, r1
    10f0:	b1 05       	cpc	r27, r1
    10f2:	19 f4       	brne	.+6      	; 0x10fa <_fpadd_parts+0x10c>
    10f4:	ee 24       	eor	r14, r14
    10f6:	ff 24       	eor	r15, r15
    10f8:	87 01       	movw	r16, r14
    10fa:	e6 28       	or	r14, r6
    10fc:	f7 28       	or	r15, r7
    10fe:	08 29       	or	r16, r8
    1100:	19 29       	or	r17, r9
    1102:	3c c0       	rjmp	.+120    	; 0x117c <_fpadd_parts+0x18e>
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	d1 f1       	breq	.+116    	; 0x117c <_fpadd_parts+0x18e>
    1108:	ca 0c       	add	r12, r10
    110a:	db 1c       	adc	r13, r11
    110c:	39 01       	movw	r6, r18
    110e:	4a 01       	movw	r8, r20
    1110:	0a 2c       	mov	r0, r10
    1112:	04 c0       	rjmp	.+8      	; 0x111c <_fpadd_parts+0x12e>
    1114:	96 94       	lsr	r9
    1116:	87 94       	ror	r8
    1118:	77 94       	ror	r7
    111a:	67 94       	ror	r6
    111c:	0a 94       	dec	r0
    111e:	d2 f7       	brpl	.-12     	; 0x1114 <_fpadd_parts+0x126>
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	0a 2c       	mov	r0, r10
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <_fpadd_parts+0x146>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	0a 94       	dec	r0
    1136:	d2 f7       	brpl	.-12     	; 0x112c <_fpadd_parts+0x13e>
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	a1 09       	sbc	r26, r1
    113c:	b1 09       	sbc	r27, r1
    113e:	82 23       	and	r24, r18
    1140:	93 23       	and	r25, r19
    1142:	a4 23       	and	r26, r20
    1144:	b5 23       	and	r27, r21
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	a1 05       	cpc	r26, r1
    1152:	b1 05       	cpc	r27, r1
    1154:	19 f4       	brne	.+6      	; 0x115c <_fpadd_parts+0x16e>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	26 29       	or	r18, r6
    115e:	37 29       	or	r19, r7
    1160:	48 29       	or	r20, r8
    1162:	59 29       	or	r21, r9
    1164:	0b c0       	rjmp	.+22     	; 0x117c <_fpadd_parts+0x18e>
    1166:	6c 14       	cp	r6, r12
    1168:	7d 04       	cpc	r7, r13
    116a:	24 f4       	brge	.+8      	; 0x1174 <_fpadd_parts+0x186>
    116c:	ee 24       	eor	r14, r14
    116e:	ff 24       	eor	r15, r15
    1170:	87 01       	movw	r16, r14
    1172:	04 c0       	rjmp	.+8      	; 0x117c <_fpadd_parts+0x18e>
    1174:	63 01       	movw	r12, r6
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	81 81       	ldd	r24, Z+1	; 0x01
    117e:	fb 01       	movw	r30, r22
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	89 17       	cp	r24, r25
    1184:	09 f4       	brne	.+2      	; 0x1188 <_fpadd_parts+0x19a>
    1186:	45 c0       	rjmp	.+138    	; 0x1212 <_fpadd_parts+0x224>
    1188:	88 23       	and	r24, r24
    118a:	49 f0       	breq	.+18     	; 0x119e <_fpadd_parts+0x1b0>
    118c:	d8 01       	movw	r26, r16
    118e:	c7 01       	movw	r24, r14
    1190:	82 1b       	sub	r24, r18
    1192:	93 0b       	sbc	r25, r19
    1194:	a4 0b       	sbc	r26, r20
    1196:	b5 0b       	sbc	r27, r21
    1198:	9c 01       	movw	r18, r24
    119a:	ad 01       	movw	r20, r26
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <_fpadd_parts+0x1b8>
    119e:	2e 19       	sub	r18, r14
    11a0:	3f 09       	sbc	r19, r15
    11a2:	40 0b       	sbc	r20, r16
    11a4:	51 0b       	sbc	r21, r17
    11a6:	57 fd       	sbrc	r21, 7
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <_fpadd_parts+0x1c4>
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	db 82       	std	Y+3, r13	; 0x03
    11ae:	ca 82       	std	Y+2, r12	; 0x02
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <_fpadd_parts+0x1da>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	db 82       	std	Y+3, r13	; 0x03
    11b8:	ca 82       	std	Y+2, r12	; 0x02
    11ba:	50 95       	com	r21
    11bc:	40 95       	com	r20
    11be:	30 95       	com	r19
    11c0:	21 95       	neg	r18
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	4f 4f       	sbci	r20, 0xFF	; 255
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	2c 83       	std	Y+4, r18	; 0x04
    11ca:	3d 83       	std	Y+5, r19	; 0x05
    11cc:	4e 83       	std	Y+6, r20	; 0x06
    11ce:	5f 83       	std	Y+7, r21	; 0x07
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <_fpadd_parts+0x1fe>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	aa 1f       	adc	r26, r26
    11d8:	bb 1f       	adc	r27, r27
    11da:	8c 83       	std	Y+4, r24	; 0x04
    11dc:	9d 83       	std	Y+5, r25	; 0x05
    11de:	ae 83       	std	Y+6, r26	; 0x06
    11e0:	bf 83       	std	Y+7, r27	; 0x07
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	8c 81       	ldd	r24, Y+4	; 0x04
    11ee:	9d 81       	ldd	r25, Y+5	; 0x05
    11f0:	ae 81       	ldd	r26, Y+6	; 0x06
    11f2:	bf 81       	ldd	r27, Y+7	; 0x07
    11f4:	9c 01       	movw	r18, r24
    11f6:	ad 01       	movw	r20, r26
    11f8:	21 50       	subi	r18, 0x01	; 1
    11fa:	30 40       	sbci	r19, 0x00	; 0
    11fc:	40 40       	sbci	r20, 0x00	; 0
    11fe:	50 40       	sbci	r21, 0x00	; 0
    1200:	2f 3f       	cpi	r18, 0xFF	; 255
    1202:	ef ef       	ldi	r30, 0xFF	; 255
    1204:	3e 07       	cpc	r19, r30
    1206:	ef ef       	ldi	r30, 0xFF	; 255
    1208:	4e 07       	cpc	r20, r30
    120a:	ef e3       	ldi	r30, 0x3F	; 63
    120c:	5e 07       	cpc	r21, r30
    120e:	08 f3       	brcs	.-62     	; 0x11d2 <_fpadd_parts+0x1e4>
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <_fpadd_parts+0x23a>
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	db 82       	std	Y+3, r13	; 0x03
    1216:	ca 82       	std	Y+2, r12	; 0x02
    1218:	2e 0d       	add	r18, r14
    121a:	3f 1d       	adc	r19, r15
    121c:	40 1f       	adc	r20, r16
    121e:	51 1f       	adc	r21, r17
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	3d 83       	std	Y+5, r19	; 0x05
    1224:	4e 83       	std	Y+6, r20	; 0x06
    1226:	5f 83       	std	Y+7, r21	; 0x07
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	88 83       	st	Y, r24
    122c:	2c 81       	ldd	r18, Y+4	; 0x04
    122e:	3d 81       	ldd	r19, Y+5	; 0x05
    1230:	4e 81       	ldd	r20, Y+6	; 0x06
    1232:	5f 81       	ldd	r21, Y+7	; 0x07
    1234:	57 ff       	sbrs	r21, 7
    1236:	1d c0       	rjmp	.+58     	; 0x1272 <_fpadd_parts+0x284>
    1238:	da 01       	movw	r26, r20
    123a:	c9 01       	movw	r24, r18
    123c:	81 70       	andi	r24, 0x01	; 1
    123e:	90 70       	andi	r25, 0x00	; 0
    1240:	a0 70       	andi	r26, 0x00	; 0
    1242:	b0 70       	andi	r27, 0x00	; 0
    1244:	56 95       	lsr	r21
    1246:	47 95       	ror	r20
    1248:	37 95       	ror	r19
    124a:	27 95       	ror	r18
    124c:	82 2b       	or	r24, r18
    124e:	93 2b       	or	r25, r19
    1250:	a4 2b       	or	r26, r20
    1252:	b5 2b       	or	r27, r21
    1254:	8c 83       	std	Y+4, r24	; 0x04
    1256:	9d 83       	std	Y+5, r25	; 0x05
    1258:	ae 83       	std	Y+6, r26	; 0x06
    125a:	bf 83       	std	Y+7, r27	; 0x07
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	9b 81       	ldd	r25, Y+3	; 0x03
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <_fpadd_parts+0x284>
    1268:	e9 eb       	ldi	r30, 0xB9	; 185
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <_fpadd_parts+0x286>
    126e:	fb 01       	movw	r30, r22
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <_fpadd_parts+0x286>
    1272:	fe 01       	movw	r30, r28
    1274:	cf 01       	movw	r24, r30
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	ee e0       	ldi	r30, 0x0E	; 14
    127c:	c6 c3       	rjmp	.+1932   	; 0x1a0a <__epilogue_restores__+0x8>

0000127e <__addsf3>:
    127e:	a0 e2       	ldi	r26, 0x20	; 32
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e4 e4       	ldi	r30, 0x44	; 68
    1284:	f9 e0       	ldi	r31, 0x09	; 9
    1286:	ad c3       	rjmp	.+1882   	; 0x19e2 <__prologue_saves__+0x18>
    1288:	69 83       	std	Y+1, r22	; 0x01
    128a:	7a 83       	std	Y+2, r23	; 0x02
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	2d 83       	std	Y+5, r18	; 0x05
    1292:	3e 83       	std	Y+6, r19	; 0x06
    1294:	4f 83       	std	Y+7, r20	; 0x07
    1296:	58 87       	std	Y+8, r21	; 0x08
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	e8 2e       	mov	r14, r24
    129c:	f1 2c       	mov	r15, r1
    129e:	ec 0e       	add	r14, r28
    12a0:	fd 1e       	adc	r15, r29
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	b7 01       	movw	r22, r14
    12a8:	ce d2       	rcall	.+1436   	; 0x1846 <__unpack_f>
    12aa:	8e 01       	movw	r16, r28
    12ac:	0f 5e       	subi	r16, 0xEF	; 239
    12ae:	1f 4f       	sbci	r17, 0xFF	; 255
    12b0:	ce 01       	movw	r24, r28
    12b2:	05 96       	adiw	r24, 0x05	; 5
    12b4:	b8 01       	movw	r22, r16
    12b6:	c7 d2       	rcall	.+1422   	; 0x1846 <__unpack_f>
    12b8:	c7 01       	movw	r24, r14
    12ba:	b8 01       	movw	r22, r16
    12bc:	ae 01       	movw	r20, r28
    12be:	47 5e       	subi	r20, 0xE7	; 231
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	95 de       	rcall	.-726    	; 0xfee <_fpadd_parts>
    12c4:	f3 d1       	rcall	.+998    	; 0x16ac <__pack_f>
    12c6:	a0 96       	adiw	r28, 0x20	; 32
    12c8:	e6 e0       	ldi	r30, 0x06	; 6
    12ca:	a7 c3       	rjmp	.+1870   	; 0x1a1a <__epilogue_restores__+0x18>

000012cc <__subsf3>:
    12cc:	a0 e2       	ldi	r26, 0x20	; 32
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e6       	ldi	r30, 0x6B	; 107
    12d2:	f9 e0       	ldi	r31, 0x09	; 9
    12d4:	86 c3       	rjmp	.+1804   	; 0x19e2 <__prologue_saves__+0x18>
    12d6:	69 83       	std	Y+1, r22	; 0x01
    12d8:	7a 83       	std	Y+2, r23	; 0x02
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	2d 83       	std	Y+5, r18	; 0x05
    12e0:	3e 83       	std	Y+6, r19	; 0x06
    12e2:	4f 83       	std	Y+7, r20	; 0x07
    12e4:	58 87       	std	Y+8, r21	; 0x08
    12e6:	8e 01       	movw	r16, r28
    12e8:	07 5f       	subi	r16, 0xF7	; 247
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	b8 01       	movw	r22, r16
    12f2:	a9 d2       	rcall	.+1362   	; 0x1846 <__unpack_f>
    12f4:	91 e1       	ldi	r25, 0x11	; 17
    12f6:	e9 2e       	mov	r14, r25
    12f8:	f1 2c       	mov	r15, r1
    12fa:	ec 0e       	add	r14, r28
    12fc:	fd 1e       	adc	r15, r29
    12fe:	ce 01       	movw	r24, r28
    1300:	05 96       	adiw	r24, 0x05	; 5
    1302:	b7 01       	movw	r22, r14
    1304:	a0 d2       	rcall	.+1344   	; 0x1846 <__unpack_f>
    1306:	8a 89       	ldd	r24, Y+18	; 0x12
    1308:	91 e0       	ldi	r25, 0x01	; 1
    130a:	89 27       	eor	r24, r25
    130c:	8a 8b       	std	Y+18, r24	; 0x12
    130e:	c8 01       	movw	r24, r16
    1310:	b7 01       	movw	r22, r14
    1312:	ae 01       	movw	r20, r28
    1314:	47 5e       	subi	r20, 0xE7	; 231
    1316:	5f 4f       	sbci	r21, 0xFF	; 255
    1318:	6a de       	rcall	.-812    	; 0xfee <_fpadd_parts>
    131a:	c8 d1       	rcall	.+912    	; 0x16ac <__pack_f>
    131c:	a0 96       	adiw	r28, 0x20	; 32
    131e:	e6 e0       	ldi	r30, 0x06	; 6
    1320:	7c c3       	rjmp	.+1784   	; 0x1a1a <__epilogue_restores__+0x18>

00001322 <__mulsf3>:
    1322:	a0 e2       	ldi	r26, 0x20	; 32
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e6 e9       	ldi	r30, 0x96	; 150
    1328:	f9 e0       	ldi	r31, 0x09	; 9
    132a:	4f c3       	rjmp	.+1694   	; 0x19ca <__prologue_saves__>
    132c:	69 83       	std	Y+1, r22	; 0x01
    132e:	7a 83       	std	Y+2, r23	; 0x02
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	2d 83       	std	Y+5, r18	; 0x05
    1336:	3e 83       	std	Y+6, r19	; 0x06
    1338:	4f 83       	std	Y+7, r20	; 0x07
    133a:	58 87       	std	Y+8, r21	; 0x08
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	be 01       	movw	r22, r28
    1342:	67 5f       	subi	r22, 0xF7	; 247
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	7f d2       	rcall	.+1278   	; 0x1846 <__unpack_f>
    1348:	ce 01       	movw	r24, r28
    134a:	05 96       	adiw	r24, 0x05	; 5
    134c:	be 01       	movw	r22, r28
    134e:	6f 5e       	subi	r22, 0xEF	; 239
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	79 d2       	rcall	.+1266   	; 0x1846 <__unpack_f>
    1354:	99 85       	ldd	r25, Y+9	; 0x09
    1356:	92 30       	cpi	r25, 0x02	; 2
    1358:	78 f0       	brcs	.+30     	; 0x1378 <__mulsf3+0x56>
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	c0 f0       	brcs	.+48     	; 0x1390 <__mulsf3+0x6e>
    1360:	94 30       	cpi	r25, 0x04	; 4
    1362:	19 f4       	brne	.+6      	; 0x136a <__mulsf3+0x48>
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	41 f4       	brne	.+16     	; 0x1378 <__mulsf3+0x56>
    1368:	cb c0       	rjmp	.+406    	; 0x1500 <__mulsf3+0x1de>
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	19 f4       	brne	.+6      	; 0x1374 <__mulsf3+0x52>
    136e:	92 30       	cpi	r25, 0x02	; 2
    1370:	79 f4       	brne	.+30     	; 0x1390 <__mulsf3+0x6e>
    1372:	c6 c0       	rjmp	.+396    	; 0x1500 <__mulsf3+0x1de>
    1374:	92 30       	cpi	r25, 0x02	; 2
    1376:	51 f4       	brne	.+20     	; 0x138c <__mulsf3+0x6a>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	2a 85       	ldd	r18, Y+10	; 0x0a
    137c:	9a 89       	ldd	r25, Y+18	; 0x12
    137e:	29 17       	cp	r18, r25
    1380:	09 f4       	brne	.+2      	; 0x1384 <__mulsf3+0x62>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	8a 87       	std	Y+10, r24	; 0x0a
    1386:	ce 01       	movw	r24, r28
    1388:	09 96       	adiw	r24, 0x09	; 9
    138a:	bc c0       	rjmp	.+376    	; 0x1504 <__mulsf3+0x1e2>
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	51 f4       	brne	.+20     	; 0x13a4 <__mulsf3+0x82>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	2a 85       	ldd	r18, Y+10	; 0x0a
    1394:	9a 89       	ldd	r25, Y+18	; 0x12
    1396:	29 17       	cp	r18, r25
    1398:	09 f4       	brne	.+2      	; 0x139c <__mulsf3+0x7a>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	8a 8b       	std	Y+18, r24	; 0x12
    139e:	ce 01       	movw	r24, r28
    13a0:	41 96       	adiw	r24, 0x11	; 17
    13a2:	b0 c0       	rjmp	.+352    	; 0x1504 <__mulsf3+0x1e2>
    13a4:	6d 84       	ldd	r6, Y+13	; 0x0d
    13a6:	7e 84       	ldd	r7, Y+14	; 0x0e
    13a8:	8f 84       	ldd	r8, Y+15	; 0x0f
    13aa:	98 88       	ldd	r9, Y+16	; 0x10
    13ac:	ed 88       	ldd	r14, Y+21	; 0x15
    13ae:	fe 88       	ldd	r15, Y+22	; 0x16
    13b0:	0f 89       	ldd	r16, Y+23	; 0x17
    13b2:	18 8d       	ldd	r17, Y+24	; 0x18
    13b4:	e0 e2       	ldi	r30, 0x20	; 32
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	dc 01       	movw	r26, r24
    13be:	aa 24       	eor	r10, r10
    13c0:	bb 24       	eor	r11, r11
    13c2:	65 01       	movw	r12, r10
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	b3 01       	movw	r22, r6
    13cc:	61 70       	andi	r22, 0x01	; 1
    13ce:	70 70       	andi	r23, 0x00	; 0
    13d0:	61 15       	cp	r22, r1
    13d2:	71 05       	cpc	r23, r1
    13d4:	d1 f0       	breq	.+52     	; 0x140a <__mulsf3+0xe8>
    13d6:	2e 0d       	add	r18, r14
    13d8:	3f 1d       	adc	r19, r15
    13da:	40 1f       	adc	r20, r16
    13dc:	51 1f       	adc	r21, r17
    13de:	15 01       	movw	r2, r10
    13e0:	26 01       	movw	r4, r12
    13e2:	28 0e       	add	r2, r24
    13e4:	39 1e       	adc	r3, r25
    13e6:	4a 1e       	adc	r4, r26
    13e8:	5b 1e       	adc	r5, r27
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a0 e0       	ldi	r26, 0x00	; 0
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	2e 15       	cp	r18, r14
    13f4:	3f 05       	cpc	r19, r15
    13f6:	40 07       	cpc	r20, r16
    13f8:	51 07       	cpc	r21, r17
    13fa:	18 f0       	brcs	.+6      	; 0x1402 <__mulsf3+0xe0>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	dc 01       	movw	r26, r24
    1402:	82 0d       	add	r24, r2
    1404:	93 1d       	adc	r25, r3
    1406:	a4 1d       	adc	r26, r4
    1408:	b5 1d       	adc	r27, r5
    140a:	aa 0c       	add	r10, r10
    140c:	bb 1c       	adc	r11, r11
    140e:	cc 1c       	adc	r12, r12
    1410:	dd 1c       	adc	r13, r13
    1412:	17 ff       	sbrs	r17, 7
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <__mulsf3+0x106>
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	26 2e       	mov	r2, r22
    141a:	31 2c       	mov	r3, r1
    141c:	41 2c       	mov	r4, r1
    141e:	51 2c       	mov	r5, r1
    1420:	a2 28       	or	r10, r2
    1422:	b3 28       	or	r11, r3
    1424:	c4 28       	or	r12, r4
    1426:	d5 28       	or	r13, r5
    1428:	31 97       	sbiw	r30, 0x01	; 1
    142a:	49 f0       	breq	.+18     	; 0x143e <__mulsf3+0x11c>
    142c:	ee 0c       	add	r14, r14
    142e:	ff 1c       	adc	r15, r15
    1430:	00 1f       	adc	r16, r16
    1432:	11 1f       	adc	r17, r17
    1434:	96 94       	lsr	r9
    1436:	87 94       	ror	r8
    1438:	77 94       	ror	r7
    143a:	67 94       	ror	r6
    143c:	c6 cf       	rjmp	.-116    	; 0x13ca <__mulsf3+0xa8>
    143e:	6b 89       	ldd	r22, Y+19	; 0x13
    1440:	7c 89       	ldd	r23, Y+20	; 0x14
    1442:	eb 85       	ldd	r30, Y+11	; 0x0b
    1444:	fc 85       	ldd	r31, Y+12	; 0x0c
    1446:	6e 0f       	add	r22, r30
    1448:	7f 1f       	adc	r23, r31
    144a:	6e 5f       	subi	r22, 0xFE	; 254
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	7c 8f       	std	Y+28, r23	; 0x1c
    1450:	6b 8f       	std	Y+27, r22	; 0x1b
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	ea 85       	ldd	r30, Y+10	; 0x0a
    1456:	7a 89       	ldd	r23, Y+18	; 0x12
    1458:	e7 17       	cp	r30, r23
    145a:	09 f4       	brne	.+2      	; 0x145e <__mulsf3+0x13c>
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	6a 8f       	std	Y+26, r22	; 0x1a
    1460:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1462:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <__mulsf3+0x164>
    1466:	fc 01       	movw	r30, r24
    1468:	e1 70       	andi	r30, 0x01	; 1
    146a:	f0 70       	andi	r31, 0x00	; 0
    146c:	30 97       	sbiw	r30, 0x00	; 0
    146e:	29 f0       	breq	.+10     	; 0x147a <__mulsf3+0x158>
    1470:	56 95       	lsr	r21
    1472:	47 95       	ror	r20
    1474:	37 95       	ror	r19
    1476:	27 95       	ror	r18
    1478:	50 68       	ori	r21, 0x80	; 128
    147a:	b6 95       	lsr	r27
    147c:	a7 95       	ror	r26
    147e:	97 95       	ror	r25
    1480:	87 95       	ror	r24
    1482:	6f 5f       	subi	r22, 0xFF	; 255
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	b7 fd       	sbrc	r27, 7
    1488:	ee cf       	rjmp	.-36     	; 0x1466 <__mulsf3+0x144>
    148a:	0c c0       	rjmp	.+24     	; 0x14a4 <__mulsf3+0x182>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	aa 1f       	adc	r26, r26
    1492:	bb 1f       	adc	r27, r27
    1494:	57 fd       	sbrc	r21, 7
    1496:	81 60       	ori	r24, 0x01	; 1
    1498:	22 0f       	add	r18, r18
    149a:	33 1f       	adc	r19, r19
    149c:	44 1f       	adc	r20, r20
    149e:	55 1f       	adc	r21, r21
    14a0:	61 50       	subi	r22, 0x01	; 1
    14a2:	70 40       	sbci	r23, 0x00	; 0
    14a4:	80 30       	cpi	r24, 0x00	; 0
    14a6:	e0 e0       	ldi	r30, 0x00	; 0
    14a8:	9e 07       	cpc	r25, r30
    14aa:	e0 e0       	ldi	r30, 0x00	; 0
    14ac:	ae 07       	cpc	r26, r30
    14ae:	e0 e4       	ldi	r30, 0x40	; 64
    14b0:	be 07       	cpc	r27, r30
    14b2:	60 f3       	brcs	.-40     	; 0x148c <__mulsf3+0x16a>
    14b4:	6b 8f       	std	Y+27, r22	; 0x1b
    14b6:	7c 8f       	std	Y+28, r23	; 0x1c
    14b8:	6f e7       	ldi	r22, 0x7F	; 127
    14ba:	e6 2e       	mov	r14, r22
    14bc:	f1 2c       	mov	r15, r1
    14be:	01 2d       	mov	r16, r1
    14c0:	11 2d       	mov	r17, r1
    14c2:	e8 22       	and	r14, r24
    14c4:	f9 22       	and	r15, r25
    14c6:	0a 23       	and	r16, r26
    14c8:	1b 23       	and	r17, r27
    14ca:	60 e4       	ldi	r22, 0x40	; 64
    14cc:	e6 16       	cp	r14, r22
    14ce:	f1 04       	cpc	r15, r1
    14d0:	01 05       	cpc	r16, r1
    14d2:	11 05       	cpc	r17, r1
    14d4:	61 f4       	brne	.+24     	; 0x14ee <__mulsf3+0x1cc>
    14d6:	87 fd       	sbrc	r24, 7
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <__mulsf3+0x1cc>
    14da:	21 15       	cp	r18, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	41 05       	cpc	r20, r1
    14e0:	51 05       	cpc	r21, r1
    14e2:	29 f0       	breq	.+10     	; 0x14ee <__mulsf3+0x1cc>
    14e4:	80 5c       	subi	r24, 0xC0	; 192
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	af 4f       	sbci	r26, 0xFF	; 255
    14ea:	bf 4f       	sbci	r27, 0xFF	; 255
    14ec:	80 78       	andi	r24, 0x80	; 128
    14ee:	8d 8f       	std	Y+29, r24	; 0x1d
    14f0:	9e 8f       	std	Y+30, r25	; 0x1e
    14f2:	af 8f       	std	Y+31, r26	; 0x1f
    14f4:	b8 a3       	std	Y+32, r27	; 0x20
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	89 8f       	std	Y+25, r24	; 0x19
    14fa:	ce 01       	movw	r24, r28
    14fc:	49 96       	adiw	r24, 0x19	; 25
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <__mulsf3+0x1e2>
    1500:	89 eb       	ldi	r24, 0xB9	; 185
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	d3 d0       	rcall	.+422    	; 0x16ac <__pack_f>
    1506:	a0 96       	adiw	r28, 0x20	; 32
    1508:	e2 e1       	ldi	r30, 0x12	; 18
    150a:	7b c2       	rjmp	.+1270   	; 0x1a02 <__epilogue_restores__>

0000150c <__gtsf2>:
    150c:	a8 e1       	ldi	r26, 0x18	; 24
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	eb e8       	ldi	r30, 0x8B	; 139
    1512:	fa e0       	ldi	r31, 0x0A	; 10
    1514:	66 c2       	rjmp	.+1228   	; 0x19e2 <__prologue_saves__+0x18>
    1516:	69 83       	std	Y+1, r22	; 0x01
    1518:	7a 83       	std	Y+2, r23	; 0x02
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	9c 83       	std	Y+4, r25	; 0x04
    151e:	2d 83       	std	Y+5, r18	; 0x05
    1520:	3e 83       	std	Y+6, r19	; 0x06
    1522:	4f 83       	std	Y+7, r20	; 0x07
    1524:	58 87       	std	Y+8, r21	; 0x08
    1526:	8e 01       	movw	r16, r28
    1528:	07 5f       	subi	r16, 0xF7	; 247
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	b8 01       	movw	r22, r16
    1532:	89 d1       	rcall	.+786    	; 0x1846 <__unpack_f>
    1534:	81 e1       	ldi	r24, 0x11	; 17
    1536:	e8 2e       	mov	r14, r24
    1538:	f1 2c       	mov	r15, r1
    153a:	ec 0e       	add	r14, r28
    153c:	fd 1e       	adc	r15, r29
    153e:	ce 01       	movw	r24, r28
    1540:	05 96       	adiw	r24, 0x05	; 5
    1542:	b7 01       	movw	r22, r14
    1544:	80 d1       	rcall	.+768    	; 0x1846 <__unpack_f>
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	38 f0       	brcs	.+14     	; 0x155a <__gtsf2+0x4e>
    154c:	89 89       	ldd	r24, Y+17	; 0x11
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	20 f0       	brcs	.+8      	; 0x155a <__gtsf2+0x4e>
    1552:	c8 01       	movw	r24, r16
    1554:	b7 01       	movw	r22, r14
    1556:	e0 d1       	rcall	.+960    	; 0x1918 <__fpcmp_parts_f>
    1558:	01 c0       	rjmp	.+2      	; 0x155c <__gtsf2+0x50>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	68 96       	adiw	r28, 0x18	; 24
    155e:	e6 e0       	ldi	r30, 0x06	; 6
    1560:	5c c2       	rjmp	.+1208   	; 0x1a1a <__epilogue_restores__+0x18>

00001562 <__gesf2>:
    1562:	a8 e1       	ldi	r26, 0x18	; 24
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e6 eb       	ldi	r30, 0xB6	; 182
    1568:	fa e0       	ldi	r31, 0x0A	; 10
    156a:	3b c2       	rjmp	.+1142   	; 0x19e2 <__prologue_saves__+0x18>
    156c:	69 83       	std	Y+1, r22	; 0x01
    156e:	7a 83       	std	Y+2, r23	; 0x02
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	2d 83       	std	Y+5, r18	; 0x05
    1576:	3e 83       	std	Y+6, r19	; 0x06
    1578:	4f 83       	std	Y+7, r20	; 0x07
    157a:	58 87       	std	Y+8, r21	; 0x08
    157c:	8e 01       	movw	r16, r28
    157e:	07 5f       	subi	r16, 0xF7	; 247
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	b8 01       	movw	r22, r16
    1588:	5e d1       	rcall	.+700    	; 0x1846 <__unpack_f>
    158a:	81 e1       	ldi	r24, 0x11	; 17
    158c:	e8 2e       	mov	r14, r24
    158e:	f1 2c       	mov	r15, r1
    1590:	ec 0e       	add	r14, r28
    1592:	fd 1e       	adc	r15, r29
    1594:	ce 01       	movw	r24, r28
    1596:	05 96       	adiw	r24, 0x05	; 5
    1598:	b7 01       	movw	r22, r14
    159a:	55 d1       	rcall	.+682    	; 0x1846 <__unpack_f>
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	38 f0       	brcs	.+14     	; 0x15b0 <__gesf2+0x4e>
    15a2:	89 89       	ldd	r24, Y+17	; 0x11
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__gesf2+0x4e>
    15a8:	c8 01       	movw	r24, r16
    15aa:	b7 01       	movw	r22, r14
    15ac:	b5 d1       	rcall	.+874    	; 0x1918 <__fpcmp_parts_f>
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <__gesf2+0x50>
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
    15b2:	68 96       	adiw	r28, 0x18	; 24
    15b4:	e6 e0       	ldi	r30, 0x06	; 6
    15b6:	31 c2       	rjmp	.+1122   	; 0x1a1a <__epilogue_restores__+0x18>

000015b8 <__ltsf2>:
    15b8:	a8 e1       	ldi	r26, 0x18	; 24
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e1 ee       	ldi	r30, 0xE1	; 225
    15be:	fa e0       	ldi	r31, 0x0A	; 10
    15c0:	10 c2       	rjmp	.+1056   	; 0x19e2 <__prologue_saves__+0x18>
    15c2:	69 83       	std	Y+1, r22	; 0x01
    15c4:	7a 83       	std	Y+2, r23	; 0x02
    15c6:	8b 83       	std	Y+3, r24	; 0x03
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	2d 83       	std	Y+5, r18	; 0x05
    15cc:	3e 83       	std	Y+6, r19	; 0x06
    15ce:	4f 83       	std	Y+7, r20	; 0x07
    15d0:	58 87       	std	Y+8, r21	; 0x08
    15d2:	8e 01       	movw	r16, r28
    15d4:	07 5f       	subi	r16, 0xF7	; 247
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	b8 01       	movw	r22, r16
    15de:	33 d1       	rcall	.+614    	; 0x1846 <__unpack_f>
    15e0:	81 e1       	ldi	r24, 0x11	; 17
    15e2:	e8 2e       	mov	r14, r24
    15e4:	f1 2c       	mov	r15, r1
    15e6:	ec 0e       	add	r14, r28
    15e8:	fd 1e       	adc	r15, r29
    15ea:	ce 01       	movw	r24, r28
    15ec:	05 96       	adiw	r24, 0x05	; 5
    15ee:	b7 01       	movw	r22, r14
    15f0:	2a d1       	rcall	.+596    	; 0x1846 <__unpack_f>
    15f2:	89 85       	ldd	r24, Y+9	; 0x09
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	38 f0       	brcs	.+14     	; 0x1606 <__ltsf2+0x4e>
    15f8:	89 89       	ldd	r24, Y+17	; 0x11
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	20 f0       	brcs	.+8      	; 0x1606 <__ltsf2+0x4e>
    15fe:	c8 01       	movw	r24, r16
    1600:	b7 01       	movw	r22, r14
    1602:	8a d1       	rcall	.+788    	; 0x1918 <__fpcmp_parts_f>
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <__ltsf2+0x50>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	68 96       	adiw	r28, 0x18	; 24
    160a:	e6 e0       	ldi	r30, 0x06	; 6
    160c:	06 c2       	rjmp	.+1036   	; 0x1a1a <__epilogue_restores__+0x18>

0000160e <__fixsfsi>:
    160e:	ac e0       	ldi	r26, 0x0C	; 12
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ec e0       	ldi	r30, 0x0C	; 12
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	e9 c1       	rjmp	.+978    	; 0x19ea <__prologue_saves__+0x20>
    1618:	69 83       	std	Y+1, r22	; 0x01
    161a:	7a 83       	std	Y+2, r23	; 0x02
    161c:	8b 83       	std	Y+3, r24	; 0x03
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	ce 01       	movw	r24, r28
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	be 01       	movw	r22, r28
    1626:	6b 5f       	subi	r22, 0xFB	; 251
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	0d d1       	rcall	.+538    	; 0x1846 <__unpack_f>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	81 f1       	breq	.+96     	; 0x1692 <__fixsfsi+0x84>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	70 f1       	brcs	.+92     	; 0x1692 <__fixsfsi+0x84>
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	21 f4       	brne	.+8      	; 0x1642 <__fixsfsi+0x34>
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	88 23       	and	r24, r24
    163e:	69 f1       	breq	.+90     	; 0x169a <__fixsfsi+0x8c>
    1640:	0a c0       	rjmp	.+20     	; 0x1656 <__fixsfsi+0x48>
    1642:	2f 81       	ldd	r18, Y+7	; 0x07
    1644:	38 85       	ldd	r19, Y+8	; 0x08
    1646:	37 fd       	sbrc	r19, 7
    1648:	24 c0       	rjmp	.+72     	; 0x1692 <__fixsfsi+0x84>
    164a:	6e 81       	ldd	r22, Y+6	; 0x06
    164c:	2f 31       	cpi	r18, 0x1F	; 31
    164e:	31 05       	cpc	r19, r1
    1650:	3c f0       	brlt	.+14     	; 0x1660 <__fixsfsi+0x52>
    1652:	66 23       	and	r22, r22
    1654:	11 f1       	breq	.+68     	; 0x169a <__fixsfsi+0x8c>
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	50 e8       	ldi	r21, 0x80	; 128
    165e:	21 c0       	rjmp	.+66     	; 0x16a2 <__fixsfsi+0x94>
    1660:	8e e1       	ldi	r24, 0x1E	; 30
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	82 1b       	sub	r24, r18
    1666:	93 0b       	sbc	r25, r19
    1668:	29 85       	ldd	r18, Y+9	; 0x09
    166a:	3a 85       	ldd	r19, Y+10	; 0x0a
    166c:	4b 85       	ldd	r20, Y+11	; 0x0b
    166e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__fixsfsi+0x6c>
    1672:	56 95       	lsr	r21
    1674:	47 95       	ror	r20
    1676:	37 95       	ror	r19
    1678:	27 95       	ror	r18
    167a:	8a 95       	dec	r24
    167c:	d2 f7       	brpl	.-12     	; 0x1672 <__fixsfsi+0x64>
    167e:	66 23       	and	r22, r22
    1680:	81 f0       	breq	.+32     	; 0x16a2 <__fixsfsi+0x94>
    1682:	50 95       	com	r21
    1684:	40 95       	com	r20
    1686:	30 95       	com	r19
    1688:	21 95       	neg	r18
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	4f 4f       	sbci	r20, 0xFF	; 255
    168e:	5f 4f       	sbci	r21, 0xFF	; 255
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <__fixsfsi+0x94>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <__fixsfsi+0x94>
    169a:	2f ef       	ldi	r18, 0xFF	; 255
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f ef       	ldi	r20, 0xFF	; 255
    16a0:	5f e7       	ldi	r21, 0x7F	; 127
    16a2:	b9 01       	movw	r22, r18
    16a4:	ca 01       	movw	r24, r20
    16a6:	2c 96       	adiw	r28, 0x0c	; 12
    16a8:	e2 e0       	ldi	r30, 0x02	; 2
    16aa:	bb c1       	rjmp	.+886    	; 0x1a22 <__epilogue_restores__+0x20>

000016ac <__pack_f>:
    16ac:	ef 92       	push	r14
    16ae:	ff 92       	push	r15
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	fc 01       	movw	r30, r24
    16ba:	24 81       	ldd	r18, Z+4	; 0x04
    16bc:	35 81       	ldd	r19, Z+5	; 0x05
    16be:	46 81       	ldd	r20, Z+6	; 0x06
    16c0:	57 81       	ldd	r21, Z+7	; 0x07
    16c2:	61 81       	ldd	r22, Z+1	; 0x01
    16c4:	80 81       	ld	r24, Z
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	20 f4       	brcc	.+8      	; 0x16d2 <__pack_f+0x26>
    16ca:	40 61       	ori	r20, 0x10	; 16
    16cc:	ef ef       	ldi	r30, 0xFF	; 255
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	a3 c0       	rjmp	.+326    	; 0x1818 <__pack_f+0x16c>
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <__pack_f+0x2c>
    16d6:	9b c0       	rjmp	.+310    	; 0x180e <__pack_f+0x162>
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	09 f4       	brne	.+2      	; 0x16de <__pack_f+0x32>
    16dc:	92 c0       	rjmp	.+292    	; 0x1802 <__pack_f+0x156>
    16de:	21 15       	cp	r18, r1
    16e0:	31 05       	cpc	r19, r1
    16e2:	41 05       	cpc	r20, r1
    16e4:	51 05       	cpc	r21, r1
    16e6:	09 f4       	brne	.+2      	; 0x16ea <__pack_f+0x3e>
    16e8:	8f c0       	rjmp	.+286    	; 0x1808 <__pack_f+0x15c>
    16ea:	02 80       	ldd	r0, Z+2	; 0x02
    16ec:	f3 81       	ldd	r31, Z+3	; 0x03
    16ee:	e0 2d       	mov	r30, r0
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	e2 38       	cpi	r30, 0x82	; 130
    16f4:	f8 07       	cpc	r31, r24
    16f6:	0c f0       	brlt	.+2      	; 0x16fa <__pack_f+0x4e>
    16f8:	5a c0       	rjmp	.+180    	; 0x17ae <__pack_f+0x102>
    16fa:	c2 e8       	ldi	r28, 0x82	; 130
    16fc:	df ef       	ldi	r29, 0xFF	; 255
    16fe:	ce 1b       	sub	r28, r30
    1700:	df 0b       	sbc	r29, r31
    1702:	ca 31       	cpi	r28, 0x1A	; 26
    1704:	d1 05       	cpc	r29, r1
    1706:	6c f5       	brge	.+90     	; 0x1762 <__pack_f+0xb6>
    1708:	79 01       	movw	r14, r18
    170a:	8a 01       	movw	r16, r20
    170c:	0c 2e       	mov	r0, r28
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <__pack_f+0x6c>
    1710:	16 95       	lsr	r17
    1712:	07 95       	ror	r16
    1714:	f7 94       	ror	r15
    1716:	e7 94       	ror	r14
    1718:	0a 94       	dec	r0
    171a:	d2 f7       	brpl	.-12     	; 0x1710 <__pack_f+0x64>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	0c 2e       	mov	r0, r28
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__pack_f+0x84>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	aa 1f       	adc	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	0a 94       	dec	r0
    1732:	d2 f7       	brpl	.-12     	; 0x1728 <__pack_f+0x7c>
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	a1 09       	sbc	r26, r1
    1738:	b1 09       	sbc	r27, r1
    173a:	82 23       	and	r24, r18
    173c:	93 23       	and	r25, r19
    173e:	a4 23       	and	r26, r20
    1740:	b5 23       	and	r27, r21
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 05       	cpc	r26, r1
    174e:	b1 05       	cpc	r27, r1
    1750:	19 f4       	brne	.+6      	; 0x1758 <__pack_f+0xac>
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	2e 29       	or	r18, r14
    175a:	3f 29       	or	r19, r15
    175c:	40 2b       	or	r20, r16
    175e:	51 2b       	or	r21, r17
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <__pack_f+0xbc>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	da 01       	movw	r26, r20
    176a:	c9 01       	movw	r24, r18
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	a0 70       	andi	r26, 0x00	; 0
    1772:	b0 70       	andi	r27, 0x00	; 0
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	39 f4       	brne	.+14     	; 0x178c <__pack_f+0xe0>
    177e:	27 ff       	sbrs	r18, 7
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <__pack_f+0xe8>
    1782:	20 5c       	subi	r18, 0xC0	; 192
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	4f 4f       	sbci	r20, 0xFF	; 255
    1788:	5f 4f       	sbci	r21, 0xFF	; 255
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <__pack_f+0xe8>
    178c:	21 5c       	subi	r18, 0xC1	; 193
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	4f 4f       	sbci	r20, 0xFF	; 255
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	e1 e0       	ldi	r30, 0x01	; 1
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	20 30       	cpi	r18, 0x00	; 0
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	38 07       	cpc	r19, r24
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	48 07       	cpc	r20, r24
    17a2:	80 e4       	ldi	r24, 0x40	; 64
    17a4:	58 07       	cpc	r21, r24
    17a6:	28 f5       	brcc	.+74     	; 0x17f2 <__pack_f+0x146>
    17a8:	e0 e0       	ldi	r30, 0x00	; 0
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	22 c0       	rjmp	.+68     	; 0x17f2 <__pack_f+0x146>
    17ae:	e0 38       	cpi	r30, 0x80	; 128
    17b0:	f1 05       	cpc	r31, r1
    17b2:	6c f5       	brge	.+90     	; 0x180e <__pack_f+0x162>
    17b4:	e1 58       	subi	r30, 0x81	; 129
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	da 01       	movw	r26, r20
    17ba:	c9 01       	movw	r24, r18
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	a0 70       	andi	r26, 0x00	; 0
    17c2:	b0 70       	andi	r27, 0x00	; 0
    17c4:	80 34       	cpi	r24, 0x40	; 64
    17c6:	91 05       	cpc	r25, r1
    17c8:	a1 05       	cpc	r26, r1
    17ca:	b1 05       	cpc	r27, r1
    17cc:	39 f4       	brne	.+14     	; 0x17dc <__pack_f+0x130>
    17ce:	27 ff       	sbrs	r18, 7
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <__pack_f+0x138>
    17d2:	20 5c       	subi	r18, 0xC0	; 192
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	4f 4f       	sbci	r20, 0xFF	; 255
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <__pack_f+0x138>
    17dc:	21 5c       	subi	r18, 0xC1	; 193
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	4f 4f       	sbci	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	57 ff       	sbrs	r21, 7
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <__pack_f+0x146>
    17e8:	56 95       	lsr	r21
    17ea:	47 95       	ror	r20
    17ec:	37 95       	ror	r19
    17ee:	27 95       	ror	r18
    17f0:	31 96       	adiw	r30, 0x01	; 1
    17f2:	87 e0       	ldi	r24, 0x07	; 7
    17f4:	56 95       	lsr	r21
    17f6:	47 95       	ror	r20
    17f8:	37 95       	ror	r19
    17fa:	27 95       	ror	r18
    17fc:	8a 95       	dec	r24
    17fe:	d1 f7       	brne	.-12     	; 0x17f4 <__pack_f+0x148>
    1800:	0b c0       	rjmp	.+22     	; 0x1818 <__pack_f+0x16c>
    1802:	e0 e0       	ldi	r30, 0x00	; 0
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <__pack_f+0x166>
    1808:	e0 e0       	ldi	r30, 0x00	; 0
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <__pack_f+0x16c>
    180e:	ef ef       	ldi	r30, 0xFF	; 255
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	8e 2f       	mov	r24, r30
    181a:	87 95       	ror	r24
    181c:	88 27       	eor	r24, r24
    181e:	87 95       	ror	r24
    1820:	94 2f       	mov	r25, r20
    1822:	9f 77       	andi	r25, 0x7F	; 127
    1824:	67 95       	ror	r22
    1826:	66 27       	eor	r22, r22
    1828:	67 95       	ror	r22
    182a:	e6 95       	lsr	r30
    182c:	e2 2e       	mov	r14, r18
    182e:	a9 2f       	mov	r26, r25
    1830:	a8 2b       	or	r26, r24
    1832:	fe 2f       	mov	r31, r30
    1834:	f6 2b       	or	r31, r22
    1836:	62 2f       	mov	r22, r18
    1838:	73 2f       	mov	r23, r19
    183a:	8a 2f       	mov	r24, r26
    183c:	9f 2f       	mov	r25, r31
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	e6 e0       	ldi	r30, 0x06	; 6
    1844:	ea c0       	rjmp	.+468    	; 0x1a1a <__epilogue_restores__+0x18>

00001846 <__unpack_f>:
    1846:	dc 01       	movw	r26, r24
    1848:	fb 01       	movw	r30, r22
    184a:	2c 91       	ld	r18, X
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	3c 91       	ld	r19, X
    1850:	11 97       	sbiw	r26, 0x01	; 1
    1852:	12 96       	adiw	r26, 0x02	; 2
    1854:	8c 91       	ld	r24, X
    1856:	12 97       	sbiw	r26, 0x02	; 2
    1858:	48 2f       	mov	r20, r24
    185a:	4f 77       	andi	r20, 0x7F	; 127
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	98 2f       	mov	r25, r24
    1860:	99 1f       	adc	r25, r25
    1862:	99 27       	eor	r25, r25
    1864:	99 1f       	adc	r25, r25
    1866:	13 96       	adiw	r26, 0x03	; 3
    1868:	6c 91       	ld	r22, X
    186a:	13 97       	sbiw	r26, 0x03	; 3
    186c:	86 2f       	mov	r24, r22
    186e:	88 0f       	add	r24, r24
    1870:	89 2b       	or	r24, r25
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	66 1f       	adc	r22, r22
    1876:	66 27       	eor	r22, r22
    1878:	66 1f       	adc	r22, r22
    187a:	61 83       	std	Z+1, r22	; 0x01
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	39 f5       	brne	.+78     	; 0x18ce <__unpack_f+0x88>
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	41 05       	cpc	r20, r1
    1886:	51 05       	cpc	r21, r1
    1888:	11 f4       	brne	.+4      	; 0x188e <__unpack_f+0x48>
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	29 c0       	rjmp	.+82     	; 0x18e0 <__unpack_f+0x9a>
    188e:	82 e8       	ldi	r24, 0x82	; 130
    1890:	9f ef       	ldi	r25, 0xFF	; 255
    1892:	93 83       	std	Z+3, r25	; 0x03
    1894:	82 83       	std	Z+2, r24	; 0x02
    1896:	67 e0       	ldi	r22, 0x07	; 7
    1898:	22 0f       	add	r18, r18
    189a:	33 1f       	adc	r19, r19
    189c:	44 1f       	adc	r20, r20
    189e:	55 1f       	adc	r21, r21
    18a0:	6a 95       	dec	r22
    18a2:	d1 f7       	brne	.-12     	; 0x1898 <__unpack_f+0x52>
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	80 83       	st	Z, r24
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <__unpack_f+0x76>
    18aa:	22 0f       	add	r18, r18
    18ac:	33 1f       	adc	r19, r19
    18ae:	44 1f       	adc	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	93 81       	ldd	r25, Z+3	; 0x03
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	93 83       	std	Z+3, r25	; 0x03
    18ba:	82 83       	std	Z+2, r24	; 0x02
    18bc:	20 30       	cpi	r18, 0x00	; 0
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	38 07       	cpc	r19, r24
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	48 07       	cpc	r20, r24
    18c6:	80 e4       	ldi	r24, 0x40	; 64
    18c8:	58 07       	cpc	r21, r24
    18ca:	78 f3       	brcs	.-34     	; 0x18aa <__unpack_f+0x64>
    18cc:	20 c0       	rjmp	.+64     	; 0x190e <__unpack_f+0xc8>
    18ce:	8f 3f       	cpi	r24, 0xFF	; 255
    18d0:	91 05       	cpc	r25, r1
    18d2:	79 f4       	brne	.+30     	; 0x18f2 <__unpack_f+0xac>
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 05       	cpc	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	19 f4       	brne	.+6      	; 0x18e4 <__unpack_f+0x9e>
    18de:	84 e0       	ldi	r24, 0x04	; 4
    18e0:	80 83       	st	Z, r24
    18e2:	08 95       	ret
    18e4:	44 ff       	sbrs	r20, 4
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <__unpack_f+0xa8>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 83       	st	Z, r24
    18ec:	10 c0       	rjmp	.+32     	; 0x190e <__unpack_f+0xc8>
    18ee:	10 82       	st	Z, r1
    18f0:	0e c0       	rjmp	.+28     	; 0x190e <__unpack_f+0xc8>
    18f2:	8f 57       	subi	r24, 0x7F	; 127
    18f4:	90 40       	sbci	r25, 0x00	; 0
    18f6:	93 83       	std	Z+3, r25	; 0x03
    18f8:	82 83       	std	Z+2, r24	; 0x02
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	80 83       	st	Z, r24
    18fe:	87 e0       	ldi	r24, 0x07	; 7
    1900:	22 0f       	add	r18, r18
    1902:	33 1f       	adc	r19, r19
    1904:	44 1f       	adc	r20, r20
    1906:	55 1f       	adc	r21, r21
    1908:	8a 95       	dec	r24
    190a:	d1 f7       	brne	.-12     	; 0x1900 <__unpack_f+0xba>
    190c:	50 64       	ori	r21, 0x40	; 64
    190e:	24 83       	std	Z+4, r18	; 0x04
    1910:	35 83       	std	Z+5, r19	; 0x05
    1912:	46 83       	std	Z+6, r20	; 0x06
    1914:	57 83       	std	Z+7, r21	; 0x07
    1916:	08 95       	ret

00001918 <__fpcmp_parts_f>:
    1918:	fc 01       	movw	r30, r24
    191a:	db 01       	movw	r26, r22
    191c:	90 81       	ld	r25, Z
    191e:	92 30       	cpi	r25, 0x02	; 2
    1920:	08 f4       	brcc	.+2      	; 0x1924 <__fpcmp_parts_f+0xc>
    1922:	49 c0       	rjmp	.+146    	; 0x19b6 <__fpcmp_parts_f+0x9e>
    1924:	8c 91       	ld	r24, X
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	08 f4       	brcc	.+2      	; 0x192c <__fpcmp_parts_f+0x14>
    192a:	45 c0       	rjmp	.+138    	; 0x19b6 <__fpcmp_parts_f+0x9e>
    192c:	94 30       	cpi	r25, 0x04	; 4
    192e:	51 f4       	brne	.+20     	; 0x1944 <__fpcmp_parts_f+0x2c>
    1930:	61 81       	ldd	r22, Z+1	; 0x01
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	b1 f5       	brne	.+108    	; 0x19a2 <__fpcmp_parts_f+0x8a>
    1936:	11 96       	adiw	r26, 0x01	; 1
    1938:	2c 91       	ld	r18, X
    193a:	11 97       	sbiw	r26, 0x01	; 1
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	26 1b       	sub	r18, r22
    1940:	31 09       	sbc	r19, r1
    1942:	41 c0       	rjmp	.+130    	; 0x19c6 <__fpcmp_parts_f+0xae>
    1944:	84 30       	cpi	r24, 0x04	; 4
    1946:	21 f0       	breq	.+8      	; 0x1950 <__fpcmp_parts_f+0x38>
    1948:	92 30       	cpi	r25, 0x02	; 2
    194a:	41 f4       	brne	.+16     	; 0x195c <__fpcmp_parts_f+0x44>
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	b1 f1       	breq	.+108    	; 0x19bc <__fpcmp_parts_f+0xa4>
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	8c 91       	ld	r24, X
    1954:	11 97       	sbiw	r26, 0x01	; 1
    1956:	88 23       	and	r24, r24
    1958:	a1 f1       	breq	.+104    	; 0x19c2 <__fpcmp_parts_f+0xaa>
    195a:	2d c0       	rjmp	.+90     	; 0x19b6 <__fpcmp_parts_f+0x9e>
    195c:	61 81       	ldd	r22, Z+1	; 0x01
    195e:	82 30       	cpi	r24, 0x02	; 2
    1960:	01 f1       	breq	.+64     	; 0x19a2 <__fpcmp_parts_f+0x8a>
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	8c 91       	ld	r24, X
    1966:	11 97       	sbiw	r26, 0x01	; 1
    1968:	68 17       	cp	r22, r24
    196a:	d9 f4       	brne	.+54     	; 0x19a2 <__fpcmp_parts_f+0x8a>
    196c:	22 81       	ldd	r18, Z+2	; 0x02
    196e:	33 81       	ldd	r19, Z+3	; 0x03
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	8d 91       	ld	r24, X+
    1974:	9c 91       	ld	r25, X
    1976:	13 97       	sbiw	r26, 0x03	; 3
    1978:	82 17       	cp	r24, r18
    197a:	93 07       	cpc	r25, r19
    197c:	94 f0       	brlt	.+36     	; 0x19a2 <__fpcmp_parts_f+0x8a>
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	bc f0       	brlt	.+46     	; 0x19b2 <__fpcmp_parts_f+0x9a>
    1984:	24 81       	ldd	r18, Z+4	; 0x04
    1986:	35 81       	ldd	r19, Z+5	; 0x05
    1988:	46 81       	ldd	r20, Z+6	; 0x06
    198a:	57 81       	ldd	r21, Z+7	; 0x07
    198c:	14 96       	adiw	r26, 0x04	; 4
    198e:	8d 91       	ld	r24, X+
    1990:	9d 91       	ld	r25, X+
    1992:	0d 90       	ld	r0, X+
    1994:	bc 91       	ld	r27, X
    1996:	a0 2d       	mov	r26, r0
    1998:	82 17       	cp	r24, r18
    199a:	93 07       	cpc	r25, r19
    199c:	a4 07       	cpc	r26, r20
    199e:	b5 07       	cpc	r27, r21
    19a0:	18 f4       	brcc	.+6      	; 0x19a8 <__fpcmp_parts_f+0x90>
    19a2:	66 23       	and	r22, r22
    19a4:	41 f0       	breq	.+16     	; 0x19b6 <__fpcmp_parts_f+0x9e>
    19a6:	0d c0       	rjmp	.+26     	; 0x19c2 <__fpcmp_parts_f+0xaa>
    19a8:	28 17       	cp	r18, r24
    19aa:	39 07       	cpc	r19, r25
    19ac:	4a 07       	cpc	r20, r26
    19ae:	5b 07       	cpc	r21, r27
    19b0:	28 f4       	brcc	.+10     	; 0x19bc <__fpcmp_parts_f+0xa4>
    19b2:	66 23       	and	r22, r22
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <__fpcmp_parts_f+0xaa>
    19b6:	21 e0       	ldi	r18, 0x01	; 1
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <__fpcmp_parts_f+0xae>
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <__fpcmp_parts_f+0xae>
    19c2:	2f ef       	ldi	r18, 0xFF	; 255
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	c9 01       	movw	r24, r18
    19c8:	08 95       	ret

000019ca <__prologue_saves__>:
    19ca:	2f 92       	push	r2
    19cc:	3f 92       	push	r3
    19ce:	4f 92       	push	r4
    19d0:	5f 92       	push	r5
    19d2:	6f 92       	push	r6
    19d4:	7f 92       	push	r7
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	ca 1b       	sub	r28, r26
    19f4:	db 0b       	sbc	r29, r27
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	09 94       	ijmp

00001a02 <__epilogue_restores__>:
    1a02:	2a 88       	ldd	r2, Y+18	; 0x12
    1a04:	39 88       	ldd	r3, Y+17	; 0x11
    1a06:	48 88       	ldd	r4, Y+16	; 0x10
    1a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a14:	b9 84       	ldd	r11, Y+9	; 0x09
    1a16:	c8 84       	ldd	r12, Y+8	; 0x08
    1a18:	df 80       	ldd	r13, Y+7	; 0x07
    1a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a20:	1b 81       	ldd	r17, Y+3	; 0x03
    1a22:	aa 81       	ldd	r26, Y+2	; 0x02
    1a24:	b9 81       	ldd	r27, Y+1	; 0x01
    1a26:	ce 0f       	add	r28, r30
    1a28:	d1 1d       	adc	r29, r1
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	ed 01       	movw	r28, r26
    1a36:	08 95       	ret

00001a38 <memcpy>:
    1a38:	fb 01       	movw	r30, r22
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <memcpy+0xa>
    1a3e:	01 90       	ld	r0, Z+
    1a40:	0d 92       	st	X+, r0
    1a42:	41 50       	subi	r20, 0x01	; 1
    1a44:	50 40       	sbci	r21, 0x00	; 0
    1a46:	d8 f7       	brcc	.-10     	; 0x1a3e <memcpy+0x6>
    1a48:	08 95       	ret

00001a4a <sprintf>:
    1a4a:	ae e0       	ldi	r26, 0x0E	; 14
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	ea e2       	ldi	r30, 0x2A	; 42
    1a50:	fd e0       	ldi	r31, 0x0D	; 13
    1a52:	c9 cf       	rjmp	.-110    	; 0x19e6 <__prologue_saves__+0x1c>
    1a54:	0d 89       	ldd	r16, Y+21	; 0x15
    1a56:	1e 89       	ldd	r17, Y+22	; 0x16
    1a58:	86 e0       	ldi	r24, 0x06	; 6
    1a5a:	8c 83       	std	Y+4, r24	; 0x04
    1a5c:	1a 83       	std	Y+2, r17	; 0x02
    1a5e:	09 83       	std	Y+1, r16	; 0x01
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f e7       	ldi	r25, 0x7F	; 127
    1a64:	9e 83       	std	Y+6, r25	; 0x06
    1a66:	8d 83       	std	Y+5, r24	; 0x05
    1a68:	9e 01       	movw	r18, r28
    1a6a:	27 5e       	subi	r18, 0xE7	; 231
    1a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	6f 89       	ldd	r22, Y+23	; 0x17
    1a74:	78 8d       	ldd	r23, Y+24	; 0x18
    1a76:	a9 01       	movw	r20, r18
    1a78:	08 d0       	rcall	.+16     	; 0x1a8a <vfprintf>
    1a7a:	ef 81       	ldd	r30, Y+7	; 0x07
    1a7c:	f8 85       	ldd	r31, Y+8	; 0x08
    1a7e:	e0 0f       	add	r30, r16
    1a80:	f1 1f       	adc	r31, r17
    1a82:	10 82       	st	Z, r1
    1a84:	2e 96       	adiw	r28, 0x0e	; 14
    1a86:	e4 e0       	ldi	r30, 0x04	; 4
    1a88:	ca cf       	rjmp	.-108    	; 0x1a1e <__epilogue_restores__+0x1c>

00001a8a <vfprintf>:
    1a8a:	ac e0       	ldi	r26, 0x0C	; 12
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	ea e4       	ldi	r30, 0x4A	; 74
    1a90:	fd e0       	ldi	r31, 0x0D	; 13
    1a92:	9b cf       	rjmp	.-202    	; 0x19ca <__prologue_saves__>
    1a94:	6c 01       	movw	r12, r24
    1a96:	1b 01       	movw	r2, r22
    1a98:	8a 01       	movw	r16, r20
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	17 82       	std	Z+7, r1	; 0x07
    1a9e:	16 82       	std	Z+6, r1	; 0x06
    1aa0:	83 81       	ldd	r24, Z+3	; 0x03
    1aa2:	81 ff       	sbrs	r24, 1
    1aa4:	c4 c1       	rjmp	.+904    	; 0x1e2e <vfprintf+0x3a4>
    1aa6:	2e 01       	movw	r4, r28
    1aa8:	08 94       	sec
    1aaa:	41 1c       	adc	r4, r1
    1aac:	51 1c       	adc	r5, r1
    1aae:	f6 01       	movw	r30, r12
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	f1 01       	movw	r30, r2
    1ab4:	93 fd       	sbrc	r25, 3
    1ab6:	85 91       	lpm	r24, Z+
    1ab8:	93 ff       	sbrs	r25, 3
    1aba:	81 91       	ld	r24, Z+
    1abc:	1f 01       	movw	r2, r30
    1abe:	88 23       	and	r24, r24
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <vfprintf+0x3a>
    1ac2:	b1 c1       	rjmp	.+866    	; 0x1e26 <vfprintf+0x39c>
    1ac4:	85 32       	cpi	r24, 0x25	; 37
    1ac6:	39 f4       	brne	.+14     	; 0x1ad6 <vfprintf+0x4c>
    1ac8:	93 fd       	sbrc	r25, 3
    1aca:	85 91       	lpm	r24, Z+
    1acc:	93 ff       	sbrs	r25, 3
    1ace:	81 91       	ld	r24, Z+
    1ad0:	1f 01       	movw	r2, r30
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <vfprintf+0x54>
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	b6 01       	movw	r22, r12
    1ada:	c5 d1       	rcall	.+906    	; 0x1e66 <fputc>
    1adc:	e8 cf       	rjmp	.-48     	; 0x1aae <vfprintf+0x24>
    1ade:	ee 24       	eor	r14, r14
    1ae0:	ff 24       	eor	r15, r15
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	20 32       	cpi	r18, 0x20	; 32
    1ae6:	b0 f4       	brcc	.+44     	; 0x1b14 <vfprintf+0x8a>
    1ae8:	8b 32       	cpi	r24, 0x2B	; 43
    1aea:	69 f0       	breq	.+26     	; 0x1b06 <vfprintf+0x7c>
    1aec:	8c 32       	cpi	r24, 0x2C	; 44
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <vfprintf+0x70>
    1af0:	80 32       	cpi	r24, 0x20	; 32
    1af2:	51 f0       	breq	.+20     	; 0x1b08 <vfprintf+0x7e>
    1af4:	83 32       	cpi	r24, 0x23	; 35
    1af6:	71 f4       	brne	.+28     	; 0x1b14 <vfprintf+0x8a>
    1af8:	0b c0       	rjmp	.+22     	; 0x1b10 <vfprintf+0x86>
    1afa:	8d 32       	cpi	r24, 0x2D	; 45
    1afc:	39 f0       	breq	.+14     	; 0x1b0c <vfprintf+0x82>
    1afe:	80 33       	cpi	r24, 0x30	; 48
    1b00:	49 f4       	brne	.+18     	; 0x1b14 <vfprintf+0x8a>
    1b02:	21 60       	ori	r18, 0x01	; 1
    1b04:	2c c0       	rjmp	.+88     	; 0x1b5e <vfprintf+0xd4>
    1b06:	22 60       	ori	r18, 0x02	; 2
    1b08:	24 60       	ori	r18, 0x04	; 4
    1b0a:	29 c0       	rjmp	.+82     	; 0x1b5e <vfprintf+0xd4>
    1b0c:	28 60       	ori	r18, 0x08	; 8
    1b0e:	27 c0       	rjmp	.+78     	; 0x1b5e <vfprintf+0xd4>
    1b10:	20 61       	ori	r18, 0x10	; 16
    1b12:	25 c0       	rjmp	.+74     	; 0x1b5e <vfprintf+0xd4>
    1b14:	27 fd       	sbrc	r18, 7
    1b16:	2c c0       	rjmp	.+88     	; 0x1b70 <vfprintf+0xe6>
    1b18:	38 2f       	mov	r19, r24
    1b1a:	30 53       	subi	r19, 0x30	; 48
    1b1c:	3a 30       	cpi	r19, 0x0A	; 10
    1b1e:	98 f4       	brcc	.+38     	; 0x1b46 <vfprintf+0xbc>
    1b20:	26 ff       	sbrs	r18, 6
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <vfprintf+0xaa>
    1b24:	8e 2d       	mov	r24, r14
    1b26:	88 0f       	add	r24, r24
    1b28:	e8 2e       	mov	r14, r24
    1b2a:	ee 0c       	add	r14, r14
    1b2c:	ee 0c       	add	r14, r14
    1b2e:	e8 0e       	add	r14, r24
    1b30:	e3 0e       	add	r14, r19
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <vfprintf+0xd4>
    1b34:	8f 2d       	mov	r24, r15
    1b36:	88 0f       	add	r24, r24
    1b38:	f8 2e       	mov	r15, r24
    1b3a:	ff 0c       	add	r15, r15
    1b3c:	ff 0c       	add	r15, r15
    1b3e:	f8 0e       	add	r15, r24
    1b40:	f3 0e       	add	r15, r19
    1b42:	20 62       	ori	r18, 0x20	; 32
    1b44:	0c c0       	rjmp	.+24     	; 0x1b5e <vfprintf+0xd4>
    1b46:	8e 32       	cpi	r24, 0x2E	; 46
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <vfprintf+0xc8>
    1b4a:	26 fd       	sbrc	r18, 6
    1b4c:	6c c1       	rjmp	.+728    	; 0x1e26 <vfprintf+0x39c>
    1b4e:	20 64       	ori	r18, 0x40	; 64
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <vfprintf+0xd4>
    1b52:	8c 36       	cpi	r24, 0x6C	; 108
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <vfprintf+0xd0>
    1b56:	20 68       	ori	r18, 0x80	; 128
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0xd4>
    1b5a:	88 36       	cpi	r24, 0x68	; 104
    1b5c:	49 f4       	brne	.+18     	; 0x1b70 <vfprintf+0xe6>
    1b5e:	f1 01       	movw	r30, r2
    1b60:	93 fd       	sbrc	r25, 3
    1b62:	85 91       	lpm	r24, Z+
    1b64:	93 ff       	sbrs	r25, 3
    1b66:	81 91       	ld	r24, Z+
    1b68:	1f 01       	movw	r2, r30
    1b6a:	88 23       	and	r24, r24
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <vfprintf+0xe6>
    1b6e:	ba cf       	rjmp	.-140    	; 0x1ae4 <vfprintf+0x5a>
    1b70:	98 2f       	mov	r25, r24
    1b72:	95 54       	subi	r25, 0x45	; 69
    1b74:	93 30       	cpi	r25, 0x03	; 3
    1b76:	18 f0       	brcs	.+6      	; 0x1b7e <vfprintf+0xf4>
    1b78:	90 52       	subi	r25, 0x20	; 32
    1b7a:	93 30       	cpi	r25, 0x03	; 3
    1b7c:	28 f4       	brcc	.+10     	; 0x1b88 <vfprintf+0xfe>
    1b7e:	0c 5f       	subi	r16, 0xFC	; 252
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	ff e3       	ldi	r31, 0x3F	; 63
    1b84:	f9 83       	std	Y+1, r31	; 0x01
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <vfprintf+0x118>
    1b88:	83 36       	cpi	r24, 0x63	; 99
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <vfprintf+0x10e>
    1b8c:	83 37       	cpi	r24, 0x73	; 115
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <vfprintf+0x122>
    1b90:	83 35       	cpi	r24, 0x53	; 83
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <vfprintf+0x10c>
    1b94:	5c c0       	rjmp	.+184    	; 0x1c4e <vfprintf+0x1c4>
    1b96:	21 c0       	rjmp	.+66     	; 0x1bda <vfprintf+0x150>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 81       	ld	r24, Z
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	42 01       	movw	r8, r4
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	a7 2e       	mov	r10, r23
    1ba8:	b1 2c       	mov	r11, r1
    1baa:	15 c0       	rjmp	.+42     	; 0x1bd6 <vfprintf+0x14c>
    1bac:	62 e0       	ldi	r22, 0x02	; 2
    1bae:	66 2e       	mov	r6, r22
    1bb0:	71 2c       	mov	r7, r1
    1bb2:	60 0e       	add	r6, r16
    1bb4:	71 1e       	adc	r7, r17
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 80       	ld	r8, Z
    1bba:	91 80       	ldd	r9, Z+1	; 0x01
    1bbc:	26 ff       	sbrs	r18, 6
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x13c>
    1bc0:	6e 2d       	mov	r22, r14
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x140>
    1bc6:	6f ef       	ldi	r22, 0xFF	; 255
    1bc8:	7f ef       	ldi	r23, 0xFF	; 255
    1bca:	c4 01       	movw	r24, r8
    1bcc:	2c 87       	std	Y+12, r18	; 0x0c
    1bce:	40 d1       	rcall	.+640    	; 0x1e50 <strnlen>
    1bd0:	5c 01       	movw	r10, r24
    1bd2:	83 01       	movw	r16, r6
    1bd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd6:	2f 77       	andi	r18, 0x7F	; 127
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <vfprintf+0x17c>
    1bda:	52 e0       	ldi	r21, 0x02	; 2
    1bdc:	65 2e       	mov	r6, r21
    1bde:	71 2c       	mov	r7, r1
    1be0:	60 0e       	add	r6, r16
    1be2:	71 1e       	adc	r7, r17
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 80       	ld	r8, Z
    1be8:	91 80       	ldd	r9, Z+1	; 0x01
    1bea:	26 ff       	sbrs	r18, 6
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vfprintf+0x16a>
    1bee:	6e 2d       	mov	r22, r14
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <vfprintf+0x16e>
    1bf4:	6f ef       	ldi	r22, 0xFF	; 255
    1bf6:	7f ef       	ldi	r23, 0xFF	; 255
    1bf8:	c4 01       	movw	r24, r8
    1bfa:	2c 87       	std	Y+12, r18	; 0x0c
    1bfc:	1e d1       	rcall	.+572    	; 0x1e3a <strnlen_P>
    1bfe:	5c 01       	movw	r10, r24
    1c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c02:	20 68       	ori	r18, 0x80	; 128
    1c04:	83 01       	movw	r16, r6
    1c06:	23 fd       	sbrc	r18, 3
    1c08:	1e c0       	rjmp	.+60     	; 0x1c46 <vfprintf+0x1bc>
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <vfprintf+0x190>
    1c0c:	80 e2       	ldi	r24, 0x20	; 32
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	b6 01       	movw	r22, r12
    1c12:	2c 87       	std	Y+12, r18	; 0x0c
    1c14:	28 d1       	rcall	.+592    	; 0x1e66 <fputc>
    1c16:	fa 94       	dec	r15
    1c18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c1a:	8f 2d       	mov	r24, r15
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a8 16       	cp	r10, r24
    1c20:	b9 06       	cpc	r11, r25
    1c22:	a0 f3       	brcs	.-24     	; 0x1c0c <vfprintf+0x182>
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46 <vfprintf+0x1bc>
    1c26:	f4 01       	movw	r30, r8
    1c28:	27 fd       	sbrc	r18, 7
    1c2a:	85 91       	lpm	r24, Z+
    1c2c:	27 ff       	sbrs	r18, 7
    1c2e:	81 91       	ld	r24, Z+
    1c30:	4f 01       	movw	r8, r30
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	b6 01       	movw	r22, r12
    1c36:	2c 87       	std	Y+12, r18	; 0x0c
    1c38:	16 d1       	rcall	.+556    	; 0x1e66 <fputc>
    1c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c3c:	f1 10       	cpse	r15, r1
    1c3e:	fa 94       	dec	r15
    1c40:	08 94       	sec
    1c42:	a1 08       	sbc	r10, r1
    1c44:	b1 08       	sbc	r11, r1
    1c46:	a1 14       	cp	r10, r1
    1c48:	b1 04       	cpc	r11, r1
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <vfprintf+0x19c>
    1c4c:	e9 c0       	rjmp	.+466    	; 0x1e20 <vfprintf+0x396>
    1c4e:	84 36       	cpi	r24, 0x64	; 100
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <vfprintf+0x1cc>
    1c52:	89 36       	cpi	r24, 0x69	; 105
    1c54:	41 f5       	brne	.+80     	; 0x1ca6 <vfprintf+0x21c>
    1c56:	27 ff       	sbrs	r18, 7
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <vfprintf+0x1e0>
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0c 5f       	subi	r16, 0xFC	; 252
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <vfprintf+0x1f2>
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	88 27       	eor	r24, r24
    1c72:	77 fd       	sbrc	r23, 7
    1c74:	80 95       	com	r24
    1c76:	98 2f       	mov	r25, r24
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	4f e6       	ldi	r20, 0x6F	; 111
    1c7e:	b4 2e       	mov	r11, r20
    1c80:	b2 22       	and	r11, r18
    1c82:	97 ff       	sbrs	r25, 7
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <vfprintf+0x20e>
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	f0 e8       	ldi	r31, 0x80	; 128
    1c96:	bf 2a       	or	r11, r31
    1c98:	a2 01       	movw	r20, r4
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	0f d1       	rcall	.+542    	; 0x1ebe <__ultoa_invert>
    1ca0:	78 2e       	mov	r7, r24
    1ca2:	74 18       	sub	r7, r4
    1ca4:	44 c0       	rjmp	.+136    	; 0x1d2e <vfprintf+0x2a4>
    1ca6:	85 37       	cpi	r24, 0x75	; 117
    1ca8:	31 f4       	brne	.+12     	; 0x1cb6 <vfprintf+0x22c>
    1caa:	3f ee       	ldi	r19, 0xEF	; 239
    1cac:	b3 2e       	mov	r11, r19
    1cae:	b2 22       	and	r11, r18
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	25 c0       	rjmp	.+74     	; 0x1d00 <vfprintf+0x276>
    1cb6:	99 ef       	ldi	r25, 0xF9	; 249
    1cb8:	b9 2e       	mov	r11, r25
    1cba:	b2 22       	and	r11, r18
    1cbc:	8f 36       	cpi	r24, 0x6F	; 111
    1cbe:	c1 f0       	breq	.+48     	; 0x1cf0 <vfprintf+0x266>
    1cc0:	80 37       	cpi	r24, 0x70	; 112
    1cc2:	20 f4       	brcc	.+8      	; 0x1ccc <vfprintf+0x242>
    1cc4:	88 35       	cpi	r24, 0x58	; 88
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <vfprintf+0x240>
    1cc8:	ae c0       	rjmp	.+348    	; 0x1e26 <vfprintf+0x39c>
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <vfprintf+0x25c>
    1ccc:	80 37       	cpi	r24, 0x70	; 112
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <vfprintf+0x24e>
    1cd0:	88 37       	cpi	r24, 0x78	; 120
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <vfprintf+0x24c>
    1cd4:	a8 c0       	rjmp	.+336    	; 0x1e26 <vfprintf+0x39c>
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <vfprintf+0x252>
    1cd8:	20 e1       	ldi	r18, 0x10	; 16
    1cda:	b2 2a       	or	r11, r18
    1cdc:	b4 fe       	sbrs	r11, 4
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <vfprintf+0x26c>
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	b8 2a       	or	r11, r24
    1ce4:	08 c0       	rjmp	.+16     	; 0x1cf6 <vfprintf+0x26c>
    1ce6:	b4 fe       	sbrs	r11, 4
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <vfprintf+0x272>
    1cea:	e6 e0       	ldi	r30, 0x06	; 6
    1cec:	be 2a       	or	r11, r30
    1cee:	06 c0       	rjmp	.+12     	; 0x1cfc <vfprintf+0x272>
    1cf0:	28 e0       	ldi	r18, 0x08	; 8
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <vfprintf+0x276>
    1cf6:	20 e1       	ldi	r18, 0x10	; 16
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x276>
    1cfc:	20 e1       	ldi	r18, 0x10	; 16
    1cfe:	32 e0       	ldi	r19, 0x02	; 2
    1d00:	b7 fe       	sbrs	r11, 7
    1d02:	08 c0       	rjmp	.+16     	; 0x1d14 <vfprintf+0x28a>
    1d04:	f8 01       	movw	r30, r16
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	0c 5f       	subi	r16, 0xFC	; 252
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <vfprintf+0x298>
    1d14:	f8 01       	movw	r30, r16
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 5f       	subi	r16, 0xFE	; 254
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	a2 01       	movw	r20, r4
    1d24:	cc d0       	rcall	.+408    	; 0x1ebe <__ultoa_invert>
    1d26:	78 2e       	mov	r7, r24
    1d28:	74 18       	sub	r7, r4
    1d2a:	ff e7       	ldi	r31, 0x7F	; 127
    1d2c:	bf 22       	and	r11, r31
    1d2e:	b6 fe       	sbrs	r11, 6
    1d30:	0b c0       	rjmp	.+22     	; 0x1d48 <vfprintf+0x2be>
    1d32:	2e ef       	ldi	r18, 0xFE	; 254
    1d34:	b2 22       	and	r11, r18
    1d36:	7e 14       	cp	r7, r14
    1d38:	38 f4       	brcc	.+14     	; 0x1d48 <vfprintf+0x2be>
    1d3a:	b4 fe       	sbrs	r11, 4
    1d3c:	07 c0       	rjmp	.+14     	; 0x1d4c <vfprintf+0x2c2>
    1d3e:	b2 fc       	sbrc	r11, 2
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x2c2>
    1d42:	8f ee       	ldi	r24, 0xEF	; 239
    1d44:	b8 22       	and	r11, r24
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <vfprintf+0x2c2>
    1d48:	a7 2c       	mov	r10, r7
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <vfprintf+0x2c4>
    1d4c:	ae 2c       	mov	r10, r14
    1d4e:	8b 2d       	mov	r24, r11
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	b4 fe       	sbrs	r11, 4
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <vfprintf+0x2e6>
    1d56:	fe 01       	movw	r30, r28
    1d58:	e7 0d       	add	r30, r7
    1d5a:	f1 1d       	adc	r31, r1
    1d5c:	20 81       	ld	r18, Z
    1d5e:	20 33       	cpi	r18, 0x30	; 48
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <vfprintf+0x2de>
    1d62:	e9 ee       	ldi	r30, 0xE9	; 233
    1d64:	be 22       	and	r11, r30
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <vfprintf+0x2f0>
    1d68:	a3 94       	inc	r10
    1d6a:	b2 fe       	sbrs	r11, 2
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <vfprintf+0x2f0>
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <vfprintf+0x2ee>
    1d70:	86 78       	andi	r24, 0x86	; 134
    1d72:	90 70       	andi	r25, 0x00	; 0
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <vfprintf+0x2f0>
    1d78:	a3 94       	inc	r10
    1d7a:	8b 2c       	mov	r8, r11
    1d7c:	99 24       	eor	r9, r9
    1d7e:	b3 fc       	sbrc	r11, 3
    1d80:	13 c0       	rjmp	.+38     	; 0x1da8 <vfprintf+0x31e>
    1d82:	b0 fe       	sbrs	r11, 0
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <vfprintf+0x318>
    1d86:	af 14       	cp	r10, r15
    1d88:	28 f4       	brcc	.+10     	; 0x1d94 <vfprintf+0x30a>
    1d8a:	e7 2c       	mov	r14, r7
    1d8c:	ef 0c       	add	r14, r15
    1d8e:	ea 18       	sub	r14, r10
    1d90:	af 2c       	mov	r10, r15
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <vfprintf+0x318>
    1d94:	e7 2c       	mov	r14, r7
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <vfprintf+0x318>
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	63 d0       	rcall	.+198    	; 0x1e66 <fputc>
    1da0:	a3 94       	inc	r10
    1da2:	af 14       	cp	r10, r15
    1da4:	c8 f3       	brcs	.-14     	; 0x1d98 <vfprintf+0x30e>
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <vfprintf+0x326>
    1da8:	af 14       	cp	r10, r15
    1daa:	10 f4       	brcc	.+4      	; 0x1db0 <vfprintf+0x326>
    1dac:	fa 18       	sub	r15, r10
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <vfprintf+0x328>
    1db0:	ff 24       	eor	r15, r15
    1db2:	84 fe       	sbrs	r8, 4
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <vfprintf+0x348>
    1db6:	80 e3       	ldi	r24, 0x30	; 48
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	b6 01       	movw	r22, r12
    1dbc:	54 d0       	rcall	.+168    	; 0x1e66 <fputc>
    1dbe:	82 fe       	sbrs	r8, 2
    1dc0:	1d c0       	rjmp	.+58     	; 0x1dfc <vfprintf+0x372>
    1dc2:	81 fe       	sbrs	r8, 1
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <vfprintf+0x342>
    1dc6:	88 e5       	ldi	r24, 0x58	; 88
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	10 c0       	rjmp	.+32     	; 0x1dec <vfprintf+0x362>
    1dcc:	88 e7       	ldi	r24, 0x78	; 120
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <vfprintf+0x362>
    1dd2:	c4 01       	movw	r24, r8
    1dd4:	86 78       	andi	r24, 0x86	; 134
    1dd6:	90 70       	andi	r25, 0x00	; 0
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <vfprintf+0x372>
    1ddc:	81 fc       	sbrc	r8, 1
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0x35a>
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <vfprintf+0x35c>
    1de4:	8b e2       	ldi	r24, 0x2B	; 43
    1de6:	b7 fc       	sbrc	r11, 7
    1de8:	8d e2       	ldi	r24, 0x2D	; 45
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	b6 01       	movw	r22, r12
    1dee:	3b d0       	rcall	.+118    	; 0x1e66 <fputc>
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <vfprintf+0x372>
    1df2:	80 e3       	ldi	r24, 0x30	; 48
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	b6 01       	movw	r22, r12
    1df8:	36 d0       	rcall	.+108    	; 0x1e66 <fputc>
    1dfa:	ea 94       	dec	r14
    1dfc:	7e 14       	cp	r7, r14
    1dfe:	c8 f3       	brcs	.-14     	; 0x1df2 <vfprintf+0x368>
    1e00:	7a 94       	dec	r7
    1e02:	f2 01       	movw	r30, r4
    1e04:	e7 0d       	add	r30, r7
    1e06:	f1 1d       	adc	r31, r1
    1e08:	80 81       	ld	r24, Z
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	2b d0       	rcall	.+86     	; 0x1e66 <fputc>
    1e10:	77 20       	and	r7, r7
    1e12:	b1 f7       	brne	.-20     	; 0x1e00 <vfprintf+0x376>
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <vfprintf+0x396>
    1e16:	80 e2       	ldi	r24, 0x20	; 32
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	24 d0       	rcall	.+72     	; 0x1e66 <fputc>
    1e1e:	fa 94       	dec	r15
    1e20:	ff 20       	and	r15, r15
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <vfprintf+0x38c>
    1e24:	44 ce       	rjmp	.-888    	; 0x1aae <vfprintf+0x24>
    1e26:	f6 01       	movw	r30, r12
    1e28:	26 81       	ldd	r18, Z+6	; 0x06
    1e2a:	37 81       	ldd	r19, Z+7	; 0x07
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x3a8>
    1e2e:	2f ef       	ldi	r18, 0xFF	; 255
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	c9 01       	movw	r24, r18
    1e34:	2c 96       	adiw	r28, 0x0c	; 12
    1e36:	e2 e1       	ldi	r30, 0x12	; 18
    1e38:	e4 cd       	rjmp	.-1080   	; 0x1a02 <__epilogue_restores__>

00001e3a <strnlen_P>:
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	05 90       	lpm	r0, Z+
    1e3e:	61 50       	subi	r22, 0x01	; 1
    1e40:	70 40       	sbci	r23, 0x00	; 0
    1e42:	01 10       	cpse	r0, r1
    1e44:	d8 f7       	brcc	.-10     	; 0x1e3c <strnlen_P+0x2>
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	8e 0f       	add	r24, r30
    1e4c:	9f 1f       	adc	r25, r31
    1e4e:	08 95       	ret

00001e50 <strnlen>:
    1e50:	fc 01       	movw	r30, r24
    1e52:	61 50       	subi	r22, 0x01	; 1
    1e54:	70 40       	sbci	r23, 0x00	; 0
    1e56:	01 90       	ld	r0, Z+
    1e58:	01 10       	cpse	r0, r1
    1e5a:	d8 f7       	brcc	.-10     	; 0x1e52 <strnlen+0x2>
    1e5c:	80 95       	com	r24
    1e5e:	90 95       	com	r25
    1e60:	8e 0f       	add	r24, r30
    1e62:	9f 1f       	adc	r25, r31
    1e64:	08 95       	ret

00001e66 <fputc>:
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	8c 01       	movw	r16, r24
    1e70:	eb 01       	movw	r28, r22
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	81 ff       	sbrs	r24, 1
    1e76:	1b c0       	rjmp	.+54     	; 0x1eae <fputc+0x48>
    1e78:	82 ff       	sbrs	r24, 2
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <fputc+0x30>
    1e7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e80:	8c 81       	ldd	r24, Y+4	; 0x04
    1e82:	9d 81       	ldd	r25, Y+5	; 0x05
    1e84:	28 17       	cp	r18, r24
    1e86:	39 07       	cpc	r19, r25
    1e88:	64 f4       	brge	.+24     	; 0x1ea2 <fputc+0x3c>
    1e8a:	e8 81       	ld	r30, Y
    1e8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8e:	01 93       	st	Z+, r16
    1e90:	f9 83       	std	Y+1, r31	; 0x01
    1e92:	e8 83       	st	Y, r30
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <fputc+0x3c>
    1e96:	e8 85       	ldd	r30, Y+8	; 0x08
    1e98:	f9 85       	ldd	r31, Y+9	; 0x09
    1e9a:	80 2f       	mov	r24, r16
    1e9c:	09 95       	icall
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	31 f4       	brne	.+12     	; 0x1eae <fputc+0x48>
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	9f 83       	std	Y+7, r25	; 0x07
    1eaa:	8e 83       	std	Y+6, r24	; 0x06
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <fputc+0x4c>
    1eae:	0f ef       	ldi	r16, 0xFF	; 255
    1eb0:	1f ef       	ldi	r17, 0xFF	; 255
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <__ultoa_invert>:
    1ebe:	fa 01       	movw	r30, r20
    1ec0:	aa 27       	eor	r26, r26
    1ec2:	28 30       	cpi	r18, 0x08	; 8
    1ec4:	51 f1       	breq	.+84     	; 0x1f1a <__ultoa_invert+0x5c>
    1ec6:	20 31       	cpi	r18, 0x10	; 16
    1ec8:	81 f1       	breq	.+96     	; 0x1f2a <__ultoa_invert+0x6c>
    1eca:	e8 94       	clt
    1ecc:	6f 93       	push	r22
    1ece:	6e 7f       	andi	r22, 0xFE	; 254
    1ed0:	6e 5f       	subi	r22, 0xFE	; 254
    1ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed8:	af 4f       	sbci	r26, 0xFF	; 255
    1eda:	b1 e0       	ldi	r27, 0x01	; 1
    1edc:	3e d0       	rcall	.+124    	; 0x1f5a <__ultoa_invert+0x9c>
    1ede:	b4 e0       	ldi	r27, 0x04	; 4
    1ee0:	3c d0       	rcall	.+120    	; 0x1f5a <__ultoa_invert+0x9c>
    1ee2:	67 0f       	add	r22, r23
    1ee4:	78 1f       	adc	r23, r24
    1ee6:	89 1f       	adc	r24, r25
    1ee8:	9a 1f       	adc	r25, r26
    1eea:	a1 1d       	adc	r26, r1
    1eec:	68 0f       	add	r22, r24
    1eee:	79 1f       	adc	r23, r25
    1ef0:	8a 1f       	adc	r24, r26
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	a1 1d       	adc	r26, r1
    1ef6:	6a 0f       	add	r22, r26
    1ef8:	71 1d       	adc	r23, r1
    1efa:	81 1d       	adc	r24, r1
    1efc:	91 1d       	adc	r25, r1
    1efe:	a1 1d       	adc	r26, r1
    1f00:	20 d0       	rcall	.+64     	; 0x1f42 <__ultoa_invert+0x84>
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <__ultoa_invert+0x48>
    1f04:	68 94       	set
    1f06:	3f 91       	pop	r19
    1f08:	2a e0       	ldi	r18, 0x0A	; 10
    1f0a:	26 9f       	mul	r18, r22
    1f0c:	11 24       	eor	r1, r1
    1f0e:	30 19       	sub	r19, r0
    1f10:	30 5d       	subi	r19, 0xD0	; 208
    1f12:	31 93       	st	Z+, r19
    1f14:	de f6       	brtc	.-74     	; 0x1ecc <__ultoa_invert+0xe>
    1f16:	cf 01       	movw	r24, r30
    1f18:	08 95       	ret
    1f1a:	46 2f       	mov	r20, r22
    1f1c:	47 70       	andi	r20, 0x07	; 7
    1f1e:	40 5d       	subi	r20, 0xD0	; 208
    1f20:	41 93       	st	Z+, r20
    1f22:	b3 e0       	ldi	r27, 0x03	; 3
    1f24:	0f d0       	rcall	.+30     	; 0x1f44 <__ultoa_invert+0x86>
    1f26:	c9 f7       	brne	.-14     	; 0x1f1a <__ultoa_invert+0x5c>
    1f28:	f6 cf       	rjmp	.-20     	; 0x1f16 <__ultoa_invert+0x58>
    1f2a:	46 2f       	mov	r20, r22
    1f2c:	4f 70       	andi	r20, 0x0F	; 15
    1f2e:	40 5d       	subi	r20, 0xD0	; 208
    1f30:	4a 33       	cpi	r20, 0x3A	; 58
    1f32:	18 f0       	brcs	.+6      	; 0x1f3a <__ultoa_invert+0x7c>
    1f34:	49 5d       	subi	r20, 0xD9	; 217
    1f36:	31 fd       	sbrc	r19, 1
    1f38:	40 52       	subi	r20, 0x20	; 32
    1f3a:	41 93       	st	Z+, r20
    1f3c:	02 d0       	rcall	.+4      	; 0x1f42 <__ultoa_invert+0x84>
    1f3e:	a9 f7       	brne	.-22     	; 0x1f2a <__ultoa_invert+0x6c>
    1f40:	ea cf       	rjmp	.-44     	; 0x1f16 <__ultoa_invert+0x58>
    1f42:	b4 e0       	ldi	r27, 0x04	; 4
    1f44:	a6 95       	lsr	r26
    1f46:	97 95       	ror	r25
    1f48:	87 95       	ror	r24
    1f4a:	77 95       	ror	r23
    1f4c:	67 95       	ror	r22
    1f4e:	ba 95       	dec	r27
    1f50:	c9 f7       	brne	.-14     	; 0x1f44 <__ultoa_invert+0x86>
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	61 05       	cpc	r22, r1
    1f56:	71 05       	cpc	r23, r1
    1f58:	08 95       	ret
    1f5a:	9b 01       	movw	r18, r22
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	0a 2e       	mov	r0, r26
    1f60:	06 94       	lsr	r0
    1f62:	57 95       	ror	r21
    1f64:	47 95       	ror	r20
    1f66:	37 95       	ror	r19
    1f68:	27 95       	ror	r18
    1f6a:	ba 95       	dec	r27
    1f6c:	c9 f7       	brne	.-14     	; 0x1f60 <__ultoa_invert+0xa2>
    1f6e:	62 0f       	add	r22, r18
    1f70:	73 1f       	adc	r23, r19
    1f72:	84 1f       	adc	r24, r20
    1f74:	95 1f       	adc	r25, r21
    1f76:	a0 1d       	adc	r26, r0
    1f78:	08 95       	ret

00001f7a <_exit>:
    1f7a:	f8 94       	cli

00001f7c <__stop_program>:
    1f7c:	ff cf       	rjmp	.-2      	; 0x1f7c <__stop_program>
